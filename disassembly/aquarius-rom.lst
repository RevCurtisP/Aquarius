;;Mattel Aquarius Microsoft Basic ROM disassembly
;;
;;Annotated by Curtis F Kaylor
;;
;;Originally disassembled with dasmx, but modified to
;;a TASM/DASM-like syntax

;;Labels and comments are taken from the following:
;;  Original Source Code (Canonical Labels and Comments)
;;    [M80] Microsoft Basic-80 5.2 Source [198]
;;          winworldpc.com/product/microsoft-basic/80
;;    [M65] Microsoft BASIC for 6502 Original Source Code [1978]
;;          www.pagetable.com/?p=774
;;    [GWB] Microsoft GW-BASIC Interpreter Source Code [1983]
;;          github.com/microsoft/GW-BASIC
;;  Commented Disassemby Listings (Non-Canonical)
;;    [A4K] Altair BASIC 3.2 (4K) - Annotated Disassembly [1975]
;;          altairbasic.org/
;;    [A8K] Altair BASIC 84K - Disassembly [1978]
;;          www.autometer.de/unix4fun/z80pack/ftp/altair/basic8k78.orge
;;  Third Party Reference Materials (Non-Canonical)
;;    [L2R] Level II ROM Reference Manual [1980]
;;          https://www.classic-computers.org.nz/system-80/manuals_Level%20II%20ROM%20Reference%20Manual.pdf
;;    [M64] COMPUTE!'s Mapping the C64
;;
;;Label sources are denoted to the left of the label and
;;comment sources are denoted at the beginning of the comment.
;;
;;Comments taken from canonical source code are preceded
;;by a single semicolon, while annotations are preceded by
;;two semicolons.


                        ;;System Variables
                        SCREEN  .equ    $3000   ;;Screen Character Matrix
                        COLOR   .equ    $3800   ;;Screen Color Matrix
                  [M80] TTYPOS  .equ    $3800   ;;Current Screen Column (TRMPOS on 6502)
                  [M65] USRPOK  .equ    $3803   ;;JP instruction for USR() routine
                        HOOK    .equ    $3806   ;;Extended ROM Hook Vector
                  [M80] CNTOFL  .equ    $3808   ;[M80] SUPRESS OUTPUT FLAG ;;Line Count
                        LASTFF  .equ    $3809   ;;Last value last outpUt to port #FF
                        ;               $381E   ;[M80]STORAGE FOR RND
                  [M80] RNDCNT  .equ    $381F   ;
                  [M80] RNDX    .equ    $3820   ;[M80] LAST RANDOM NUMBER GENERATED, BETWEEN 0 AND 1
                        ;               $3824   ;;???
                  [M80] LPTPOS  .equ    $3846   ;[M80] POSITION OF LPT PRINT HEAD
                  [M80] PRTFLG  .equ    $3847   ;[M80] WHETHER OUTPUT GOES TO LPT
                  [M80] CURLIN  .equ    $384D   ;[M80] CURRENT LINE #
                        TXTTAB  .equ    $384F
                        FACLO   .equ    $38E4   ;[M80] LOW ORDER OF MANTISSA
                        FACMO   .equ    $38E5   ;[M80] MIDDLE ORDER OF MANTISSA
                        FACHO   .equ    $38E6   ;[M80] HIGH ORDER OF MANTISSA
                        FAC     .equ    $38E7   ;[M80] EXPONENT


                        ;;Character Constants
                  [GWB] CHRCAN  .equ    3       ;[GWB] CANcel
                        COPYRT  .equ    5       ;;Copyright Symbol
                  [GWB] CHRBEL  .equ    7       ;[GWB] BELl
                  [GWB] CHRBAK  .equ    8       ;[GWB] BAcKspace
                  [GWB] CHRLNF  .equ    10      ;[GWB] Line Feed
                        CLS     ,equ    11      ;;Clear Screen
                  [GWB] CHRRET  ,equ    13      ;[GWB] RETurn
                  [GWB] CHRLDL  .equ    21      ;[GWB] Line DeLete
                        CTLX    ,equ    24      ;;Ctrl-X
                  [GWB] CHRDEL  .equ    127     ;[GWB] DELete

                        ;[M80] Microsoft BASIC has a number of primitive I/O routines:
                        ;[M80]  OUTDO (either CALL or RST) prints char in [A] no registers affected
                        ;[M80]     to either terminal or disk file or printer depending
                        ;[M80]     flags:
                        ;[M80]             PRTFLG if non-zero print to printer
                        ;[M80]
                        ;[M80]  INCHR   input a character into [A] condition codes destroyed.
                        ;[M80]
                        ;[M80]  CRDO    Print a carriage return sequence on either
                        ;[M80]     terminal or printer depending on flags
                        ;[M80]     See OUTDO above. See below code for register use
                        ;[M80]

                        ;;RST 0 - Startup
0000 : C3 E1 1F   [M80] START:   jp      JMPINI         ;;Start Initialization
                                                        ;
0003 : 82 06 22                 .byte   $82,$06,$22     ;;Revision Date 1982-06-22
0006 : 0B                       .byte   11              ;;Revision Number?
0007 : 00                       nop                     ;;Pad out the RST routine

;;RST 1 - Syntax Check
;;In versions that don't use RST, this routine is named SYNCHR
                        ;[M65] "SYNCHK" LOOKS AT THE CURRENT CHARACTER TO MAKE SURE IT
                        ;[M65] IS THE SPECIFIC THING IN THE BYTE IMMEDIATELY FOLLOWING
                        ;[M65] "RST SYNCHK". IF NOT, IT CALLS THE "SYNTAX ERROR" ROUTINE.
                        ;[M65] OTHERWISE IT GOBBLES THE NEXT CHAR AND RETURNS,
                        ;
                        ;[M65] [A]=NEW CHAR AND [H,L] IS ADVANCED BY "CHRGET".
                        ;
0008 : 7E         [M80] SYNCHK: ld      a,(hl)
0009 : E3                       ex      (sp),hl
000A : BE                       cp      (hl)                    ;[M65] CHARACTERS EQUAL?
000B : 23                       inc     hl
000C : E3                       ex      (sp),hl
000D : C2 C4 03                 jp      nz,SNERR                ;[M65] "SYNTAX ERROR"

;;RST 2 - Get Next Character
;;In versions that don't use RST, CHRGTR is called directly
                        ;[M65] "CHRGET" USES [H,L] AS THE CURRENT TEXT PNTR
                        ;[M65] FETCHES A NEW CHARACTER INTO ACCA AFTER INCREMENTING [H,L]
                        ;[M65] AND SETS CONDITION CODES ACCORDING TO WHAT'S IN ACCA.
                        ;[M65]       NOT C=  NUMERIC   ("0" THRU "9")
                        ;[M65]       Z=      ":" OR END-OF-LINE (A NULL)
                        ;[M65]
                        ;[M65] [ACCA] = NEW CHAR.
                        ;[M65] [H,L]=[H,L]+1
                        ;[M65]
0010 : 23               CHRGET: inc     hl            ;INCREMENT THE TEXT PNTR
0011 : 7E         {M65} CHRGOT: ld      a,(hl)        ;entry point to get current character
0012 : FE 3A      {M65} QNUM:   cp      ':'           ;IS IT A ":"?
0014 : D0                       ret     nc            ;IT IS .GE. ":"
0015 : C3 70 06                 jp      CHRCON

;;RST 3 - Output Character
;;In versions that don't use RST, OUTDO is called directly
0018 : C3 8A 19   [GWB] OUTCHR: jp      OUTDO           ; Execute print character routine
001B : 00                       nop                     ; Pad out the RST routine
001C : 00                       nop                     ; (The hook call code from OUTDO
001D : 00                       nop                     ;  could be moved here)
001E : 00                       nop
001F : 00                       nop

;;RST 4 - Compare HL and DE
;;In Level II Basic - This set the flags based on VALTYP
;;In versions that don't use RST, this routine is named DCOMPR
0020 : 7C         [M80] COMPAR: ld      a,h              ;;Compare [DE] to [HL]
0021 : 92                       sub     d               ;;Sets Z flag if equal
0022 : C0                       ret     nz              ;;Sets Carry if [DE] > [HL]
0023 : 7D                       ld      a,l             ;;Destroys [A]
0024 : 93                       sub     e
0025 : C9                       ret

;;These were system variables in Altair 4K Basic, which was loaded into RAM
0026 : 00                       nop                     ;;[A4K] Terminal Row
0027 : 00                       nop                     ;;[A4K] Terminal Column

;;RST 5 - Get sign of Floating Point Argument
                        ;[M65] PUT SIGN OF FACHO IN ACCA.
0028 : 3A E7 38   [M80] FSIGN:  ld      a,(FACHO)
002B : B7                       or      a               ;[M65] IF NUMBER IS ZERO, SO IS RESULT
002C : C2 EB 14                 jp      nz,SIGNC        ;;Check sign of mantissa if not 0
002F : C9                       ret

;;RST 6 - Call Extended BASIC Hook
;;In Altair 4K Basic, pushea the word following the RST instruction onto the stack
;;In Level II Basic, this is used by the Disk System
                        ;; Extended ROM Hook dispatch routine
0030 : DD 2A 06 38      HOOKDO: ld      ix,(HOOK)       ;;Get hook routine address
0034 : DD E9                    jp      (ix)            ;;and jump to it
0036 : 00                       nop                     ;;Pad out RST routine
0037 : 00                       nop

;;RST 7 - Execute User Defined Machine Language Routine
;;In Level II Basic, this is used by the Disk System
0038 : C3 03 38   [M80] USRFN:  jp      USRPOK          ;;Execute USR() routine

;;This is the address initially loaded into HOOK
;;
003B : D9               NOHOOK: exx                     ;;Default Hook Routine
003C : E1                       pop     hl
003D : 23                       inc     hl              ;;Increment the return address
003E : E5                       push    hl              ;;to skip the byte after the RST
003F : D9                       exx
0040 : C9                       ret

0041 : 31 A0 38   [M80] INIT:   ld      sp,038A0H       ;[M80] SET UP TEMP STACK
0044 : 3E 0B                    ld      a,00BH
0046 : CD 94 1D                 call    L1D94
0049 : 2A 01 38                 ld      hl,(X3801)
004C : 36 20                    ld      (hl),020H
004E : 3E 07                    ld      a,007H
0050 : CD 94 1D                 call    L1D94
0053 : AF                       xor     a
0054 : D3 FF                    out     ($FF),a
0056 : 21 FF 2F                 ld      hl,02FFFH
0059 : 22 5D 38                 ld      (X385D),hl
005C : 11 11 E0         EXTCHK: ld      de,$E011        ;;Check for Catridge ROM at $E010
005F : 21 81 00                 ld      hl,$0081
0062 : 1B               EXTCH1: dec     de
0063 : 1B                       dec     de
0064 : 23                       inc     hl
0065 : 1A                       ld      a,(de)
0066 : 0F                       rrca
0067 : 0F                       rrca
0068 : 83                       add     a,e
0069 : BE                       cp      (hl)
006A : 28 F6                    jr      z,EXTCH1
006C : 7E                       ld      a,(hl)
006D : B7                       or      a
006E : 20 19                    jr      nz,RESET
0070 : EB                       ex      de,hl
0071 : 06 0C                    ld      b,00CH
0073 : 86               EXTCH2: add     a,(hl)
0074 : 23                       inc     hl
0075 : 80                       add     a,b
0076 : 05                       dec     b
0077 : 20 FA                    jr      nz,EXTCH2
0079 : AE                       xor     (hl)
007A : D3 FF                    out     ($FF),a
007C : 32 09 38                 ld      (LASTFF),a
007F : C3 10 E0                 jp      XINIT           ;;Execute Catridge Code

0082 : 2B 37 24 24      EXTSIG: .byte   "+7$$3,",0      ;;$A000 Cartridge Signature
0086 : 33 2C 00

0089
0089 : 11 A1 31         RESET:  ld      de,SCREEN+417   ;;print startup message
008C : 21 B0 00                 ld      hl,BASICT
008F : 01 05 00                 ld      bc,5
0092 : ED B0                    ldir
0094 : 11 10 32                 ld      de,SCREEN+528
0097 : 21 B5 00                 ld      hl,STARTT
009A : 01 19 00                 ld      bc,25
009D : ED B0                    ldir

009F : 06 03            CYCLE:  ld      b,3             ;;cycle color
00A1 : CD CF 00                 call    COLORS
00A4 : 06 02                    ld      b,2
00A6 : CD CF 00                 call    COLORS
00A9 : 06 06                    ld      b,6
00AB : CD CF 00                 call    COLORS
00AE : 18 EF                    jr      CYCLE

00B0 : 42 41 53 49      BASICT: .byte "BASIC"
00B4 : 43

00B5 : 50 72 65 73      STARTT: .byte "Press RETURN key to start.",0
00B9 : 73 20 52 45
00BD : 54 55 52 4E
00C1 : 20 6B 65 79
00C5 : 20 74 6F 20
00C9 : 73 74 61 72
00CD : 74 00

00CF

00CF : 21 00 34         COLORS: ld      hl,COLOR
00D2 : 70               COLOR1: ld      (hl),b
00D3 : 23                       inc     hl
00D4 : 7C                       ld      a,h
00D5 : FE 38                    cp      $38
00D7 : 20 F9                    jr      nz,COLOR1
00D9 : 21 00 40                 ld      hl,$4000
00DC : CD 80 1E         COLOR2: call    L1E80
00DF : FE 0D                    cp      CHRCAN
00E1 : 28 1A                    jr      z,COLDST
00E3 : FE 03                    cp      CTL
00E5 : 28 06                    jr      z,WARMST
00E7 : 2B                       dec     hl
00E8 : 7C                       ld      a,h
00E9 : B5                       or      l
00EA : 20 F0                    jr      nz,COLOR2
00EC : C9                       ret

00ED : 3E 0B            WARMST: ld      a,00BH
00EF : CD 72 1D                 call    TTYCHR
00F2 : 3A 09 38                 ld      a,(LASTFF)
00F5 : D3 FF                    out     ($FF),a
00F7 : CD E5 0B                 call    STKINI
00FA : CD 40 1A                 call    L1A40

00FD : 21 87 01         COLDST: ld      hl,DEFALT       ;Set System Variable Default Vslues
0100 : 01 51 00                 ld      bc,81
0103 : 11 03 38                 ld      de,USRPOK
0106 : ED B0                    ldir
0108 : AF                       xor     a
0109 : 32 A9 38                 ld      (X38A9),a
010C : 32 00 39                 ld      (X3900),a
010F : 21 64 39                 ld      hl,03964H
0112                    L0112:
0112 : 23                       inc     hl
0113 : 4E                       ld      c,(hl)
0114 : 7C                       ld      a,h
0115 : B5                       or      l
0116 : 28 0B                    jr      z,L0123
0118 : A9                       xor     c
0119 : 77                       ld      (hl),a
011A : 46                       ld      b,(hl)
011B : 2F                       cpl
011C : 77                       ld      (hl),a
011D : 7E                       ld      a,(hl)
011E : 2F                       cpl
011F : 71                       ld      (hl),c
0120 : B8                       cp      b
0121 : 28 EF                    jr      z,L0112

0123                    L0123:
0123 : 2B                       dec     hl
0124 : 11 2C 3A                 ld      de,03A2CH
0127 : E7                       rst     COMPAR
0128 : DA B7 0B                 jp      c,L0BB7
012B : 11 CE FF                 ld      de,0FFCEH
012E                    L012E:
012E : 22 AD 38                 ld      (MEMSIZ),hl
0131 : 19                       add     hl,de
0132 : 22 4B 38                 ld      (TOPMEM),hl
0135 : CD BE 0B                 call    L0BBE
0138 : CD F2 1F                 call    L1FF2
013B                    L013B:
013B : 31 65 38                 ld      sp,03865H
013E : CD E5 0B                 call    STKINI
0141 : 21 05 20                 ld      hl,02005H
0144 : 11 82 00                 ld      de,00082H
0147                    L0147:
0147 : 1A                       ld      a,(de)
0148 : B7                       or      a
0149 : CA E8 1F                 jp      z,L1FE8
014C : BE                       cp      (hl)
014D : 20 04                    jr      nz,L0153
014F : 2B                       dec     hl
0150 : 13                       inc     de
0151 : 18 F4                    jr      L0147
                                ;
0153                    L0153:
0153 : ED 5F                    ld      a,r
0155 : 17                       rla
0156 : 81                       add     a,c
0157 : D3 FF                    out     ($FF),a
0159 : 32 09 38                 ld      (LASTFF),a
015C : C3 02 04                 jp      READY
                        ;
015F : 0B               FREMES: .byte   CLS
0160 : 43 6F 70 79              .byte   "Copyright ",COPYRT," "
0164 : 72 69 67 68
0168 : 74 20 05 20
016C : 31 39 38 32              .byte   "1982 by Microsoft Inc. S2 ",CHRRET,0
0170 : 20 62 79 20
0174 : 4D 69 63 72
0178 : 6F 73 6F 66
017C : 74 20 49 6E
0180 : 63 2E 20 53
0184 : 32 0A 00

                                ;;System Variable Default Values - 81 ($51) bytes
0187 : C3 97 06         DEFALT: jp      FCERR           ;;USRPOK
018A : 3B 00                    .word   NOHOOK          ;;HOOK
018C : 00                       .byte   0               ;;CNTOFL
018D : A3                       .byte   163             ;;LASTFF
018E : 00                       .byte   0               ;;Last key ASCII value
018F : 00                       .word   0               ;;Keyword routine address
0191 : 20                       .byte   ' '             ;;Character under Cursor
0192 : 00                       .byte   0               ;;Last key scan code
0193 : 00                       .byte   0               ;;Key debounce count
0194 : D6 00                    sub     $00             ;;$3810
0196 : 6F                       ld      l,a             ;;$3812
0197 : 7C                       ld      a,h             ;;$3813
0198 : DE 00                    sbc     a,00            ;;$3814
019A : 67                       ld      h,a             ;;$3816
019B : 78                       ld      a,b             ;;$3817
019C : DE 00                    sbc     a,00            ;;$3818
019E : 47                       ld      b,a             ;;$381A
019F : 3E 00                    ld      a,000H          ;;$381B
01A1 : C9                       ret                     ;;$381D
01A2 : 00                       .byte                   ;;$381E
01A3 : 00                       .byte 0                 ;;RNDCNT
01A4 : 00 35 4A CA              .byte $00,$35,$4A,$CA   ;;RNDX
01A8 : 99                       .byte                   ;;$3824
01A9 : 39                       .byte                   ;;$3825
01AA : 1C                       .byte                   ;;$3826
01AB : 76                       .byte                   ;;$3827
01AC : 98                       .byte                   ;;$3828

01AD                    L01AD:
01AD : 22 95 B3                 ld      (XB395),hl
01B0 : 98                       sbc     a,b
01B1 : 0A                       ld      a,(bc)
                        ;
01B2 : DD                       db      0DDH
                        ;
01B3 : 47                       ld      b,a
01B4 : 98                       sbc     a,b
01B5 : 53                       ld      d,e
01B6 : D1                       pop     de
01B7 : 99                       sbc     a,c
01B8 : 99                       sbc     a,c
01B9 : 0A                       ld      a,(bc)
01BA : 1A                       ld      a,(de)
01BB : 9F                       sbc     a,a
01BC : 98                       sbc     a,b
01BD : 65                       ld      h,l
01BE : BC                       cp      h
01BF : CD 98 D6                 call    LD698
01C2                    L01C2:
01C2 : 77                       ld      (hl),a
01C3 : 3E 98                    ld      a,098H
01C5 : 52                       ld      d,d
01C6                    L01C6:
01C6 : C7                       rst     START
01C7 : 4F                       ld      c,a
01C8                    L01C8:
01C8 : 80                       add     a,b
01C9 : 00                       nop
01CA : 00                       nop
01CB : 00                       nop
01CC : 28 0E                    jr      z,L01DC
01CE : 00                       nop
01CF : 64                       ld      h,h
01D0 : 39                       add     hl,sp
01D1 : FE FF                    cp      $FF
01D3 : 01 39 21                 ld      bc,02139H

01D5              [M65] STMDSP: ;MARKS START OF STATEMENT LIST
01D5 : 12 0C                    .word   ENDS            ;;$0c21
01D7 : BC 05                    .word   FOR             ;;$05bc
01D9 : 13 0D                    .word   NEXT            ;;$0d13
01DB : 1C 07                    .word   DATA            ;;$071c
01DD : 93 08                    .word   INPUT           ;;$0893
01DF : CC 10                    .word   DIM             ;;$10cc
01E1 : BE 08                    .word   READ            ;;$08be
01E3 : 31 07                    .word   LET             ;;$0731
01E5 : DC 06                    .word   GOTO            ;;$06dc
01E7 : BE 06                    .word   RUN             ;;$06be
01E9 : 9C 07                    .word   IF              ;;$079c
01EB : 05 0C                    ,word   RESTOR         ;;$0c05
01ED : CB 06                    ,word   GOSUB           ;;$06cb
01EF : F8 06                    ,word   RETURN          ;;$06f8
01F1 : 1E 07                    ,word   REM             ;;$071e
01F3 : 1F 0C                    ,word   STOP            ;;$0c1f
01F5 : 80 07                    ,word   ON              ;;$0780
01F7 : B5 07                    ,word   LPRINT          ;;$07b5
01F9 : 15 1B                    ,word   COPY            ;;$1b15
01FB : 3B 0B                    ,word   DEF             ;;$0b3b
01FD : 6D 0B                    ,word   POKE            ;;$0b6d
01FF : BC 07                    ,word   PRINT           ;;$07bc
0201 : 4B 0C                    ,word   CONT            ;;$0c4b
0203 : 6C 05                    ,word   LIST            ;;$056c
0205 : 67 05                    ,word   LLIST           ;;$0567
0207 : CD 0C                    ,word   CLEAR           ;;$0ccd
0209 : 2c 1C                    .word   CLOAD           ;;$1c2c
020B : 08 1C                    .word   CSAVE           ;;$1c08
020D : 4F 1A                    .word   PSET            ;;$1a4f
020F : 4C 1A                    .word   PRESET          ;;$1a4c
0211 : D6 1A                    .word   SOUND           ;;$1ad6
0213 : BD 0B                    .word   NEW             ;;$0bbd
0215 : F5 14                    .word   SGN             ;;$14f5
0217 : B1 15                    .word   INT             ;;$15b1
0219 : 09 15                    .word   ABS             ;;$1509
021B : 03 38    .                word   USR             ;;$3803
021D : A8 10                    .word   FRE             ;;$10a8
022F : 2E 0B                    .word   LPOS            ;;$0b2e
0221 : 33 0B                    .word   POS             ;;$0b33
0223 : 75 17                    .word   SQR             ;;$1775
0225 : 66 18                    .word   RND             ;;$1866
0227 : 85 13                    .word   LOG             ;;$1385
0229 : CD 17                    .word   EXP             ;;$17cd
022B : D7 18                    .word   COS             ;;$18d7
022D : DD 18                    .word   SIN             ;;$18dd
022F : 70 19                    .word   TAN             ;;$1970
0231 : 85 19                    .word   ATN             ;;$1985
0233 : 63 0B                    .word   PEEK            ;;$0b63
0235 : F3 0F                    .word   LEN             ;;$0ff3
0237 : 29 0E                    .word   STR$            ;;$0e29
0239 : 84 10                    .word   VAL             ;;$1084
023B : 02 10                    .word   ASC             ;;$1002
023D : 13 10                    .word   CHR$            ;;$1013
023F : 21 10                    .word   LEFT$           ;;$1021
0241 : 50 10                    .word   RIGHT$          ;;$1050
0243 : 59 10                    .word   MID$            ;;$1059

;;The first (or only) character of each keyword has bit 7 set.
;;In Altair and 6502 Basic, bit 7 was set in the last character

;;***   To Do: Need TK=TK+1 before every token
                        ;
                        ;[M65] TOKENS FOR RESERVED WORDS ALWAYS HAVE THE MOST
                        ;[M65] SIGNIFICANT BIT ON.
                        ;

0245 :            [M65] RESLST: ;[M65] THE LIST OF RESERVED WORDS:
0245 :                  TK      .equ    $80             ;;Tokens start at $80
0245 :            [M65] ENDTK   .equ    TK
0245 : C5 4E 44                 .byte   'E'+$80,"ND"    ;;$80
0248 :                  TK      .set    TK+1
0248 :            [M65] FORTK   .equ    TK
0248 : C6 4F 52                 .byte   'F'+$80,"OR"    ;;$81
024B :                  TK      .set    TK+1
024B : CE 45 58 54              .byte   'N'+$80,"EXT"   ;;$82
024F :                  TK      .set    TK+1
024F :            [M65] DATATK  .equ    TK
024F : C4 41 54 41              .byte   'D'+$80,"ATA"   ;;$83
0253 :                  TK      .set    TK+1
0253 : C9 4E 50 55 54           .byte   'I'+$80,"NPUT"  ;;$84
0258 :                  TK      .set    TK+1
0258 : C4 49 4D                 .byte   'D'+$80,"IM"    ;;$85
025B :                  TK      .set    TK+1
025B : D2 45 41 44              .byte   'R'+$80,"EAD"   ;;$86
025F :                  TK      .set    TK+1
025F : CC 45 54                 .byte   'L'+$80,"ET"    ;;$87
0262 :                  TK      .set    TK+1
0262 :            [M65] GOTOTK  .equ    TK
0262 : C7 4F 54 4F              .byte   'G'+$80,"OTO"   ;;$88
0266 :                  TK      .set    TK+1
0266 : D2 55 4E                 .byte   'R'+$80,"UN"    ;;$89
0269 :                  TK      .set    TK+1
0269 : C9 46                    .byte   'I'+$80,"F"     ;;$8A
026B :                  TK      .set    TK+1
026B : D2 45 53 54              .byte   'R'+$80,"ESTORE";;$8B
026F : 4F 52 45
0272 :                  TK      .set    TK+1
0272 :            [M65] GOSUTK  .equ    TK
0272 : C7 4F 53 55 42           .byte   'G'+$80,"OSUB"  ;;$8C
0277 :                  TK      .set    TK+1
0277 : D2 45 54 55              .byte   'R'+$80,"ETURN" ;;$8D
027B : 52 4E
027D :                  TK      .set    TK+1
027D :            [M65] REMTK   .equ    TK
027D : D2 45 4D                 .byte   'R'+$80,"EM"    ;;$8E
0280 :                  TK      .set    TK+1
0280 : D3 54 4F 50              .byte   'S'+$80,"TOP"   ;;$8F
0282 :                  TK      .set    TK+1
0284 : CF 4E                    .byte   'O'+$80,"N"     ;;$90
0286 :                  TK      .set    TK+1
0286 : CC 50 52 49              .byte   'L'+$80,"PRINT" ;;$91
028A : 4E 54
028C :                  TK      .set    TK+1
028C : C3 4F 50 59              .byte   'C'+$80,"OPY"   ;;$92
0290 :                  TK      .set    TK+1
0290 : C4 45 46                 .byte   'D'+$80,"EF"    ;;$93
0293 :                  TK      .set    TK+1
0293 : D0 4F 4B 45              .byte   'P'+$80,"OKE"   ;;$94
0297 :                  TK      .set    TK+1
0297 :            [M65] PRINTK  .equ    TK
0297 : D0 52 49 4E 54           .byte   'P'+$80,"RINT"  ;;$95
029C :                  TK      .set    TK+1
029C : C3 4F 4E 54              .byte   'C'+$80,"ONT"   ;;$96
02A0 :                  TK      .set    TK+1
02A0 : CC 49 53 54              .byte   'L'+$80,"IST"   ;;$97
02A4 :                  TK      .set    TK+1
02A4 : CC 4C 49 53 54           .byte   'L'+$80,"LIST"  ;;$98
02A9 :                  TK      .set    TK+1
02A9 : C3 4C 45 41 52           .byte   'C'+$80,"LEAR"  ;;$99
02AE :                  TK      .set    TK+1
02AE : C3 4C 4F 41 44           .byte   'C'+$80,"LOAD"  ;;$9A
02B3 :                  TK      .set    TK+1
02B3 : C3 53 41 56 45           .byte   'C'+$80,"SAVE"  ;;$9B
02B8 :                  TK      .set    TK+1
02B8 : D0 53 45 54              .byte   'P'+$80,"SET"   ;;$9C
02BC :                  TK      .set    TK+1
02BC : D0 52 45 53              .byte   'P'+$80,"RESET" ;;$9D
02C0 : 45 54
02C2 :                  TK      .set    TK+1
02C2 : D3 4F 55 4E 44           .byte   'S'+$80,"OUND"  ;;$9E
02C7 :                  TK      .set    TK+1
02C7 :            [M65] SCRATK  .equ    TK
02C7 : CE 45 57                 .byte   'N'+$80,"EW"    ;;$9F
02CA :                  TK      .set    TK+1
02CA :                  ;[M65] END OF COMMAND LIST
02CA : D4 41 42 28              .byte   'T'+$80,"AB("   ;;$A0
02CE :                  TK      .set    TK+1
02CE : D4 4F                    .byte   'T'+$80,"O"     ;;$A1
02D0 :                  TK      .set    TK+1
02D0 : C6 4E                    .byte   'F'+$80,"N"     ;;$A2
02D2 :                  TK      .set    TK+1
02D2 : D3 50 43 28              .byte   'S'+$80,"PC("   ;;$A3
02D6 :                  TK      .set    TK+1
02D6 : C9 4E 4B 45 59 24        .byte   'I'+$80,"NKEY$" ;;$A4
02DC :                  TK      .set    TK+1
02CD :            [M65] THENTK  .equ    TK
02DC : D4 48 45 4E              .byte   'T'+$80,"HEN"   ;;$A5
02E0 :                  TK      .set    TK+1
02E0 : CE 4F 54                 .byte   'N'+$80,"OT"    ;;$A6
02E3 :                  TK      .set    TK+1
02E3 :            [M65] STEPTK  .equ    TK
02E3 : D3 54 45 50              .byte   'S'+$80,"TEP"   ;;$A7
02E7 :                  TK      .set    TK+1

02E7 :            {M80} SPCTAB:
02E7 :            [M80] PLUSTK  .equ    TK
02E7 : AB                       .byte   '+'+$80         ;;$A8 plus
02E8 :                  TK      .set    TK+1
02E8 :            [M80] MINUTK  .equ    TK
02E8 : AD                       .byte   '-'+$80         ;;$A9 minus
02E9 :                  TK      .set    TK+1
02E9 :            [M80] MULTK   .equ    TK
02E9 : AA                       .byte   '*'+$80         ;;$AA times
02EA :                  TK      .set    TK+1
02EA :            [M80] DIVTK   .equ    TK
02EA : AF                       .byte   '/'+$80         ;;$AB divide
02EB :                  TK      .set    TK+1
02EB :            [M80] EXPTK   .equ    TK
02EB : DE                       .byte   '^'+$80         ;;$AC
02EC :                  TK      .set    TK+1
02EC : C1 4E 44                 .byte   'A'+$80,"ND"    ;;$AD
02EF :                  TK      .set    TK+1
02EF : CF 52                    .byte   'O'+$80,"R"     ;;$AE
02F1 :                  TK      .set    TK+1
02F1 :            [M80] GREATK  .equ    TK
02F1 :                          .byte   '>'+$80         ;;$AF greater than
02F2 :                  TK      .set    TK+1
02F2 :            [M80] EQUATK  .equ    TK
02F2 : BD                       .byte   '='+$80         ;;$B0 equals
02F3 :                  TK      .set    TK+1
02F3 :            [M80] LESSTK  .equ    TK
02F3 : BC                       .byte   '<'+$80         ;;$B1 less than
02F4 :                  TK      .set    TK+1
02F4 :                  ;
02F4 :                  ; [M65] NOTE DANGER OF ONE RESERVED WORD BEING A PART
02F4 :                  ; [M65] OF ANOTHER:
02F4 :                  ; [M65] IE . . IF 2 GREATER THAN F OR T=5 THEN...
02F4 :                  ; [M65] WILL NOT WORK!!! SINCE "FOR" WILL BE CRUNCHED!!
02F4 :                  ; [M65] IN ANY CASE MAKE SURE THE SMALLER WORD APPEARS
02F4 :                  ; [M65] SECOND IN THE RESERVED WORD TABLE ("INP" AND "INPUT")
02F4 :                  ; [M65] ANOTHER EXAMPLE: IF T OR Q THEN ... "TO" IS CRUNCHED
02F4 :                  ;
02F4 : D3 47 4E                 .byte   'S'+$80,"GN"    ;;$B2
02F7 : C9 4E 54                 .byte   'I'+$80,"NT"    ;;$B3
02FA : C1 42 53                 .byte   'A'+$80,"BS"    ;;$B4
02FD : D5 53 52                 .byte   'U'+$80,"SR"    ;;$B5
0300 : C6 52 45                 .byte   'F'+$80,"RE"    ;;$B6
0303 : CC 50 4F 53              .byte   'L'+$80,"POS"   ;;$B7
0307 : D0 4F 53                 .byte   'P'+$80,"OS"    ;;$B8
030A : D3 51 52                 .byte   'S'+$80,"QR"    ;;$B9
030D : D2 4E 44                 .byte   'R'+$80,"ND"    ;;$BA
0310 : CC 4F 47                 .byte   'L'+$80,"OG"    ;;$BB
0313 : C5 58 50                 .byte   'E'+$80,"XP"    ;;$BC
0316 : C3 4F 53                 .byte   'C'+$80,"OS"    ;;$BD
0319 : D3 49 4E                 .byte   'S'+$80,"IN"    ;;$BE
031C : D4 41 4E                 .byte   'T'+$80,"AN"    ;;$BF
031F : C1 54 4E                 .byte   'A'+$80,"TN"    ;;$C0
0322 : D0 45 45 4B              .byte   'P'+$80,"EEK"   ;;$C1
0326 : CC 45 4E                 .byte   'L'+$80,"EN"    ;;$C2
0329 : D3 54 52 24              .byte   'S'+$80,"TR$"   ;;$C3
032D : D6 41 4C                 .byte   'V'+$80,"AL"    ;;$C4
0330 : C1 53 43                 .byte   'A'+$80,"CC"    ;;$C5
0333 : C3 48 52 24              .byte   'C'+$80,"HR$"   ;;$C6
0337 : CC 45 46 54 24           .byte   'L'+$80,"EFT$"  ;;$C7
033C : D2 49 47 48 54 24        .byte   'R'+$80,"IGHT$" ;;$C8
0342 : CD 49 44 24              .byte   'M'+$80,"ID$"   ;;$C9
0346 : D0 4F 49 4E 54           .byte   'P'+$80,"OINT"  ;;$CA

;;The token crunching routine stops here, but the token expansion routine does not
;;so any 'tokens' above $CA will produce strange results when LISTed
034B : 80                       .byte   $80             ;;End of List Marker

034C                    ;OPERATOR TABLE CONTAINS PRECEDENCE FOLLOWED BY THE ROUTINE ADDRESS
034C : 79 5C 16   [M80] OPTAB:  .byte   121,FADDT       ;ADD
034F : 79 5C 12                 .byte   121,FSUBT       ;SUBTRACT
0352 : 7C C9 13                 .byte   124,FMULTT      ;MULTIPLY
0355 : 7C 2D 14                 .byte   124,FDIVT       ;DIVIDE
0358 : 7F 7E 17                 .byte   127,FPWRT       ;POWER
035B : 50 A9 0A                 .byte    80,ANDOP       ;AND
035E : 46 A8 0A                 .byte    70.OROP        ;OR

0361 : 20 45 72 72[M65] ERR:    .byte " Error",CHRBEL,0
0365 : 6F 72 07 00

0369
0369 : 20 69 6E 20[M65] INTXT:  .byte   " in ",0
036C : 00

036E
036E : 4F 6B 0D 0A[M80] REDDY:  .byte   "Ok",CHRRET,CHRLNF,0
0372 : 00


0373 : 42 72 65 61[M80] BRKTXT: .byte   "Break",0
0377 : 6B 00


                  [M80] ERRTAB:  ;;List OF Error Messages
                  [M80] ERRNF   .equ    *-ERRTAB        ;;$00
0379 : 4E 46                    .byte   "NF"            ;[M80] NEXT without FOR
                  [M80] ERRSN   .equ    *-ERRTAB        ;;$02
037B : 53 4E                    .byte   "SN"            ;[M80] Syntax error
                  [M80] ERRRG   .equ    *-ERRTAB        ;;$04
037D : 52 47                    .byte   "RG"            ;[M80] RETURN without GOSUB
                  [M80] ERROD   .equ    *-ERRTAB        ;;$06
037F : 4F 44                    .byte   "OD"            ;[M80] Out of DATA
                  [M80] ERRFC   .equ    *-ERRTAB        ;;$08
0381 : 46 43                    .byte   "FC"            ;[M80] Illegal function call
                  [M80] ERROV   .equ    *-ERRTAB        ;;$0A
0383 : 4F 56                    .byte   "OV"            ;[M80] Overflow
                  [M80] ERROM   .equ    *-ERRTAB        ;;$0C
0385 : 4F 4D                    .byte   "OM"            ;[M80] Out of memory
                  [M80] ERRUS   .equ    *-ERRTAB        ;;$0E
0387 : 55 4C                    .byte   "UL"            ;[M80] Undefined line number
                  [M80] ERRBS   .equ    *-ERRTAB        ;;$10
0389 : 42 53                    .byte   "BS"            ;[M80] Subscript out of range
                  [M80] ERRDDS  .equ    *-ERRTAB        ;;$12
038B : 44 44                    .byte   "DD"            ;[M80] Duplicate Definition
                  [M80] ERRDV0  .equ    *-ERRTAB        ;;$14
038D : 2F 30                    .byte   "/0             ;[M80] Division by zero
                  [M80] ERRID   .equ    *-ERRTAB        ;;$16
038F : 49 44                    .byte   "ID"            ;[M80] Illegal direct
                  [M80] ERRTM   .equ    *-ERRTAB        ;;$18
0391 : 54 4D                    .byte   "TM"            ;[M80] Type mismatch
                  [M80] ERRSO   .equ    *-ERRTAB        ;;$1A
0393 : 4F 53                    .byte   "OS"            ;[M80] Out of string space
                  [M80] ERRLS   .equ    *-ERRTAB        ;;$1C
0395 : 4C 53                    .byte   "LS"            ;[M80] String too long
                  [M80] ERRST   .equ    *-ERRTAB        ;;$1E
0397 : 53 54                    .byte   "ST"            ;[M80] String formula too complex
                  [M80] ERRCN   .equ    *-ERRTAB        ;;$20
0399 : 43 4E                    .byte   "CN"            ;[M80] Can't continue
                  [M80] ERRUF   .equ    *-ERRTAB        ;;$22
039B : 55 46                    .byte   "UF"            ;[M80] Undefined user function
                  [M80] ERRMO   .equ    *-ERRTAB        ;;$24
039D : 4D 4F                    .byte   "MO"            ;[M80] Missing operand

                        ;
                        ;[M80] FIND A "FOR" ENTRY ON THE STACK WITH THE VARIABLE POINTER
                        ;[M80] PASSED IN [D,E].
                        ;
                  [M80] FORSIZ  .equ    13              ;;Size of a FOR entry on the stack

039F : 21 04 00   [M80] FNDFOR: ld      hl,4+0          ;[M80] IGNORING THE RETURN ADDRESS OF
03A2 : 39                       add     hl,sp           ;[M80] THIS SUBROUTINE, SET [H,L]=SP
03A3 : 7E         [M80] LOOPER: ld      a,(hl)          ;[M80] SEE WHAT TYPE OF THING IS ON THE STACK
03A4 : 23                       inc     hl
03A5 : FE 81                    cp      FORTK           ;[M80] IS THIS STACK ENTRY A "FOR"?
03A7 : C0                       ret     nz              ;[M80] NO SO OK
03A8 : 4E                       ld      c,(hl)          ;[M80] DO EQUIVALENT OF PUSHM / XTHL
03A9 : 23                       inc     hl
03AA : 46                       ld      b,(hl)
03AB : 23                       inc     hl
03AC : E5                       push    hl              ;[M80] PUT H  ON
03AD : 60                       ld      h,b             ;[M80] PUSH B / XTHL IS SLOWER
03AE : 69                       ld      l,c
03AF : 7A                       ld      a,d             ;[M80] FOR THE "NEXT" STATMENT WITHOUT AN ARGUMENT
03B0 : B3                       or      e               ;[M80] WE MATCH ON ANYTHING
03B1 : EB                       ex      de,hl           ;[M80] MAKE SURE WE RETURN [D,E]
03B2 : 28 02                    jr      z,POPGOF        ;[M80] POINTING TO THE VARIABLE
03B4 : EB                       ex      de,hl
03B5 : E7                       rst     COMPAR

03B6 : 01 0D 00         POPGOF: ld      bc,0000DH
03B9 : E1                       pop     hl
03BA : C8                       ret     z
03BB : 09                       add     hl,bc
03BC : 18 E5                    jr      LOOPER

03BE : 2A C9 38   [M80] DATSNE: ld      hl,(DATLIN)     ;[M80] GET DATA LINE
03C1 : 22 4D 38                 ld      (CURLIN),hl     ;[M80] MAKE IT CURRENT LINE

03C4 : 1E 02      [M80] SNERR:  ld      e,ERRSN         ;[M80] "SYNTAX ERROR"
03C6 : 01                       .byte   001H            ;[M80] "LD BC," OVER THE NEXT 2
03C7 : 1E 14      [M80] DV0ERR: ld      e,ERRDV0        ;[M80] DIVISION BY ZERO
03C9 : 01                       .byte   001H            ;[M80] "LD BC," OVER THE NEXT 2
03CA : 1E 00      [M80] NFERR:  ld      e,ERRNF         ;[M80] "NEXT WITHOUT FOR" ERROR
03CC : 01                       .byte   001H            ;[M80] "LD BC," OVER THE NEXT 2
03CD : 1E 12      [M80] DDERR:  ld      e,ERRDDS        ;[M80] "REDIMENSIONED VARIABLE"
03CF : 01                       .byte   001H            ;[M80] "LD BC," OVER THE NEXT 2
03D0 : 1E 22      [M80] UFERR:  ld      e,ERRUF         ;[M80] "UNDEFINED FUNCTION" ERROR
03D2 : 01                       .byte   001H            ;[M80] "LD BC," OVER THE NEXT 2
03D2 : 1E 0A      [M80] OVERR:  ld      e,ERROV         ;;      Overflow Error
03D5 : 01                       .byte   001H            ;[M80] "LD BC," OVER THE NEXT 2
03D6 : 1E 24      [M80] MOERR:  ld      e,ERRMO         ;;     Missing Operand
03D8 : 01                       .byte   001H            ;[M80] "LD BC," OVER THE NEXT 2
03D9 : 1E 18      [M80] TMERR:  ld      e,ERRTM         ;[M80] TYPE MISMATCH ERROR

03DB : CD E5 0B   [M80] ERROR:  call    STKINI
03DE : F7                       rst     HOOKDO          ;;call Hook Service Routine
03DF : 00                       .byte   0
03E0 : CD DE 19                 call    CRDONZ
03E3 : 21 79 03                 ld      hl,ERRTAB
03E6 : F7                       rst     HOOKDO          ;;call Hook Service Routine
03E7 : 01                       .byte   1
03E8 : 57                       ld      d,a             ;;Add Error Offset
03E9 : 19                       add     hl,de
03EA : 3E 3F      [M80] ERRFIN  ld      a,'?'           ;[M65] PRINT A QUESTION MARK
03EC : DF                       rst     CHROUT
03ED : 7E                       ld      a,(hl)          ;[M65] GET FIRST CHR OF ERR MSG.
03EE : DF                       rst     CHROUT          ;[M65] OUTPUT IT.
03EF : D7                       rst     CHRGET          ;[M65] GET SECOND CHR.
03F0 : DF                       rst     CHROUT          ;[M65] OUTPUT IT.
03F1 : 21 61 03                 ld      hl,ERR          ;;" Error"
03F4 : CD 9D 0E   [M80] ERRFN1: call    STROUT          ;[M80] PRINT MESSAGE
03F7 : 2A 4D 38                 ld      hl,(CURLIN)     ;[M80] RESTORE LINE NUMBER
03FA : 7C                       ld      a,h             ;[M80] SEE IF IN DIRECT MODE
03FB : A5                       and     l
03FC : 3C                       inc     a               ;[M80] ZERO SAYS DIRECT MODE
03FD : C4 6D 16                 call    nz,INPRT        ;[M80] PRINT LINE NUMBER IN [H,L]
0400 : 3E C1                    ld      a,0C1H
0402
0402 : F7         [M80] READY:  rst     HOOKDO          ;;Call hook routine
0403 : 02                       .byte 0
0404 : CD BE 19                 call    FINLPT
0407 : AF                       xor     a
0408 : 32 08 38                 ld      (CNTOFL),a
040B : CD DE 19                 call    CRDONZ
040E : 21 6E 03                 ld      hl,REDDY
0411 : CD 9D 0E                 call    STROUT

0414 : 21 FF FF   [M80] MAIN:   ld      hl,$FFFF
0417 : 22 4D 38                 ld      (CURLIN),hl     ;[M80] SETUP CURLIN FOR DIRECT MODE
;;GW-BASIC and CP/M Basic have Automatic Line Numbering Logic here
041A : CD 85 0D   [M80] NTAUTO: call    INLIN           ;[M80] GET A LINE FROM TTY
041D : 38 F5                    jr      c,MAIN          ;[M80] IGNORE ^C S
041F : D7                       rst     CHRGET          ;[M80] GET THE FIRST
0420 : 3C                       inc     a               ;[M80] SEE IF 0 SAVING THE CARRY FLAG
0421 : 3D                       dec     a
0422 : 28 F0                    jr      z,MAIN          ;[M80] IF SO, A BLANK LINE WAS INPUT
0424 : F5                       push    af              ;[M80] SAVE STATUS INDICATOR FOR 1ST CHARACTER
0425 : CD 9C 06   [M65] MAIN:   call    SCNLIN          ;[M80] READ IN A LINE #
;;GW-BASIC snd CP/M Basic have extra logic here
0428 : D5         [M80] EDENT:  push    de              ;[M80] SAVE LINE #
0429 : CD BC 04                 call    CRUNCH          ;[M80] CRUNCH THE LINE DOWN
042C : 47                       ld      b,a             ;[M65] RETAIN CHARACTER COUNT.
042D : D1                       pop     de              ;[M80] RESTORE LINE #
042E : F1                       pop     af              ;[M80] WAS THERE A LINE #?
042F : F7                       rst     HOOKDO          ;;Call Hook Dispatch Routine
0430 : 03                       .byte   3
0431 : D2 4B 06                 jp      nc,GONE
0434 : D5                       push    de
0435 : C5                       push    bc              ;[M80] SAVE LINE # AND CHARACTER COUNT
0436 : AF                       xor     a
0437 : 32 CC 38                 ld      (X38CC),a
043A : D7                       rst     CHRGET
043B : B7                       or      a
043C : F5                       push    af
043D : CD 9F 04                 call    FNDLIN
0440 : 38 06                    jr      c,LEXIST        ;[M80] LINE EXISTS, DELETE IT
0442 : F1                       pop     af              ;[M80] GET FLAG SAYS WHETHER LINE BLANK
0443 : F5                       push    af              ;[M80] SAVE BACK
0444 : CA F3 06                 jp      z,USERR         ;[M80] SAVE BACK
0447 : B7                       or      a               ;[M80] TRYING TO DELETE NON-EXISTANT LINE, ERROR
0448 : C5         [M80] LEXIST: push    bc              ;[M80] SAVE THE POINTER
0449 : 30 10                    jr      nc,NODEL
;;DEL is a separate routine in CP/M Basic
044B : EB         [M80] DEL:    ex      de,hl           ;[M80] [D,E] NOW HAVE THE POINTER TO NEXT LINE
044C : 2A D6 38                 ld      hl,(VARTAB)     ;[M80] COMPACTIFYING TO VARTAB
;;This could have been replaced with an LDIR
044F : 1A         [M80] MLOOP:  ld      a,(de)
0450 : 02                       ld      (bc),a          ;[M80] SHOVING DOWN TO ELIMINATE A LINE
0451 : 03                       inc     bc
0452 : 13                       inc     de
0453 : E7                       rst     COMPAR
0454 : 20 F9                    jr      nz,MLOOP        ;[M80] DONE COMPACTIFYING?
0456 : 60                       ld      h,b
0457 : 69                       ld      l,c             ;;HL = new end of program
0458 : 22 D6 38                 ld      (VARTAB),hl     ;[M65] SETUP [VARTAB]
045B : D1         [M80] NODEL:  pop     de              ;[M80] POP POINTER AT PLACE TO INSERT
045C : F1                       pop     af              ;[M80] SEE IF THIS LINE HAD ANYTHING ON IT
045D : 28 21                    jr      z,FINI          ;[M80] IF NOT DON'T INSERT
045F : 2A D6 38   [M80] LEVFRE: ld      hl,(VARTAB)     ;[M80] CURRENT END
0462 : E3                       ex      (sp),hl         ;[M80] [H,L]=CHARACTER COUNT. VARTAB ONTO STACK
0463 : C1                       pop     bc              ;[M80] [B,C]=OLD VARTAB
0464 : 09                       add     hl,bc
0465 : E5                       push    hl              ;[M80] SAVE NEW VARTAB
0466 : CD 92 0B                 call    BLTU            ;;Create space for new line
0469 : E1                       pop     hl              ;[M80] POP OFF VARTAB
046A : 22 D6 38                 ld      (VARTAB),hl     ;[M80] UPDATE VARTAB
046D : EB                       ex      de,hl
046E : 74                       ld      (hl),h          ;[M80] FOOL CHEAD WITH NON-ZERO LINK
046F : D1                       pop     de              ;[M80] GET LINE # OFF STACK
0470 : 23                       inc     hl              ;[M80] SO IT DOESN'T THINK THIS LINK
0471 : 23                       inc     hl              ;[M80] IS THE END OF THE PROGRAM
0472 : 73                       ld      (hl),e
0473 : 23                       inc     hl              ;[M80] PUT DOWN LINE #
0474 : 72                       ld      (hl),d
0475 : 23                       inc     hl
0476 : 11 60 38                 ld      de,BUF         ;[M80] MOVE LINE FRM BUF TO PROGRAM AREA
0479 : 1A         [M80] MLOOPR: ld      a,(de)          ;[M80] NOW TRANSFERING LINE IN FROM BUF
047A : 77                       ld      (hl),a
047B : 23                       inc     hl
047C : 13                       inc     de
047D : B7                       or      a               ;;If not line terminator, keep going
047E : 20 F9                    jr      nz,MLOOPR
0480
0480 : F7         [M80] FINI:   rst     HOOKDO
0481 : 04                       .byte   4
0482 : CD CB 0B                 call    RUNC            ;;HL=TTXTAB-1 and execute L0CD8
0485 : F7                       rst     HOOKDO
0486 : 05                       .byte   5
0487 : 23                       inc     hl              ;;HL=TXTTAB
0488 : EB         [M65] LNKPRG: ex      de,hl           ;;DE=TXTTAB
                        ;[M80]
                        ;[M80] CHEAD GOES THROUGH PROGRAM STORAGE AND FIXES
                        ;[M80] UP ALL THE LINKS. THE END OF EACH
                        ;[M80] LINE IS FOUND BY SEARCHING FOR THE ZERO AT THE END.
                        ;[M80] THE DOUBLE ZERO LINK IS USED TO DETECT THE END OF THE PROGRAM
                        ;[M80]
0489 : 62         [M80] CHEAD:  ld      h,d             ;[H,L]=[D,E]
048A : 6B                       ld      l,e
048B : 7E                       ld      a,(hl)          ;[M80] SEE IF END OF CHAIN
048C : 23                       inc     hl              ;[M80] BUMP POINTER
048D : B6                       or      (hl)            ;[M80] 2ND BYTE
048E : CA 14 04                 jp      z,MAIN
0491 : 23                       inc     hl              ;[M80] FIX HL TO START OF TEXT
0492 : 23                       inc     hl
0493 : 23                       inc     hl
0494 : AF                       xor     a               ;SET CC'S
0495 : BE        [M80] CZLOOP:  cp      (hl)            ;;Skip to end of Basic line
0496 : 23                       inc     hl
0497 : 20 FC                    jr      nz,CZLOOP
0499 : EB                       ex      de,hl           ;SWITCH TEMP
049A : 73                       ld      (hl),e          ;DO FIRST BYTE OF FIXUP
049B : 23                       inc     hl              ;ADVANCE POINTER
049C : 72                       ld      (hl),d          ;2ND BYTE OF FIXUP
049D : 18 EA                    jr      CHEAD           ;KEEP CHAINING TIL DONE

                        ;
                        ;[m80] FNDLIN SEARCHES THE PROGRAM TEXT FOR THE LINE
                        ;[m80] WHOSE LINE # IS PASSED IN [D,E]. [D,E] IS PRESERVED.
                        ;[m80] THERE ARE THREE POSSIBLE RETURNS:
                        ;[m80]
                        ;[m80]	1) ZERO FLAG SET. CARRY NOT SET.  LINE NOT FOUND.
                        ;[m80]	   NO LINE IN PROGRAM GREATER THAN ONE SOUGHT.
                        ;[m80]	   [B,C] POINTS TO TWO ZERO BYTES AT END OF PROGRAM.
                        ;[m80]	   [H,L]=[B,C]
                        ;[m80]
                        ;[m80]	2) ZERO, CARRY SET.
                        ;[m80]	   [B,C] POINTS TO THE LINK FIELD IN THE LINE
                        ;[m80]	   WHICH IS THE LINE SEARCHED FOR.
                        ;[m80]	   [H,L] POINTS TO THE LINK FIELD IN THE NEXT LINE.
                        ;[m80]
                        ;[m80]	3) NON-ZERO, CARRY NOT SET.
                        ;[m80]	   LINE NOT FOUND, [B,C]  POINTS TO LINE IN PROGRAM
                        ;[m80]	   GREATER THAN ONE SEARCHED FOR.
                        ;[m80]	   [H,L] POINTS TO THE LINK FIELD IN THE NEXT LINE.
                        ;
049F : 2A 4F 38         FNDLIN: ld      hl,(TXTTAB)     ;[M80] GET POINTER TO START OF TEXT
04A2 : 44               LOOP:   ld      b,h             ;[M80] IF EXITING BECAUSE OF END OF PROGRAM,
04A3 : 4D                       ld      c,l             ;[M80] SET [B,C] TO POINT TO DOUBLE ZEROES.
04A4 : 7E                       ld      a,(hl)          ;[M80] GET WORD POINTER TO
04A5 : 23                       inc     hl              ;[M80] BUMP POINTER
04A6 : B6                       or      (hl)            ;[M80] GET 2ND BYTE
04A7 : 2B                       dec     hl              ;[M80] GO BACK
04A8 : C8                       ret     z               ;[M80] IF ZERO THEN DONE
04A9 : 23                       inc     hl              ;[M80] SKIP PAST AND GET THE LINE #
04AA : 23                       inc     hl
04AB : 7E                       ld      a,(hl)          ;[M80] INTO [H,L] FOR COMPARISON WITH
04AC : 23                       inc     hl              ;[M80] THE LINE # BEING SEARCHED FOR
04AD : 66                       ld      h,(hl)          ;[M80] WHICH IS IN [D,E]
04AE : 6F                       ld      l,a
04AF : E7                       rst     COMPAR          ;[M80] SEE IF IT MATCHES OR IF WE'VE GONE TOO FAR
04B0 : 60                       ld      h,b             ;[M80] MAKE [H,L] POINT TO THE START OF THE
04B1 : 69                       ld      l,c             ;[M80] LINE BEYOND THIS ONE, BY PICKING
04B2 : 7E                       ld      a,(hl)          ;[M80] UP THE LINK THAT [B,C] POINTS AT
04B3 : 23                       inc     hl
04B4 : 66                       ld      h,(hl)
04B5 : 6F                       ld      l,a
04B6 : 3F                       ccf                     ;[M80] TURN CARRY OFF
04B7 : C8                       ret     z               ;[M80] EQUAL RETURN
04B8 : 3F                       ccf                     ;[M80] MAKE CARRY ZERO
04B9 : D0                       ret     nc              ;[M80] NO MATCH RETURN (GREATER)
04BA : 18 E6                    jr      LOOP            ;[M80] KEEP LOOPING
                        ;
                        ;[M80] ALL "RESERVED" WORDS ARE TRANSLATED INTO SINGLE
                        ;[M80] ONE OR TWO (IF TWO, FIRST IS ALWAYS 377 OCTAL)
                        ;[M80] BYTES WITH THE MSB ON. THIS SAVES SPACE AND TIME
                        ;[M80] BY ALLOWING FOR TABLE DISPATCH DURING EXECUTION.
                        ;[M80] THEREFORE ALL STATEMENTS APPEAR TOGETHER IN THE
                        ;[M80] RESERVED WORD LIST IN THE SAME
                        ;[M80] ORDER THEY APPEAR IN IN STMDSP.
                        ;
04BC : AF         [M80] CRUNCH: xor     a               ;SAY EXPECTING FLOATING NUMBERS
04BD : 32 AC 38                 ld      (DORES),a       ;ALLOW CRUNCHING
04C0 : 0E 05                    ld      c,5             ;LENGTH OF KRUNCH BUFFER
04C2 : 11 60 38                 ld      de,BUF         ;SETUP DESTINATION POINTER
04C5 : 7E         [M80] KLOOP:  ld      a,(hl)          ;GET CHARACTER FROM BUF
04C6 : FE 20                    cp      ' '             ;SPACE?
04C8 : CA 3C 05                 jp      z,STUFFH        ;JUST STUFF AWAY
04CB : 47                       ld      b,a             ;SETUP B WITH A QUOTE IF IT IS A STRING
04CC : FE 22                    cp      '"'             ;QUOTE SIGN?
04CE : CA 58 05                 jp      z,STRNG         ;YES, GO TO SPECIAL STRING HANDLING
04D1 : B7                       or      a               ;END OF LINE?
04D2 : CA 5E 05                 jp      z,CRDONE        ;YES, DONE CRUNCHING
04D5 : 3A AC 38                 ld      a,(DORES)       ;IN DATA STATEMENT AND NO CRUNCH?
04D8 : B7                       or      a
04D9 : 7E                       ld      a,(hl)          ;GET THE CHARACTER AGAIN
04DA : C2 3C 05                 jp      nz,STUFFH       ;IF NO CRUNCHING JUST STORE THE CHARACTER
04DD : FE 3F                    cp      '?'             ;A QMARK?
04DF : 3E 95                    ld      a,PRINTK
04E1 : CA 3C 05                 jp      z,STUFFH        ;THEN USE A "PRINT" TOKEN
04E4 : 7E                       ld      a,(hl)
04E5 : FE 30                    cp      ' '             ;[M65] SKIP NUMERICS.
04E7 : 38 05                    jr      c,MUSTCR
04E9 : FE 3C                    cp      '<'             ;[M65] ":" AND ";" ARE ENTERED STRAIGHTAWAY.
04EB : DA 3C 05                 jp      c,STUFFH
04EE : D5         [M65] MUSTCR: push    de              ;[M65] SAVE BUFFER POINTER.
04EF : 11 44 02                 ld      de,RESLST       ;[M65] LOAD RESLST POINTER.
04F2 : C5                       push    bc              ;[M65] SAVE TEXT POINTER FOR LATER USE.
04F3 : 01 36 05                 ld      bc,NOTGOS       ;[M80] PLACE TO RETURN IF NOT FUNNY GO
04F6 : C5                       push    bc
04F7 : 06 7F                    ld      b,$7F
04F9 : 7E         [M80] MAKUPL: ld      a,(hl)          ;[M80] GET CHAR FROM MEMORY
04FA : FE 61            MAKUPS: cp      'a'             ;[M80] IS IT LOWER CASE RANGE
04FC : 38 07                    jr      c,RESCON        ;[M80] LESS
04FE : FE 7B                    cp      '{'             ;[M80] GREATER
0500 : 30 03                    jr      nc,RESCON       ;[M80] TEST
0502 : E6 5F                    and     $5F             ;[M80] MAKE UPPER CASE
0504 : 77                       ld      (hl),a          ;;and put it back

;;; *** The following code differs completely from any of the official source code
;;; *** I'll need to compare to unofficial 8080/Z80 disassemblies, particularly
;;; *** Altair and TRS-80, and possibly 6800 and/or 6809

0505 : 4E         [N65] RESCON: ld      c,(hl)          ;[M80 SAVE CHAR IN [C]
                        ;;Find next Reserved Word that starts with this character
0506 : EB                       ex      de,hl           ;;HL=RESLST Pointer, DE=Text Pointer
0507 : 23         [M80] LOPPSI: inc     hl              ;[M80] BUMP RESLST POINTER
0508 : B6                       or      (hl)            ;[M80] SET CC'S
0509 : F2 07 05                 jp      p,LOPPSI        ;[M80] SEE IF REST OF CHARS MATCH
050C : 04                       inc     b
050D : 7E                       ld      a,(hl)          ;[M80] GET BYTE FROM RESERVED WORD LIST
050E : E6 7F                    and     $7F             ;[M80] GET RID OF HIGH BIT
0510 : C8                       ret     z               ;[M80] IF=0 THEN END OF THIS CHARS RESLT
0511 : B9                       cp      c               ;[M80] COMPARE TO CHAR FROM SOURCE LINE
0512 : 20 F3                    jr      nz,LOPPSI       ;[M80] IF NO MATCH, SEARCH FOR NEXT RESWRD
0514 : EB                       ex      de,hl           ;;DE=RESLST Pointer, HL=Text Pointer
0515 : E5                       push    hl              ;;Save Text Pointer
0516                    L0516:
0516 : 13                       inc     de
0517 : 1A                       ld      a,(de)
0518 : B7                       or      a
0519 : FA 32 05                 jp      m,L0532
051C : 4F                       ld      c,a
051D : 78                       ld      a,b
051E : FE 88                    cp      GOTOTK
0520 : 20 02                    jr      nz,L0524
0522 : D7                       rst     CHRGET
0523 : 2B                       dec     hl
0524                    L0524:
0524 : 23                       inc     hl
0525 : 7E                       ld      a,(hl)
0526 : FE 61                    cp      061H
0528 : 38 02                    jr      c,L052C
052A : E6 5F                    and     05FH
052C                    L052C:
052C : B9                       cp      c
052D : 28 E7                    jr      z,L0516
052F : E1                       pop     hl
0530 : 18 D3                    jr      RESCON
                                ;
0532                    L0532:
0532 : 48                       ld      c,b
0533 : F1                       pop     af
0534 : EB                       ex      de,hl
0535 : C9                       ret
                        ;
0536 : F7         [M80] NOTGOS: rst     HOOKDO
0537 : 0A                       ld      a,(bc)
0538 : EB                       ex      de,hl
0539 : 79                       ld      a,c
053A : C1                       pop     bc
053B : D1                       pop     de

                        ;;Copy character to crunch buffer
053C : 23         [M80] STUFFH: inc     hl              ;[M80] ENTRY TO BUMP [H,L]
053D : 12         [M80] KRNSAV: ld      (de),a          ;[M80] SAVE BYTE IN KRUNCH BUFFER
053E : 13                       inc     de              ;[M80] BUMP POINTER
053F : 0C                       inc     c               ;;Increment buffer count
0540 : D6 3A                    sub     ':'             ;[M65] IS IT A ":"?`
0542 : 28 04                    jr      z,COLIS         ;[M65] YES, ALLOW CRUNCHING AGAIN.
0544 : FE 49                    cp      DATATK-':'      ;[M65] IS IT A DATATK?
0546 : 20 03                    jr      nz,NODATT       ;[M65] NO, SEE IF IT IS REM TOKEN.
0548 : 32 AC 38   [M65] COLIS:  ld      (DORES),a       ;SETUP FLAG.
054B : D6 54      [M65] NODATT: sub     REMTK-":"       ;REM ONLY STOPS ON NULL.
054D : C2 C5 04                 jp      nz,KLOOP        ;NO, CONTINUE CRUNCHING.

0550 : 47                       ld      b,a
0551
0551 : 7E         [M80] STR1:   ld      a,(hl)          ;[M80] GET A CHAR
0552 : B7                       or      a               ;[M80] SET CONDITION CODES
0553 : 28 09                    jr      z,CRDONE        ;[M80] IF END OF LINE THEN DONE
0555 : B8                       cp      b               ;[M80] COMPARE CHAR WITH THIS TERMINATOR
0556 : 28 E4                    jr      z,STUFFH        ;[M80] IF YES, DONE WITH STRING
0558 : 23         [m80] STRNG:	inc     hl              ;[M80] INCREMENT TEXT POINTER
0559 : 12                       ld      (de),a          ;[M80] SAVE CHAR IN KRUNCH BUFFER
055A : 0C                       inc     c               ;;Increment buffer count
055B : 13                       inc     de              ;[M65] INCREMENT BUFFER POINTER.
055C : 18 F3                    jr      STR1            ;[M80] KEEP LOOPING

055E                       CRDONE:
055E : 21 5F 38                    ld      hl,0385FH
0561 : 12                          ld      (de),a
0562 : 13                          inc     de
0563 : 12                          ld      (de),a
0564 : 13                          inc     de
0565 : 12                          ld      (de),a
0566 : C9                          ret

0567 : 3E 01      [M80] LLIST:  ld      a,1             ;[M80] PRTFLG=1 FOR REGULAR LIST
0569 : 32 47 38                 ld      (PRTFLG),a      ;[M80] SAVE IN I/O FLAG (END OF LPT)

056C : 3E 17      [M80] LIST:   ld      a,23
056E : 32 08 38                 ld      (CNTOFL),a
0571 : CD 9C 06                 call    SCNLIN          ;[M80] SCAN LINE RANGE
0574 : C0                       ret     nz
0575 : C1                       pop     bc
0576 : CD 9F 04                 call    FNDLIN          ;DONT EVEN LIST LINE #
0579 : C5                       push    bc
057A : E1         [M80] LIST4:  pop     hl
057B : 4E                       ld      c,(hl)
057C : 23                       inc     hl
057D : 46                       ld      b,(hl)
057E : 23                       inc     hl
057F : 78                       ld      a,b
0580 : B1                       or      c
0581 : CA 02 04                 jp      z,READY
0584 : CD 25 1A                 call    L1A25
0587 : C5                       push    bc
0588 : CD EA 19                 call    CRDO
058B : 5E                       ld      e,(hl)
058C : 23                       inc     hl
058D : 56                       ld      d,(hl)
058E : 23                       inc     hl
058F : E5                       push    hl
0590 : EB                       ex      de,hl
0591 : CD 75 16                 call    L1675
0594 : 3E 20                    ld      a,020H
0596 : E1                       pop     hl
0597                    L0597:
0597 : DF                       rst     CHROUT
0598                    L0598:
0598 : 7E                       ld      a,(hl)
0599 : 23                       inc     hl
059A : B7                       or      a
059B : 28 DD                    jr      z,LIST4
059D : F2 97 05                 jp      p,L0597
05A0 : F7                       rst     HOOKDO
05A1 : 16 D6                    ld      d,0D6H
05A3 : 7F                       ld      a,a
05A4 : 4F                       ld      c,a
05A5 : 11 45 02                 ld      de,00245H
05A8                    L05A8:
05A8 : 1A                       ld      a,(de)
05A9 : 13                       inc     de
05AA : B7                       or      a
05AB : F2 A8 05                 jp      p,L05A8
05AE : 0D                       dec     c
05AF : 20 F7                    jr      nz,L05A8
05B1                    L05B1:
05B1 : E6 7F                    and     07FH
05B3 : DF                       rst     CHROUT
05B4 : 1A                       ld      a,(de)
05B5 : 13                       inc     de
05B6 : B7                       or      a
05B7 : F2 B1 05                 jp      p,L05B1
05BA : 18 DC                    jr      L0598

                        ;;*** On the Aquarius, the entry is only 13 bytes
                        ;
                        ;[M80] A "FOR" ENTRY ON THE STACK HAS THE FOLLOWING FORMAT:
                        ;[M80]
                        ;[M80] LOW ADDRESS
                        ;[M80]	TOKEN ($FOR IN HIGH BYTE)  1 BYTE
                        ;[M80]	A POINTER TO THE LOOP VARIABLE  2 BYTES
                        ;[M80]	A BYTE REFLECTING THE SIGN OF THE INCREMENT 1 BYTE
                        ;[M80]	THE STEP 4 BYTES
                        ;[M80]	THE UPPER VALUE 4 BYTES
                        ;[M80]	THE LINE # OF THE "FOR" STATEMENT 2 BYTES
                        ;[M80]	A TEXT POINTER INTO THE "FOR" STATEMENT 2 BYTES
                        ;[M80] HIGH ADDRESS
                        ;[M80]
                        ;[M80] TOTAL 16 BYTES
                        ;
05BC : 3E 64       [M80] FOR:   ld      a,100
05BE : 32 CB 38                 ld      (SUBFLG),a      ;[M80] DONT RECOGNIZE SUBSCRIPTED VARIABLES
05C1 : CD 31 07                 call    LET             ;[M65] READ VARIABLE AND ASSIGN INITIAL VALUE
05C4 : C1                       pop     bc
05C5 : E5                       push    hl              ;[M80] SAVE THE TEXT POINTER
05C6 : CD 1C 07                 call    DATA            ;[M80] SET [H,L]=END OF STATEMENT
05C9 : 22 C7 38                 ld      (ENDFOR),hl     ;[M80] SAVE FOR COMPARISON
05CC : 21 02 00                 ld      hl,2            ;[M80] SET UP POINTER INTO STACK
05CF : 39                       add     hl,sp
05D0 : CD A3 03   [M80] LPFORM: call    LOOPER          ;[M80] MUST HAVE VARIABLE POINTER IN [D,E]
05D3 : 20 14                    jr      nz,NOTOL        ;[M80] NO MATCHING ENTRY, DON'T ELIMINATE ANYTHING
05D5 : 09                       add     hl,bc           ;[M80] ELIMINATE THE MATCHING ENTRY
05D6 : D5                       push    de              ;[M80] SAVE THE TEXT POINTER
05D7 : 2B                       dec     hl              ;[M80] SEE IF END TEXT POINTER OF MATCHING ENTRY
05D8 : 56                       ld      d,(hl)          ;[M80] MATCHES THE FOR WE ARE HANDLING
05D9 : 2B                       dec     hl              ;[M80] PICK UP THE END OF THE "FOR" TEXT POINTER
05DA : 5E                       ld      e,(hl)          ;[M80] FOR THE ENTRY ON THE STACK
05DB : 23                       inc     hl              ;[M80] WITHOUT CHANGING [H,L]
05DC : 23                       inc     hl
05DD : E5                       push    hl              ;[M80] SAVE THE STACK POINTER FOR THE COMPARISON
05DE : 2A C7 38                 ld      hl,(ENDFOR)     ;[M80] GET ENDING TEXT POINTER FOR THIS "FOR"
05E1 : E7                       rst     COMPAR          ;[M80] SEE IF THEY MATCH
05E2 : E1                       pop     hl              ;[M80] GET BACK THE STACK POINTER
05E3 : D1                       pop     de
05E4 : 20 EA                    jr      nz,LPFORM        ;[M80] KEEP SEARCHING IF NO MATCH
05E6 : D1                       pop     de              ;[M80] GET BACK THE TEXT POINTER
05E7 : F9                       ld      sp,hl           ;[M80] DO THE ELIMINATION
05E8 : 0C                       inc     c
05E9 : D1         [M80] NOTOL:  pop     de
05EA : EB                       ex      de,hl           ;[M80] [H,L]=TEXT POINTER
05EB : 0E 08                    ld      c,8             ;[M80] MAKE SURE 16 BYTES ARE AVAILABLE
05ED : CD A0 0B                 call    GETSTK          ;[M80] OFF OF THE STACK
05F0 : E5                       push    hl              ;[M80] REALLY SAVE THE TEXT POINTER
05F1 : 2A C7 38                 ld      hl,(ENDFOR)     ;[M80] PICK UP POINTER AT END OF "FOR"
05F4 : E3                       ex      (sp),hl         ;[M80] PUT POINTER ON STACK AND RESTORE TEXT POINTER
05F5 : E5                       push    hl              ;[M80] PUSH POINTER TO VARIABLE ONTO THE STACK
05F6 : 2A 4D 38                 ld      hl,(CURLIN)     ;[M80] [H,L] GET THE CURRENT LINE #
05F9 : E3                       ex      (sp),hl         ;[M80] LINE # ON THE STACK AND [H,L] IS THE TEXT POINTER
05FA : CD 75 09                 call    CHKNUM
05FD : CF                       rst     SYNCHK
05FE : A1                       .byte   TOTK            ;[M80] "TO" IS NECESSARY
05FF : CD 72 09                 call    FRMNUM          ;[M65] VALUE MUST BE A NUMBER
0602 : E5                       push    hl
0603 : CD 2E 15                 call    MOVRF           ;[M80] GET THE STUFF
0606 : E1                       pop     hl              ;[M80] REGAIN TEXT POINTER
0607 : C5                       push    bc              ;[M80] OPPOSITE OF PUSHR
0608 : D5                       push    de              ;[M80] SAVE THE SIGN OF THE INCREMENT
0609 : 01 00 81                 ld      bc,$8100        ;[M80] ;DEFAULT THE STEP TO BE 1
060C : 51                       ld      d,c
060D : 5A                       ld      e,d             ;[M80] GET 1.0 IN THE REGISTERS
060E : 7E                       ld      a,(hl)          ;[M80] GET TERMINATING CHARACTER
060F : FE A7                    cp      STEPTK          ;[M80] DO WE HAVE "STEP" ?
0611 : 3E 01                    ld      a,001H          ;[M80] SETUP DEFAULT SIGN
0613 : 20 0A                    jr      nz,ONEON        ;[M65] NO. ASSUME 1.0.
0615 : D7                       rst     CHRGET          ;[M65] YES. ADVANCE POINTER
0616 : CD 72 09                 call    FRMNUM
0619 : E5                       push    hl
061A : CD 2E 15                 call    MOVRF           ;[M80] SET UP THE REGISTERS
061D : EF                       rst     FSIGN           ;[M80] GET THE SIGN OF THE INCREMENT
061E : E1         [M80] STPSGN: pop     hl              ;[M80] POP OFF THE TEXT POINTER
061F : C5         [M80] ONEON:  push    bc              ;[M80] PUT VALUE ON BACKWARDS
0620 : D5                       push    de              ;[M80] OPPOSITE OF PUSHR
0621 : F5                       push    af
0622 : 33                       inc     sp
0623 : E5                       push    hl
0624 : 2A CE 38                 ld      hl,(SAVTXT)
0627 : E3                       ex      (sp),hl
0628                    L0628:
0628 : 06 81                    ld      b,081H
062A : C5                       push    bc
062B : 33                       inc     sp
062C                    L062C:
062C : 22 CE 38                 ld      (SAVTXT),hl
062F : CD C2 1F                 call    L1FC2
0632 : 7E                       ld      a,(hl)          ;;Get Terminator
0633 : FE 3A                    cp      ':'             ;[M80] IS IT A COLON?
0635 : 28 14                    jr      z,GONE
0637 : B7                       or      a
0638 : C2 C4 03                 jp      nz,SNERR        ;[M80] MUST BE A ZERO
063B : 23                       inc     hl
063C : 7E         [M80] GONE4:  ld      a,(hl)          ;[M80] IF POINTER IS ZERO, END OF PROGRAM
063D : 23                       inc     hl
063E : B6                       or      (hl)            ;[M80] OR IN HIGH PART
063F : CA 29 0C                 jp      z,ENDCON        ;[M80] FIX SYNTAX ERROR IN UNENDED ERROR ROUTINE
0642 : 23                       inc     hl
0643 : 5E                       ld      e,(hl)
0644 : 23                       inc     hl
0645 : 56                       ld      d,(hl)          ;[M80] GET LINE # IN [D,E]
0646 : EB                       ex      de,hl           ;[M80] [H,L]=LINE #
0647 : 22 4D 38                 ld      (CURLIN),hl     ;[M80] SETUP CURLIN WITH THE CURRENT LINE #
064A : EB                       ex      de,hl           ;;DE=Line#, HL=Text Pointer

064B : D7         [M80] GONE:   rst     CHRGET          ;GET THE STATEMENT TYPE
064C : 11 2C 06                 ld      de,NEWSTT       ;PUSH ON A RETURN ADDRESS OF NEWSTT
064F : D5                       push    de              ;STATEMENT
0650 : C8         [M80] GONE3:  ret     z               ;IF A TERMINATOR TRY AGAIN
                                                        ;"IF" COMES HERE
0651 : D6 80      [M80] GONE2:  sub     080H            ;"ON ... GOTO" AND "ON ... GOSUB" COME HERE
0653 : DA 31 07                 jp      c,LET           ;MUST BE A LET
0656 : FE 20                    cp      020H            ;;label NUMCMD
0658 : F7                       rst     HOOKDO
0659 : 17                       rla
065A : D2 C4 03                 jp      nc,SNERR
065D : 07                       rlca
065E : 4F                       ld      c,a
065F : 06 00                    ld      b,0
0661 : EB                       ex      de,hl
0662 : 21 D5 01                 ld      hl,STMDSP       ;[M80] STATEMENT DISPATCH TABLE
0665 : 09                       add     hl,bc           ;[M80] ADD ON OFFSET
0666 : 4E                       ld      c,(hl)          ;[M80] PUSH THE ADDRESS TO GO TO ONTO
0667 : 23                       inc     hl              ;[M80] THE STACK
0668 : 46                       ld      b,(hl)          ;[M80] PUSHM SAVES BYTES BUT NOT SPEED
0669 : C5                       push    bc
066A : EB                       ex      de,hl           ;[M80] RESTORE THE TEXT POINTER
; NEWSTT FALLS INTO CHRGET. THIS FETCHES THE FIRST CHAR AFTER
; THE STATEMENT TOKEN AND THE CHRGET'S "RET" DISPATCHES TO STATEMENT
066B : 23       CHRGTR: inc     hl              ;DUPLICATION OF CHRGET RST FOR SPEED
066C : 7E       CHRGT2: ld      a,(hl)
066D : FE 3A            cp      ':'             ;SEE CHRGET RST FOR EXPLANATION
066F : D0               ret     nc
; CHRCON IS THE CONTINUATION OF THE CHRGET RST
0670 : FE 20    CHRCON: cp      ' '             ;MUST SKIP SPACES
0672 : 28 F7            jr      z,CHRGTR        ;GET ANOTHER CHARACTER
0674 : FE 30            cp      '0'             ;ALL CHARS .GT. "9" HAVE RET'D SO
0676 : 3F               ccf                     ;TURN CARRY ON IF NUMERIC.
0677 : 3C               inc     a               ;ALSO, SETZ IF NULL.
0678 : 3D               dec     a
0679 : C9       CHRRTS: ret                     ;RETURN TO CALLER.

067A                    L067A:
067A : D7                       rst     CHRGET
067B                    L067B:
067B : CD 72 09                 call    FRMNUM
067E                    L067E:
067E : EF                       rst     FSIGN
067F : FA 97 06                 jp      m,FCERR
0682
0682 : 3A E7 38   [M80] FRCINT: ld      a,(FACHO)
0685 : FE 90                    cp      090H
0687 : DA 86 15                 jp      c,L1586
068A : 01 80 90                 ld      bc,09080H
068D : 11 00 00                 ld      de,00000H
0690 : E5                       push    hl
0691 : CD 5B 15                 call    L155B
0694 : E1                       pop     hl
0695 : 51                       ld      d,c
0696 : C8                       ret     z

0697 : 1E 08      [M80] FCERR:  ld      e,ERRFC         ;[M65] "FUNCTION CALL" ERROR
0699 : C3 DB 03                 jp      ERROR

;
; SCNLIN SCANS A LINE RANGE O
; THE FORM  #-# OR # OR #- OR -# OR BLANK
; AND THEN FINDS THE FIRST LINE IN THE RANGE
;
069C : 2B         [M80] SCNLIN: dec     hl
069D : 11 00 00   [M65] LINGET: ld      de,0            ;[M80] ASSUME START LIST AT ZERO
06A0 : D7         [M65] MORGET: rst     CHRGET          ;;Get next character
06A1 : D0                       ret     nc              ;[M65] IT IS NOT A DIGIT
06A2 : E5                       push    hl
06A3 : F5                       push    af
06A4 : 21 98 19                 ld      hl,01998H
06A7 : E7                       rst     COMPAR
06A8 : 38 11                    jr      c,L06BB
06AA : 62                       ld      h,d
06AB : 6B                       ld      l,e
06AC : 19                       add     hl,de
06AD : 29                       add     hl,hl
06AE : 19                       add     hl,de
06AF : 29                       add     hl,hl
06B0 : F1                       pop     af
06B1 : D6 30                    sub     030H
06B3 : 5F                       ld      e,a
06B4 : 16 00                    ld      d,000H
06B6 : 19                       add     hl,de
06B7 : EB                       ex      de,hl
06B8 : E1                       pop     hl
06B9 : 18 E5                    jr      MORGET
                                ;
06BB                    L06BB:
06BB : F1                       pop     af
06BC : E1                       pop     hl
06BD : C9                       ret
                                ;
06BE : F7         [M80] RUN:    rst     HOOKDO          ;Call Hook Routine
06BF : 18                       .byte   24
06C0 : CA CB 0B                 jp      z,RUNC          ;[M80] NO LINE # ARGUMENT
06C3 : CD CF 0B   [M80] CONRUN: call    L0CD8          ;RESET THE STACK,DATPTR,VARIABLES ...
06C6 : 01 2C 06                 ld      bc,NEWSTT
06C9 : 18 10                    jr      RUNC2           ;[M80] PUT "NEWSTT" ON AND FALL INTO "GOTO"

                        ;[M80] A "GOSUB" ENTRY ON THE STACK HAS THE FOLLOWING FORMAT
                        ;[M80]
                        ;[M80] LOW ADDRESS
                        ;[M80]
                        ;[M80]	A TOKEN EQUAL TO $GOSUB 1 BYTE
                        ;[M80]	THE LINE # OF THE THE "GOSUB" STATEMENT 2 BYTES
                        ;[M80]	A POINTER INTO THE TEXT OF THE "GOSUB" 2 BYTES
                        ;[M80]
                        ;[M80] HIGH ADDRESS
                        ;[M80]
                        ;[M80] TOTAL 5 BYTES
                        ;
06CB : 0E 03      [M80] GOSUB:  ld      c,3             ;[M80] "GOSUB" ENTRIES ARE 5 BYTES LONG
06CD : CD A0 0B                 call    GETSTK          ;[M80] MAKE SURE THERE IS ROOM
06D0 : C1                       pop     bc              ;[M80] POP OFF RETURN ADDRESS OF "NEWSTT"
06D1 : E5                       push    hl              ;[M80] REALLY PUSH THE TEXT POINTER
06D2 : E5                       push    hl              ;[M80] SAVE TEXT POINTER
06D3 : 2A 4D 38                 ld      hl,(CURLIN)     ;[M80] GET THE CURRENT LINE #
06D6 : E3                       ex      (sp),hl         ;[M80] PUT CURLIN ON THE STACK AND [H,L]=TEXT PTR
06D7 : 3E 8C                    ld      a,$8C           ;;$GOSUB, GOSUTK
06D9 : F5                       push    af              ;[M80] PUT GOSUB TOKEN ON THE STACK
06DA : 33                       inc     sp              ;[M80] THE GOSUB TOKEN TAKES ONLY ONE BYTE

06DB : C5         [M80] RUNC2:  push    bc              ;[M80] RESTORE RETURN ADDRESS OF "NEWSTT"

06DC : CD 9C 06   [M80] GOTO:   call    SCNLIN          ;[M80] PICK UP THE LINE # AND PUT IT IN [D,E]
06DF : CD 1E 07                 call    REM             ;[M80] SKIP TO THE END OF THIS LINE
06E2 : 23                       inc     hl              ;[M80] POINT AT THE LINK BEYOND IT
06E3 : E5                       push    hl              ;[M80] SAVE THE POINTER
06E4 : 2A 4D 38                 ld      hl,(CURLIN)     ;[M80] GET THE CURRENT LINE #
06E7 : E7                       rst     COMPAR          ;;Is target line less than current line
06E8 : E1                       pop     hl              ;[M80] [H,L]=CURRENT POINTER
06E9 : DC A2 04                 call    c,LOOP          ;[M80] SEARCH FROM THIS POINT
06EC : D4 9F 04                 call    nc,FNDLIN       ;[M80] SEARCH FROM THE BEGINNING -- ACTUALLY
06EF : 60                       ld      h,b             ;[M80] [H,L]= POINTER TO THE START OF THE MATCHED LINE
06F0 : 69                       ld      l,c
06F1 : 2B                       dec     hl
06F2 : D8                       ret     c               ;[M80] GO TO NEWSTT
06F3 : 1E 0E      [M80] USERR:  ld      e,ERRUS         ;[M80] C=MATCH, SO IF NO MATCH WE
06F5 : C3 DB 03                 jp      ERROR           ;[M80] GIVE A "US" ERROR

                        ;
                        ;[M80] SEE "GOSUB" FOR THE FORMAT OF THE STACK ENTRY
                        ;[M80] "RETURN" RESTORES THE LINE NUMBER AND TEXT POINTER ON THE STACK
                        ;[M80] AFTER ELIMINATING ALL THE "FOR" ENTRIES IN FRONT OF THE "GOSUB"
                        ;[M80] ENTRY
                        ;
06F8 : C0         [M80] RETURN: ret     nz              ;[M80] BLOW HIM UP IF THERE ISN'T A TERMINATOR
06F9 : 16 FF                    ld      d,255           ;[M80] MAKE SURE VARIABLE POINTER IN [D,E] NEVER GETS MATCHED
06FB : CD 9F 03                 call    FNDFOR          ;[M80] GO PAST ALL THE "FOR" ENTRIES
06FE : F9                       ld      sp,hl           ;[M80] UPDATE THE STACK
06FF : FE 8C                    cp      GOSUTK
0701 : 1E 04                    ld      e,ERRRG         ;[M80] ERROR ERRRG IS "RETURN WITHOUT GOSUB"
0703 : C2 DB 03                 jp      nz,ERROR
0706 : E1                       pop     hl              ;GET LINE # "GOSUB" WAS FROM
0707 : 22 4D 38                 ld      (CURLIN),hl     ;PUT IT INTO CURLIN
070A : 23                       inc     hl
070B : 7C                       ld      a,h
070C : B5                       or      l
070D : 20 07                    jr      nz,L0716
070F : 3A CC 38                 ld      a,(X38CC)
0712 : B7                       or      a
0713 : C2 01 04                 jp      nz,L0401

0716                    L0716:
0716 : 21 2C 06                 ld      hl,NEWSTT       ;[M80] PUT RETURN ADDRESS OF "NEWSTT" BACK ON STACK
0719 : E3                       ex      (sp),hl         ;[M80] GET TEXT POINTER FROM "GOSUB"
071A : 3E E1                    ld      a,$E1

071C : 01         [M80] DATA:   .byte   $01             ;[M80] "LD BC," TO PICK UP ":" INTO C AND SKIP
071D : 3A                       .byte   ':'
017E : 0E         [M80] REM:    .byte   $0E             ;[M80] "LD C,"   THE ONLY TERMINATOR IS ZERO
017F : 00                       .byte   0
0720 : 06 00                    ld      b,0             ;[M80] INSIDE QUOTES THE ONLY TERMINATOR IS ZERO
0722 : 79         [M80] EXCHQT: ld      a,c             ;[M80] WHEN A QUOTE IS SEEN THE SECOND
0723 : 48                       ld      c,b             ;[M80] TERMINATOR IS TRADED, SO IN "DATA"
0724 : 47                       ld      b,a             ;[M80] COLONS INSIDE QUOTATIONS WILL HAVE NO EFFECT
0725                    L0725:
0725 : 7E                       ld      a,(hl)
0726 : B7                       or      a
0727 : C8                       ret     z
0728 : B8                       cp      b
0729 : C8                       ret     z
072A : 23                       inc     hl
072B : FE 22                    cp      022H
072D : 28 F3                    jr      z,EXCHQT
072F : 18 F4                    jr      L0725

0731 : CD D1 10   [M80] LET:    call    PTRGET
0734 : CF                       rst     SYNCHK
0735 : B0                       .byte   EQULTK          ;SKIP OVER ASSIGNMENT "="
0736 : D5                       push    de              ;SAVE THE VARIABLE POINTER
0737 : 3A AB 38                 ld      a,(VALTYP)      ;REMEMBER THE LOOP VARIABLE TYPE
073A : F5                       push    af
073B : CD 85 09                 call    FRMEVL          ;GET THE START VALUE
073E : F1                       pop     af              ;REGET THE LOOP TYPE
073F : E3                       ex      (sp),hl         ;SAVE THE TEXT POINTER
0740 : 22 CE 38                 ld      (SAVTXT),hl     ;PLACE TO SAVE THE VALUE
0743 : 1F                       rra
0744 : CD 77 09                 call    CHKSTR
0747 : CA 79 07                 jp      z,L0779

074A                    L074A:
074A : E5                       push    hl
074B : 2A E4 38                 ld      hl,(FACLO)
074E : E5                       push    hl
074F : 23                       inc     hl
0750 : 23                       inc     hl
0751 : 5E                       ld      e,(hl)
0752 : 23                       inc     hl
0753 : 56                       ld      d,(hl)
0754 : 2A 4F 38                 ld      hl,(TXTTAB)
0757 : E7                       rst     COMPAR
0758 : 30 0E                    jr      nc,L0768
075A : 2A DA 38                 ld      hl,(STREND)
075D : E7                       rst     COMPAR
075E : D1                       pop     de
075F : 30 0F                    jr      nc,L0770
0761 : 21 BD 38                 ld      hl,DSCTMP
0764 : E7                       rst     COMPAR
0765 : 30 09                    jr      nc,L0770
0767 : 3E D1                    ld      a,0D1H
0769 : CD E4 0F                 call    FRETMS
076C : EB                       ex      de,hl
076D : CD 39 0E                 call    L0E39
0770                    L0770:
0770 : CD E4 0F                 call    FRETMS
0773 : E1                       pop     hl
0774 : CD 3D 15                 call    VMOVE
0777 : E1                       pop     hl
0778 : C9                       ret
                        ;
0779                    L0779:
0779 : E5                       push    hl
077A : CD 3A 15                 call    MOVMF   ;[M80] STORE FOR USE IN "NEXT"
077D : D1                       pop     de      ;[M80] GET BACK THE VARIABLE POINTER
077E : E1                       pop     hl      ;[M80] GET BACK THE TEXT POINTER
077F : C9                       ret
                        ;
0780 : F7               ON:     rst     HOOKDO
0781 : 19                       .byte   25
0782 : CD 54 0B                 call    GETBYT
0785 : 7E                       ld      a,(hl)
0786 : 47                       ld      b,a
0787 : FE 8C                    cp      08CH
0789 : 28 03                    jr      z,L078E
078B : CF                       rst     SYNCHK
078C : 88                       .byte   GOTOTK
078D : 2B                       dec     hl
078E                    L078E:
078E : 4B                       ld      c,e
078F                    L078F:
078F : 0D                       dec     c
0790 : 78                       ld      a,b
0791 : CA 51 06                 jp      z,GONE2
0794 : CD 9D 06                 call    LINGET
0797 : FE 2C                    cp      02CH
0799 : C0                       ret     nz
079A : 18 F3                    jr      L078F
                                ;
079C : CD 85 09   [???] IF:     call    FRMEVL
079F : 7E                       ld      a,(hl)
07A0 : FE 88                    cp      088H
07A2 : 28 03                    jr      z,L07A7
07A4 : CF                       rst     SYNCHK
07A5 : A5                       .byte   THENTK
07A6 : 2B                       dec     hl
07A7                    L07A7:
07A7 : CD 75 09                 call    CHKNUM
07AA : EF                       rst     FSIGN
07AB : CA 1E 07                 jp      z,REM
07AE : D7                       rst     CHRGET
07AF : DA DC 06                 jp      c,GOTO
07B2 : C3 50 06                 jp      GONE3
                        ;
07B5 : 3E 01      [???] LPRINT: ld      a,001H
07B7 : 32 47 38                 ld      (PRTFLG),a
07BA                    L07BA:
07BA : 2B                       dec     hl
07BB : D7                       rst     CHRGET

07BC : F7         [???] PRINT:  rst     HOOKDO
07BD : 06 CC                    ld      b,0CCH
07BF : EA 19 CA                 jp      pe,LCA19
07C2 : 66                       ld      h,(hl)
07C3 : 08                       ex      af,af'
07C4 : FE A0                    cp      0A0H
07C6 : CA 3A 08                 jp      z,L083A
07C9 : FE A3                    cp      0A3H
07CB : CA 3A 08                 jp      z,L083A
07CE : E5                       push    hl
07CF : FE 2C                    cp      02CH
07D1 : 28 44                    jr      z,L0817
07D3 : FE 3B                    cp      03BH
07D5 : CA 61 08                 jp      z,L0861
07D8 : C1                       pop     bc
07D9 : CD 85 09                 call    FRMEVL
07DC : E5                       push    hl
07DD : 3A AB 38                 ld      a,(VALTYP)
07E0 : B7                       or      a
07E1 : C2 11 08                 jp      nz,L0811
07E4 : CD 80 16                 call    L1680
07E7 : CD 5F 0E                 call    STRLIT
07EA : 36 20                    ld      (hl),020H
07EC : 2A E4 38                 ld      hl,(FACLO)
07EF : 3A 47 38                 ld      a,(PRTFLG)
07F2 : B7                       or      a
07F3 : 28 08                    jr      z,L07FD
07F5 : 3A 46 38                 ld      a,(LPTPOS)
07F8 : 86                       add     a,(hl)
07F9 : FE 84                    cp      084H
07FB : 18 0D                    jr      L080A
                                ;
07FD                    L07FD:
07FD : 3A 48 38                 ld      a,(X3848)
0800 : 47                       ld      b,a
0801 : 3C                       inc     a
0802 : 28 09                    jr      z,L080D
0804 : 3A 00 38                 ld      a,(TTYPOS)
0807 : 86                       add     a,(hl)
0808 : 3D                       dec     a
0809 : B8                       cp      b
080A                    L080A:
080A : D4 EA 19                 call    nc,CRDO
080D                    L080D:
080D : CD A0 0E                 call    STRPRT
0810 : AF                       xor     a
0811                    L0811:
0811 : C4 A0 0E                 call    nz,STRPRT
0814 : E1                       pop     hl
0815 : 18 A3                    jr      L07BA
                        ;
0817                    L0817:
0817 : 3A 47 38                 ld      a,(PRTFLG)
081A : B7                       or      a
081B : 28 08                    jr      z,L0825
081D : 3A 46 38                 ld      a,(LPTPOS)
0820 : FE 70                    cp      070H
0822 : C3 2D 08                 jp      L082D
                        ;
0825                    L0825:
0825 : 3A 49 38                 ld      a,(X3849)
0828 : 47                       ld      b,a
0829 : 3A 00 38                 ld      a,(TTYPOS)
082C : B8                       cp      b
082D                    L082D:
082D : D4 EA 19                 call    nc,CRDO
0830 : D2 61 08                 jp      nc,L0861
0833                    L0833:
0833 : D6 0E                    sub     00EH
0835 : 30 FC                    jr      nc,L0833
0837 : 2F                       cpl
0838 : 18 20                    jr      L085A
                        ;
083A                    L083A:
083A : F5                       push    af
083B : CD 53 0B                 call    L0B53
083E : CF                       rst     SYNCHK
083F : 29                       .byte   ')'
0840 : 2B                       dec     hl
0841 : F1                       pop     af
0842 : D6 A3                    sub     0A3H
0844 : E5                       push    hl
0845 : 28 0F                    jr      z,L0856
0847 : 3A 47 38                 ld      a,(PRTFLG)
084A : B7                       or      a
084B : CA 53 08                 jp      z,L0853
084E : 3A 46 38                 ld      a,(LPTPOS)
0851 : 18 03                    jr      L0856
                        ;
0853                    L0853:
0853 : 3A 00 38                 ld      a,(TTYPOS)
0856                    L0856:
0856 : 2F                       cpl
0857 : 83                       add     a,e
0858 : 30 07                    jr      nc,L0861
085A                    L085A:
085A : 3C                       inc     a
085B : 47                       ld      b,a
085C : 3E 20                    ld      a,020H
085E                    L085E:
085E : DF                       rst     CHROUT
085F : 10 FD                    djnz    L085E
0861                    L0861:
0861 : E1                       pop     hl
0862 : D7                       rst     CHRGET
0863 : C3 C1 07                 jp      L07C1
                        ;
0866 : F7                       rst     HOOKDO
0867 : 07                       rlca
0868 : AF                       xor     a
0869 : 32 47 38                 ld      (PRTFLG),a
086C : C9                       ret
                        ;
086D : 3F                       ccf
086E : 52                       ld      d,d
086F : 65                       ld      h,l
0870 : 64                       ld      h,h
0871 : 6F                       ld      l,a
0872 : 20 66                    jr      nz,L08DA
0874 : 72                       ld      (hl),d
0875 : 6F                       ld      l,a
0876 : 6D                       ld      l,l
0877 : 20 73                    jr      nz,L08EC
0879 : 74                       ld      (hl),h
087A : 61                       ld      h,c
087B : 72                       ld      (hl),d
087C : 74                       ld      (hl),h
087D : 0D                       dec     c
087E : 0A                       ld      a,(bc)
087F : 00                       nop
0880                    L0880:
0880 : F7                       rst     HOOKDO
0881 : 08                       ex      af,af'
0882 : 3A CD 38                 ld      a,(FLGINP)
0885 : B7                       or      a
0886 : C2 BE 03                 jp      nz,DATSNE
0889 : C1                       pop     bc
088A : 21 6D 08                 ld      hl,0086DH
088D : CD 9D 0E                 call    STROUT
0890 : C3 01 0C                 jp      STKRTS

0893 : F7         [M80] INPUT:  rst     HOOKDO
0894 : 1A                       .byte   26
0895 : CD 45 0B                 call    ERRDIR          ;[M65] DIRECT IS NOT OK
0898 : 7E                       ld      a,(hl)
0899 : FE 22      {M80} QTINP:  cp      '"'             ;[M80] IS IT A QUOTE?
089B : 3E 00                    ld      a,0             ;[M80] BE TALKATIVE
089D : C2 AA 08                 jp      nz,NOTQTI       ;[M65] NO MESSAGE
08A0 : CD 60 0E                 call    STRLTI          ;[M65] LITERALIZE THE STRING IN TEXT
08A3 : CF                       rst     SYNCHK          ;[M65] MUST END WITH SEMICOLON
08A4 : 3B                       .byte   ';'
08A5 : E5                       push    hl
08A6 : CD A0 0E                 call    STRPRT          ;[M65] PRINT IT OUT
08A9 : 3E E5                    ld      a,0E5H
08AB : CD 5B 0D                 call    QINLIN
08AE : C1                       pop     bc
08AF : DA 26 0C                 jp      c,L0C26
08B2 : 23                       inc     hl
08B3 : 7E                       ld      a,(hl)
08B4 : B7                       or      a
08B5 : 2B                       dec     hl
08B6 : C5                       push    bc
08B7 : CA 1B 07                 jp      z,L071B
08BA : 36 2C                    ld      (hl),02CH
08BC : 18 05                    jr      L08C3

08BE : E5         [M80] READ:   push    hl              ;SAVE THE TEXT POINTER
08BF : 2A DC 38                 ld      hl,(DATPTR)     ;GET LAST DATA LOCATION
08C2 : F6 AF                    or      $AF             ;"ORI" TO SET [A] NON-ZERO
08C4 : 32 CD 38   {M80} INPCON: ld      (FLGINP),a      ;STORE THE FLAG
                                ;
                                ;[M80] IN THE PROCESSING OF DATA AND READ STATEMENTS:
                                ;[M80] ONE POINTER POINTS TO THE DATA (IE THE NUMBERS BEING FETCHED)
                                ;[M80] AND ANOTHER POINTS TO THE LIST OF VARIABLES
                                ;[M80]
                                ;[M80] THE POINTER INTO THE DATA ALWAYS STARTS POINTING TO A
                                ;[M80] TERMINATOR -- A , : OR END-OF-LINE
                                ;
08C7 : E3                       ex      (sp),hl         ;[M80] [H,L]=VARIABLE LIST POINTER
08C8 : 01                       ,byte   $01             ;[M80] "LD BC," OVER THE NEXT 2
08C9 : CF         [M80] LOPDAT: rst     SYNCHK          ;;;Named LOPDT2 in [M80]
0BCA : C                        .byte   ','             ;[M80] MAKE SURE THERE IS A ","
08CB : CD D1 10                 call    PTRGET          ;[M80] GET THE POINTER TO A VARIABLE INTO [D,E]
08CE : E3                       ex      (sp),hl         ;;Swap with Data List Pointer`
                                ;
                                ;[M80] NOTE AT THIS POINT WE HAVE A VARIABLE WHICH WANTS DATA
                                ;[M80] AND SO WE MUST GET DATA OR COMPLAIN
                                ;
08CF : D5                       push    de              ;[M80] SAVE THE POINTER TO THE VARIABLE
08D0 : 7E                       ld      a,(hl)          ;[M80] READ DATA LIST TERMINATOR
08D1 : FE 2C                    cp      ','
08D3 : 28 1B                    jr      z,DATBK         ;[M80] A COMMA SO A VALUE MUST FOLLOW
08D5 : 3A CD 38                 ld      a,(FLGINP)      ;[M80] SEE WHAT TYPE OF STATEMENT THIS WAS
08D8 : B7                       or      a
08D9 : C2 53 09                 jp      nz,DATLOP       ;[M80] SEARCH FOR ANOTHER DATA STATEMENT
08DC : 3E 3F                    ld      a,'?'
08DE : DF                       rst     CHROUT
08DF : CD 5B 0D                 call    QINLIN
08E2 : D1                       pop     de
08E3 : C1                       pop     bc
08E4 : DA 26 0C                 jp      c,L0C26
08E7 : 23                       inc     hl
08E8 : 7E                       ld      a,(hl)
08E9 : 2B                       dec     hl
08EA : B7                       or      a
08EB : C5                       push    bc
08EC                    L08EC:
08EC : CA 1B 07                 jp      z,L071B
08EF : D5                       push    de
08F0                    DATBK:
08F0 : F7                       rst     HOOKDO
08F1 : 1C                       inc     e
08F2 : 3A AB 38                 ld      a,(VALTYP)
08F5 : B7                       or      a
08F6 : 28 1F                    jr      z,L0917
08F8 : D7                       rst     CHRGET
08F9 : 57                       ld      d,a
08FA : 47                       ld      b,a
08FB : FE 22                    cp      022H
08FD : 28 0C                    jr      z,L090B
08FF : 3A CD 38                 ld      a,(FLGINP)
0902 : B7                       or      a
0903 : 57                       ld      d,a
0904 : 28 02                    jr      z,L0908
0906 : 16 3A                    ld      d,03AH
0908                    L0908:
0908 : 06 2C                    ld      b,02CH
090A : 2B                       dec     hl
090B                    L090B:
090B : CD 63 0E                 call    STRLT2
090E : EB                       ex      de,hl
090F : 21 20 09                 ld      hl,00920H
0912 : E3                       ex      (sp),hl
0913 : D5                       push    de
0914 : C3 4A 07                 jp      L074A
                                ;
0917                            L0917:
0917 : D7               " "             rst     CHRGET
0918 : CD E5 15         "   "           call    FIN
091B : E3               " "             ex      (sp),hl
091C : CD 3A 15         " : "           call    MOVMF
091F : E1               " "             pop     hl
0920 : 2B               "+"             dec     hl
0921 : D7               " "             rst     CHRGET
0922 : 28 05            "( "            jr      z,L0929
0924 : FE 2C            " ,"            cp      02CH
0926 : C2 80 08         "   "           jp      nz,L0880
0929                            L0929:
0929 : E3               " "             ex      (sp),hl
092A : 2B               "+"             dec     hl
092B : D7               " "             rst     CHRGET
092C : C2 C9 08         "   "           jp      nz,LOPDAT
092F : D1               " "             pop     de
0930 : 3A CD 38         ": 8"           ld      a,(FLGINP)
0933 : B7               " "             or      a
0934 : EB               " "             ex      de,hl
0935 : C2 1A 0C         "   "           jp      nz,L0C1A
0938 : D5               " "             push    de
0939 : B6               " "             or      (hl)
093A : 21 42 09         "!B "           ld      hl,00942H
093D : C4 9D 0E         "   "           call    nz,STROUT
0940 : E1               " "             pop     hl
0941 : C9               " "             ret
                                ;
0942 : 3F               "?"             ccf
0943 : 45               "E"             ld      b,l
0944 : 78               "x"             ld      a,b
0945 : 74               "t"             ld      (hl),h
0946 : 72               "r"             ld      (hl),d
0947 : 61               "a"             ld      h,c
0948 : 20 69            " i"            jr      nz,L09B3
094A : 67               "g"             ld      h,a
094B : 6E               "n"             ld      l,(hl)
094C : 6F               "o"             ld      l,a
094D : 72               "r"             ld      (hl),d
094E : 65               "e"             ld      h,l
094F : 64               "d"             ld      h,h
0950 : 0D               " "             dec     c
0951 : 0A               " "             ld      a,(bc)
0952 : 00               " "             nop
0953                            DATLOP:
0953 : CD 1C 07         "   "           call    DATA
0956 : B7               " "             or      a
0957 : 20 11            "  "            jr      nz,L096A
0959 : 23               "#"             inc     hl
095A : 7E               "~"             ld      a,(hl)
095B : 23               "#"             inc     hl
095C : B6               " "             or      (hl)
095D : 1E 06            "  "            ld      e,ERROD
095F : CA DB 03         "   "           jp      z,ERROR
0962 : 23               "#"             inc     hl
0963 : 5E               "^"             ld      e,(hl)
0964 : 23               "#"             inc     hl
0965 : 56               "V"             ld      d,(hl)
0966 : ED 53 C9 38      " S 8"          ld      (DATLIN),de
096A                            L096A:
096A : D7               " "             rst     CHRGET
096B : FE 83            "  "            cp      083H
096D : 20 E4            "  "            jr      nz,DATLOP
096F : C3 F0 08         "   "           jp      DATBK

                        ;
                        ;[M65] THESE ROUTINES CHECK FOR CERTAIN "VALTYP".
                        ;[M65] [C] IS NOT PRESERVED.
                        ;                                ;
0972 : CD 85 09   [M65] FRMNUM: call    FRMEVL
0975 : F6         [M65] CHKNUM: .byte   $F6             ;;"OR $37" to skip next instruction
0976 : 37                       scf
0977 : 3A AB 38   [M65] CHKSTR: ld      a,(VALTYP)
097A : 8F                       adc     a,a             ;;Shift Left and Copy in Cary
097B : B7                       or      a               ;;Set Flags
097C : E8                       ret     pe              ;;Return if Overflow
097D : C3 D9 03   [M65] CHKERR: jp      TMERR           ;;Else TYPE MISMATCH Error

                        ;*** TO DO: Check Stack usage to make sure it matches description
                        ;
                        ;[M80] THE FORMULA EVALUATOR STARTS WITH
                        ;[M80] [H,L] POINTING TO THE FIRST CHARACTER OF THE FORMULA.
                        ;[M80] AT THE END [H,L] POINTS TO THE TERMINATOR.
                        ;[M80] THE RESULT IS LEFT IN THE FAC.
                        ;[M80] ON RETURN [A] DOES NOT REFLECT THE TERMINATING CHARACTER
                        ;[M80]
                        ;[M80] THE FORMULA EVALUATOR USES THE OPERATOR TABLE (OPTAB)
                        ;[M80] TO DETERMINE PRECEDENCE AND DISPATCH ADDRESSES FOR
                        ;[M80] EACH OPERATOR.
                        ;[M80] A TEMPORARY RESULT ON THE STACK HAS THE FOLLOWING FORMAT
                        ;[M80]
                        ;[M80] THE ADDRESS OF 'RETAOP' -- THE PLACE TO RETURN ON COMPLETION
                        ;[M80] OF OPERATOR APPLICATION
                        ;[M80]
                        ;[M80] THE FLOATING POINT TEMPORARY RESULT
                        ;[M80]
                        ;[M80] THE ADDRESS OF THE OPERATOR ROUNTINE
                        ;[M80]
                        ;[M80] THE PRECEDENCE OF THE OPERATOR
                        ;[M80]
                        ;[M80] TOTAL 10 BYTES
                        ;
0980 : CF         [M80] FRMEQL: rst     SYNCHK
0981 : B0                       .byte   EQUATK          ;[M80] CHECK FOR EQUAL SIGN
0982 : 01                       .byte   $01             ;[M80] "LD BC," OVER THE NEXT 2
0983 : CF         [M80] FRMPRN:  rst     SYNCHK         ;[M80] GET PAREN BEFORE FORMULA
0984 : 28                       .byte   '('

0985 :                  ;[M65] THE FORMULA EVALUATOR STARTS WITH
0985 :                  ;[M65] [H,L] POINTING TO THE FIRST CHARACTER OF THE FORMULA.
0985 :                  ;[M65] AT THE END [H,L] POINTS TO THE TERMINATOR.
0985 :                  ;[M65] THE RESULT IS LEFT IN THE FAC.
0985 :                  ;[M65] ON RETURN [A] DOES NOT REFLECT THE TERMINATOR.
0985 :                  ;
0985 :                  ;[M65] THE FORMULA EVALUATOR USES THE OPERATOR LIST (OPTAB)
0985 :                  ;[M65] TO DETERMINE PRECEDENCE AND DISPATCH ADDRESSES FOR
0985 :                  ;[M65] EACH OPERATOR.
0985 :                  ;[M65] A TEMPORARY RESULT ON THE STACK HAS THE FOLLOWING FORMAT.
0985 :                  ;[M65]       THE ADDRESS OF THE OPERATOR ROUTINE.
0985 :                  ;[M65]       THE FLOATING POINT TEMPORARY RESULT.
0985 :                  ;[M65]       THE PRECEDENCE OF THE OPERATOR.
0985 :                  ;
0985 : 2B         [M80] FRMEVL: dec     hl              ;[M80] BACK UP CHARACTER POINTER
0986 : 16 00      [M80] FRMCHK: ld      d,000H          ;[M80] INITIAL DUMMY PRECEDENCE IS 0
0988 : D5         [M80] LPOPER: push    de              ;[M80] SAVE PRECEDENCE
0989 : 0E 01                    ld      c,001H          ;[M80] EXTRA SPACE NEEDED FOR RETURN ADDRESS
098B : CD A0 0B                 call    GETSTK          ;[M80] MAKE SURE THERE IS ROOM FOR RECURSIVE CALLS
098E : CD FD 09                 call    EVAL            ;[M80] EVALUATE SOMETHING
0991 : 22 D0 38   [N80] TSTOP:  ld      (TENP2),hl      ;[M80] SAVE TEXT POINTER
0994 : 2A D0 38   [M80] RETAOP: ld      hl,(TENP2)      ;[M80] RESTORE TEXT PTR
0997 : C1                       pop     bc              ;[M80] POP OFF THE PRECEDENCE OF OLDOP
0998 : 78                       ld      a,b
0999 : FE 78                    cp      $78
099B : D4 75 09                 call    nc,CHKNUM
099E : 7E         [M80] NOTSTV  ld      a,(hl)          ;[M80] GET NEXT CHARACTER
099F : 22 C3 38                 ld      (TENP3),hl      ;[M80] SAVE UPDATED CHARACTER POINTER
09A2 : FE A8                    cp      PLUSTK          ;[M80] IS IT AN OPERATOR?
09A4 : D8                       ret     c
09A5 : FE B2                    cp      LESSTK+1
09A7 : D0                       ret     nc              ;[M80] NO, ALL DONE
09A8 : FE AF                    cp      GREATK          ;[M80] SOME KIND OF RELATIONAL?
09AA : D2 E2 09                 jp      nc,DORELS       ;[M80] YES, DO IT
09AD : D6 A8                    sub     PLUSTK          ;[M80] SUBTRACT OFFSET FOR FIRST ARITHMETIC
09AF : 5F                       ld      e,a             ;[M80] MUST MULTIPLY BY 3
09B0 : 20 08                    jr      nz,NTPLUS       ;[M80] NOT ADDITION OP
09B2 : 3A AB 38                 ld      a,(VALTYP)      ;[M80] SEE IF LEFT PART IS STRING
09B5 : 3D                       dec     a               ;[M80] SEE IF LEFT PART IS STRING
09B6 : 7B                       ld      a,e             ;[M80] REFETCH OP-VALUE
09B7 : CA 7C 0F                 jp      z,CAT           ;[M80] MUST BE CAT
09BA : 07         [M80] NTPLUS: rlca                    ;[M65] MULTIPLY BY 2
09BB : 83                       add     a,e             ;[M65] BY THREE.
09BC : 5F                       ld      e,a             ;[M65] SET UP FOR LATER
09BD : 21 4C 03   [M65] QPREC1: ld      hl,OPTAB        ;[M80] CREATE INDEX INTO OPTAB
09C0 : 16 00                    ld      d,0             ;[M80] MAKE HIGH BYTE OF OFFSET=0
09C2 : 19                       add     hl,de           ;[M80] ADD IN CALCULATED OFFSET
09C3 : 78                       ld      a,b             ;[M80] [A] GETS OLD PRECEDENCE
09C4 : 56                       ld      d,(hl)          ;[M80] REMEMBER NEW PRECEDENCE
09C5 : BA                       cp      d               ;[M80] OLD-NEW
09C6 : D0                       ret     nc              ;[M80] APPLY OLD OP IF >= PRECEDENCE
09C7 : 23                       inc     hl
09C8 : CD 75 09                 call    CHKNUM
09CB                    L09CB:
09CB : C5                       push    bc
09CC : 01 94 09                 ld      bc,00994H
09CF : C5                       push    bc
09D0 : 43                       ld      b,e
09D1 : 4A                       ld      c,d
09D2 : CD 13 15                 call    L1513
09D5 : 58                       ld      e,b
09D6 : 51                       ld      d,c
09D7 : 4E                       ld      c,(hl)
09D8 : 23                       inc     hl
09D9 : 46                       ld      b,(hl)
09DA : 23                       inc     hl
09DB : C5                       push    bc
09DC : 2A C3 38                 ld      hl,(TENP3)
09DF : C3 88 09                 jp      LPOPER
                                ;
09E2                            DORELS:
09E2 : 16 00            "  "            ld      d,000H
09E4                            L09E4:
09E4 : D6 AF            "  "            sub     0AFH
09E6 : DA D0 0A         "   "           jp      c,L0AD0
09E9 : FE 03            "  "            cp      003H
09EB : D2 D0 0A         "   "           jp      nc,L0AD0
09EE : FE 01            "  "            cp      001H
09F0 : 17               " "             rla
09F1 : AA               " "             xor     d
09F2 : BA               " "             cp      d
09F3 : 57               "W"             ld      d,a
09F4 : DA C4 03         "   "           jp      c,SNERR
09F7 : 22 C3 38         "" 8"           ld      (TENP3),hl
09FA : D7               " "             rst     CHRGET
09FB : 18 E7            "  "            jr      L09E4
                                ;
09FD                    ;[M80] EVALUATE VARIABLE, CONSTANT, FUNCTION CALL
09FD : F7         [M80] EVAL:   rst     HOOKDO
09FE : 09                       add     hl,bc
09FF : AF                       xor     a
0A00 : 32 AB 38                 ld      (VALTYP),a      ;[M65] ASSUME VALUE WILL BE NUMERIC
0A03 : D7                       rst     CHRGET
0A04 : CA D6 03                 jp      z,MOERR         ;[M80] TEST FOR MISSING OPERAND - IF NONE GIVE ERROR
0A07 : DA E5 15                 jp      c,FIN           ;[M80] IF NUMERIC, INTERPRET CONSTANT
0A0A : CD C6 0C                 call    ISLETC          ;[M80] VARIABLE NAME?
0A0D : D2 4E 0A                 jp      nc,ISVAR        ;[M80] AN ALPHABETIC CHARACTER MEANS YES
0A10 : FE A8                    cp      PLUSTK          ;[M80] IGNORE "+"
0A12 : 28 E9                    jr      z,EVAL
0A14 : FE 2E      [M65] QDOT:   cp      '.'             ;[M65] LEADING CHARACTER OF CONSTANT?
0A16 : CA E5 15                 jp      z,FIN
0A19 : FE A9                    cp      MINUTK          ;[M80] NEGATION?
0A1B : CA 3D 0A                 jp      z,DOMIN         ;[M65] SHO IS.
0A1E : FE 22                    cp      '"'             ;STRING CONSTANT?
0A20 : CA 60 0E                 jp      z,STRLTI        ;IF SO BUILD A TEMPORARY DESCRIPTOR
0A23 : FE A6                    cp      0A6H
0A25 : CA 05 0B                 jp      z,L0B05
0A28 : FE A4                    cp      0A4H
0A2A : CA FB 19                 jp      z,L19FB
0A2D : FE A2                    cp      0A2H
0A2F : CA 40 0B                 jp      z,L0B40
0A32 : D6 B2                    sub     0B2H
0A34 : D2 5F 0A                 jp      nc,L0A5F
0A37                    L0A37:
0A37 : CD 83 09                 call    FRMPRN
0A3A : CF                       rst     SYNCHK
0A3B : 29                       .byte   ')'
0A3C : C9                       ret
                                ;
0A3D                            DOMIN:
0A3D : 16 7D            " }"            ld      d,07DH
0A3F : CD 88 09         "   "           call    LPOPER
0A42 : 2A D0 38         "* 8"           ld      hl,(TENP2)
0A45 : E5               " "             push    hl
0A46 : CD 0B 15         "   "           call    NEG
0A49 : CD 75 09         " u "           call    CHKNUM
0A4C : E1               " "             pop     hl
0A4D : C9               " "             ret
                                ;
0A4E                            ISVAR:
0A4E : CD D1 10         "   "           call    PTRGET
0A51 : E5               " "             push    hl
0A52 : EB               " "             ex      de,hl
0A53 : 22 E4 38         "" 8"           ld      (FACLO),hl
0A56 : 3A AB 38         ": 8"           ld      a,(VALTYP)
0A59 : B7               " "             or      a
0A5A : CC 20 15         "   "           call    z,MOVFM
0A5D : E1               " "             pop     hl
0A5E : C9               " "             ret
                                ;
0A5F                            L0A5F:
0A5F : F7               " "             rst     HOOKDO
0A60 : 1B               " "             dec     de
0A61 : FE 18            "  "            cp      018H
0A63 : CA 68 1A         " h "           jp      z,L1A68
0A66 : 06 00            "  "            ld      b,000H
0A68 : 07               " "             rlca
0A69 : 4F               "O"             ld      c,a
0A6A : C5               " "             push    bc
0A6B : D7               " "             rst     CHRGET
0A6C : 79               "y"             ld      a,c
0A6D : FE 29            " )"            cp      029H
0A6F : 38 16            "8 "            jr      c,L0A87
0A71 : CD 83 09         "   "           call    FRMPRN
0A74 : CF               " "             rst     SYNCHK
0A75 : 2C                               .byte   ','
0A76 : CD 76 09         " v "           call    CHKSTR
0A79 : EB               " "             ex      de,hl
0A7A : 2A E4 38         "* 8"           ld      hl,(FACLO)
0A7D : E3               " "             ex      (sp),hl
0A7E : E5               " "             push    hl
0A7F : EB               " "             ex      de,hl
0A80 : CD 54 0B         " T "           call    GETBYT
0A83 : EB               " "             ex      de,hl
0A84 : E3               " "             ex      (sp),hl
0A85 : 18 08            "  "            jr      L0A8F
                                ;
0A87                            L0A87:
0A87 : CD 37 0A         " 7 "           call    L0A37
0A8A : E3               " "             ex      (sp),hl
0A8B : 11 49 0A         " I "           ld      de,00A49H
0A8E : D5               " "             push    de
0A8F                            L0A8F:
0A8F : 01 15 02         "   "           ld      bc,00215H
0A92 : 09               " "             add     hl,bc
0A93 : 4E               "N"             ld      c,(hl)
0A94 : 23               "#"             inc     hl
0A95 : 66               "f"             ld      h,(hl)
0A96 : 69               "i"             ld      l,c
0A97 : E9               " "             jp      (hl)
                                ;
0A98                            L0A98:
0A98 : 15               " "             dec     d
0A99 : FE A9            "  "            cp      0A9H
0A9B : C8               " "             ret     z
0A9C : FE 2D            " -"            cp      02DH
0A9E : C8               " "             ret     z
0A9F : 14               " "             inc     d
0AA0 : FE 2B            " +"            cp      02BH
0AA2 : C8               " "             ret     z
0AA3 : FE A8            "  "            cp      0A8H
0AA5 : C8               " "             ret     z
0AA6 : 2B               "+"             dec     hl
0AA7 : C9               " "             ret
                                ;
0AA8 : F6         [M65] OROP:  .byte   $F6     ;;"OR $AF" leaves non-zero in [A]
0AA9 : AF         [M65] ANDOP:  xor     a       ;;leaves 0 in A
0AAA : F5         [M80] DANDOR: push    af
0AAB : CD 75 09                 call    CHKNUM
0AAE : CD 82 06                 call    FRCINT
0AB1 : F1                       pop     af
0AB2 : EB                       ex      de,hl
0AB3 : C1                       pop     bc
0AB4 : E3                       ex      (sp),hl
0AB5 : EB                       ex      de,hl
0AB6 : CD 23 15                 call    MOVFR
0AB9 : F5                       push    af
0ABA : CD 82 06                 call    FRCINT
0ABD : F1                       pop     af
0ABE : C1                       pop     bc
0ABF : 79                       ld      a,c
0AC0 : 21 21 0B                 ld      hl,00B21H
0AC3 : C2 CB 0A                 jp      nz,L0ACB
0AC6 : A3                       and     e
0AC7 : 4F                       ld      c,a
0AC8 : 78                       ld      a,b
0AC9 : A2                       and     d
0ACA : E9                       jp      (hl)
                                ;
0ACB                            L0ACB:
0ACB : B3               " "             or      e
0ACC : 4F               "O"             ld      c,a
0ACD : 78               "x"             ld      a,b
0ACE : B2               " "             or      d
0ACF : E9               " "             jp      (hl)
                                ;
0AD0                            L0AD0:
0AD0 : 21 E2 0A         "!  "           ld      hl,00AE2H
0AD3 : 3A AB 38         ": 8"           ld      a,(VALTYP)
0AD6 : 1F               " "             rra
0AD7 : 7A               "z"             ld      a,d
0AD8 : 17               " "             rla
0AD9 : 5F               "_"             ld      e,a
0ADA : 16 64            " d"            ld      d,064H
0ADC : 78               "x"             ld      a,b
0ADD : BA               " "             cp      d
0ADE : D0               " "             ret     nc
0ADF : C3 CB 09         "   "           jp      L09CB
                                ;
0AE2 : E4 0A 79         "  y"           call    po,L790A
0AE5 : B7               " "             or      a
0AE6 : 1F               " "             rra
0AE7 : C1               " "             pop     bc
0AE8 : D1               " "             pop     de
0AE9 : F5               " "             push    af
0AEA : CD 77 09         " w "           call    CHKSTR
0AED : 21 FB 0A         "!  "           ld      hl,00AFBH
0AF0 : E5               " "             push    hl
0AF1 : CA 5B 15         " [ "           jp      z,L155B
0AF4 : AF               " "             xor     a
0AF5 : 32 AB 38         "2 8"           ld      (VALTYP),a
0AF8 : C3 FC 0D         "   "           jp      L0DFC
                                ;
0AFB : 3C               "<"             inc     a
0AFC : 8F               " "             adc     a,a
0AFD : C1               " "             pop     bc
0AFE : A0               " "             and     b
0AFF : C6 FF            "  "            add     a,$FF
0B01 : 9F               " "             sbc     a,a
0B02 : C3 F6 14         "   "           jp      FLOAT
                                ;
0B05                            L0B05:
0B05 : 16 5A            " Z"            ld      d,05AH
0B07 : CD 88 09         "   "           call    LPOPER
0B0A : CD 75 09         " u "           call    CHKNUM
0B0D : CD 82 06         "   "           call    FRCINT
0B10 : 7B               "{"             ld      a,e
0B11 : 2F               "/"             cpl
0B12 : 4F               "O"             ld      c,a
0B13 : 7A               "z"             ld      a,d
0B14 : 2F               "/"             cpl
0B15 : CD 21 0B         " ! "           call    L0B21
0B18 : C1               " "             pop     bc
0B19 : C3 94 09         "   "           jp      RETAOP
                                ;
0B1C                            GIVDBL:
0B1C : 7D               "}"             ld      a,l
0B1D : 93               " "             sub     e
0B1E : 4F               "O"             ld      c,a
0B1F : 7C               "|"             ld      a,h
0B20 : 9A               " "             sbc     a,d
0B21                            L0B21:
0B21 : 41               "A"             ld      b,c
0B22                            L0B22:
0B22 : 50               "P"             ld      d,b
0B23                            L0B23:
0B23 : 1E 00            "  "            ld      e,000H
0B25 : 21 AB 38         "! 8"           ld      hl,VALTYP
0B28 : 73               "s"             ld      (hl),e
0B29 : 06 90            "  "            ld      b,090H
0B2B : C3 FB 14         "   "           jp      L14FB
                                ;
0B2E : 3A 46 38         LPOS:   ld      a,(LPTPOS)
0B31 : 18 03                    jr      L0B36
                                ;
0B33 : 3A 00 38       ? POS:    ld      a,(TTYPOS)
0B36                    L0B36:
0B36 : 47                       ld      b,a
0B37 : AF                       xor     a
0B38 : C3 22 0B                 jp      L0B22
                        ;
0B3B : F7             ? DEF:    rst     HOOKDO
0B3C : 0F                       .byte 15
0B3D : C3 C4 03                 jp      SNERR
                                ;
0B40                    L0B40:
0B40 : F7                       rst     HOOKDO
0B41 : 10                       .byte16
0B42 : C3 C4 03                 jp      SNERR

                        ;
                        ; [M65] SUBROUTINE TO SEE IF WE ARE IN DIRECT MODE.
                        ; [M65] AND COMPLAIN IF SO.
                        ;
0B45 : E5               ERRDIR: push    hl
0B46 : 2A 4D 38                 ld      hl,(CURLIN)     ;[M65] DIR MODE HAS [CURLIN]=$FFFF
0B49 : 23                       inc     hl              ;[M65] SO NOW, IS RESULT ZERO?
0B4A : 7C                       ld      a,h
0B4B : B5                       or      l
0B4C : E1                       pop     hl
0B4D : C0                       ret     nz              ;[M65] YES
0B4E : 1E 16                    ld      e,ERRID         ;[M65] INPUT DIRECT ERROR CODE
0B50 : C3 DB 03                 jp      ERROR
                                ;
0B53                            L0B53:
0B53 : D7               " "             rst     CHRGET
0B54                            GETBYT:
0B54 : CD 72 09         " r "           call    FRMNUM
0B57                            CONINT:
0B57 : CD 7E 06         " ~ "           call    L067E
0B5A : 7A               "z"             ld      a,d
0B5B : B7               " "             or      a
0B5C : C2 97 06         "   "           jp      nz,FCERR
0B5F : 2B               "+"             dec     hl
0B60 : D7               " "             rst     CHRGET
0B61 : 7B               "{"             ld      a,e
0B62 : C9               " "             ret
                                ;
0B63 : CD 82 06       ? PEEK:   call    FRCINT
0B66 : CD 88 0B                 call    L0B88
0B69 : 1A                       ld      a,(de)
0B6A : C3 36 0B                 jp      L0B36
                                ;
0B6D : CD 72 09       ? POKE:   call    FRMNUM
0B70 : CD 82 06                 call    FRCINT
0B73 : CD 88 0B                 call    L0B88
0B76 : D5                       push    de
0B77 : CF                       rst     SYNCHK
0B78 : 2C                       .byte   ','
0B79 : CD 54 0B                 call    GETBYT
0B7C : D1                       pop     de
0B7D : 12                       ld      (de),a
0B7E : C9                       ret
                                ;
0B7F : CD 85 09                 call    FRMEVL
0B82 : E5                       push    hl
0B83 : CD 82 06                 call    FRCINT
0B86 : E1                       pop     hl
0B87 : C9                       ret
                                ;
0B88                            L0B88:
0B88 : E5               " "             push    hl
0B89 : 21 FF 2F         "! /"           ld      hl,02FFFH
0B8C : E7               " "             rst     COMPAR
0B8D : E1               " "             pop     hl
0B8E : D2 97 06         "   "           jp      nc,FCERR
0B91 : C9               " "             ret
                                ;
0B92                            BLTU:
0B92 : CD A9 0B         "   "           call    L0BA9
0B95                            L0B95:
0B95 : C5               " "             push    bc
0B96 : E3               " "             ex      (sp),hl
0B97 : C1               " "             pop     bc
0B98                            L0B98:
0B98 : E7               " "             rst     COMPAR
0B99 : 7E               "~"             ld      a,(hl)
0B9A : 02               " "             ld      (bc),a
0B9B : C8               " "             ret     z
0B9C : 0B               " "             dec     bc
0B9D : 2B               "+"             dec     hl
0B9E : 18 F8            "  "            jr      L0B98
                                ;
; THIS ROUTINE IS USED TO MAKE SURE A CERTAIN NUMBER
; OF LOCATIONS REMAIN AVAILABLE FOR THE
; STACK. THE CALL IS :
;       LD      C,number of 2 byte entries necessary
;       CALL    GETSTK
;
; THIS ROUTINE MUST BE CALLED BY ANY ROUTINE WHICH PUTS
; AN ARBITRARY AMOUNT OF STUFF ON THE STACK
; (I.E. ANY RECURSIVE ROUTINE LIKE FRMEVL)
; IT IS ALSO CALLED BY ROUTINES SUCH AS "GOSUB" AND "FOR"
; WHICH MAKE PERMANENT ENTRIES ON THE STACK
; ROUTINES WHICH MERELY USE AND FREE UP THE GUARANTEED
; NUMLEV STACK LOCATIONS NEED NOT CALL THIS
;
0BA0 : E5       GETSTK: push    hl              ;SAVE [H,L]
0BA1 : 2A DA 38         ld      hl,(STREND)
0BA4 : 06 00            ld      b,000H
0BA6 : 09               add     hl,bc
0BA7 : 09               add     hl,bc           ;SEE IF WE CAN HAVE THIS MANY
0BA8 : 3E E5            ld      a,0E5H          ;;used in calculation below
0BAA : 3E D0            ld      a,208           ;EXAMINE [H,L] TO MAKE SURE
0BAC : 95               sub     l               ; AT LEAST 104 LOCATIONS
0BAD : 6F               ld      l,a             ; REMAIN BETWEEN IT AND THE
0BAE : 3E FF            ld      a,$FF           ; TOP OF THE STACK
0BB0 : 9C               sbc     a,h
0BB1 : 67               ld      h,a             ;NOW SEE IF [SP] IS LARGER
0BB2 : 38 03            jr      c,L0BB7         ;IN CASE [H,L] WAS TOO BIG
0BB4 : 39               add     hl,sp           ;IF SO, CARRY WILL BE SET
0BB5 : E1               pop     hl              ;GET BACK ORIGINAL [H,L]
0BB6 : D8               ret     c               ;WAS OK?

0BB7                            L0BB7:
0BB7 : 11 0C 00         "   "           ld      de,ERROM
0BBA : C3 DB 03         "   "           jp      ERROR
                                ;
0BBD : C0             ? NEW:    ret     nz
0BBE                    L0BBE:
0BBE : F7                       rst     HOOKDO
0BBF : 0C                       inc     c
0BC0 : 2A 4F 38                 ld      hl,(TXTTAB)
0BC3 : AF                       xor     a
0BC4 : 77                       ld      (hl),a
0BC5 : 23                       inc     hl
0BC6 : 77                       ld      (hl),a
0BC7 : 23                       inc     hl
0BC8 : 22 D6 38                 ld      (VARTAB),hl

0BCB : 2A 4F 38   [M80] RUNC:   ld      hl,(TXTTAB)
0BCE : 2B                       dec     hl

                        ;[M80] L0CD8 IS A SUBROUTINE WHICH INITIALIZES THE VARIABLE AND
                        ;[M80] ARRAY SPACE BY RESETING ARYTAB [THE END OF SIMPLE VARIABLE SPACE]
                        ;[M80] AND STREND [THE END OF ARRAY STORAGE]. IT FALLS INTO STKINI
                        ;[M80] WHICH RESETS THE STACK. [H,L] IS PRESERVED.
                        ;
0BCF : 22 CE 38   [M80] L0CD8: ld      (SAVTXT),hl
0BD2 : 2A AD 38                 ld      hl,(MEMSIZ)     ;[M65] FREE UP STRING SPACE
0BD5 : 22 C1 38                 ld      (FRETOP),hl
0BD8 : AF                       xor     a
0BD9 : CD 05 0C                 call    RESTOR          ;[M65] RESTOR DATA
0BDC : 2A D6 38                 ld      hl,(VARTAB)     ;[M65] LIBERATE THE
0BDF : 22 D8 38                 ld      (ARYTAB),hl     ;[M65] VARIABLES AND
0BE2 : 22 DA 38                 ld      (STREND),hl     ;[M65] ARRAYS
                        ;
                        ;[M80] STKINI RESETS THE STACK POINTER ELIMINATING
                        ;[M80] GOSUB & FOR CONTEXT.  STRING TEMPORARIES ARE FREED
                        ;[M80] UP, SUBFLG IS RESET, CONTINUING IS DISALLOWED,
                        ;[M80] AND A DUMMY ENTRY IS PUT ON THE STACK. THIS IS SO
                        ;[M80] FNDFOR WILL ALWAYS FIND A NON-"FOR" ENTRY AT THE BOTTOM
                        ;[M80] OF THE STACK. [A]=0 AND [D,E] IS PRESERVED.
                        ;
0BE5 : C1         [M80] STKINI: pop     bc              ;[M80] GET RETURN ADDRESS HERE
0BE6 : 2A 4B 38                 ld      hl,(TOPMEM)
0BE9 : F9                       ld      sp,hl           ;[M80] INITIALIZE STACK
0BEA : CD D8 1F                 call    STKSAV
0BED : 22 AF 38                 ld      (TEMPPT),hl
0BF0 : CD BE 19                 call    FINLPT
0BF3 : AF                       xor     a
0BF4 : 6F                       ld      l,a
0BF5 : 67                       ld      h,a
0BF6 : 22 D4 38                 ld      (OLDTXT),hl
0BF9 : 32 CB 38                 ld      (SUBFLG),a
0BFC : 22 DE 38                 ld      (X38DE),hl
0BFF : E5                       push    hl
0C00 : C5                       push    bc
0C01 : 2A CE 38         [M65] STKRTS: ld      hl,(SAVTXT)
0C04 : C9                             ret
                                ;
0C05 : EB         [M80] RESTOR: ex      de,hl           ;[M80] SAVE [H,L] IN [D,E]
0C06 : 2A 4F 38                 ld      hl,(TXTTAB)
0C09 : 28 0E                    jr      z,BGNRST        ;[M80] RESTORE DATA POINTER TO BEGINNING OF PROGRAM
0C0B : EB                       ex      de,hl
0C0C : CD 9C 06                 call    SCNLIN
0C0F : E5                       push    hl
0C10 : CD 9F 04                 call    FNDLIN
0C13 : 60                       ld      h,b             ;[M80] GET POINTER TO LINE IN [H,L]
0C14 : 69                       ld      l,c
0C15 : D1                       pop     de              ;[M80] TEXT POINTER BACK TO [D,E]
0C16 : D2 F3 06                 jp      nc,USERR        ;[M80] SHOULD HAVE FOUND LINE
0C19 : 2B               BGNRST: dec     hl
0C1A                    L0C1A:
0C1A : 22 DC 38                 ld      (DATPTR),hl
0C1D : EB                       ex      de,hl
0C1E : C9                       ret
                        ;
0C1F : C0         [M80] STOP:   ret     nz              ;[M80] MAKE SURE "STOP" STATEMENTS HAVE A TERMINATOR
0C20 : F6                       .byte  $20              ;;"OR" to skip next instruction
0C21 : C0         [M80] ENDS:   ret nz                  ;[M80] MAKE SURE "END" STATEMENTS HAVE A TERMINATOR
0C22 : 22 CE 38                 ld      (SAVTXT),hl
0C25 : 21 F6 FF                 ld      hl,$FFF6        ;;Set Direct Mode
0C28 : C1                       pop     bc              ;[M80] POP OFF NEWSTT ADDRESS
0C29
0C29 : 2A 4D 38   [M80] ENDCON: ld      hl,(CURLIN)     ;[M80] SAVE CURLIN
0C2C : F5                       push    af
0C2D : 7D                       ld      a,l
0C2E : A4                       and     h               ;[M80] SEE IF DIRECT
0C2F : 3C                       inc     a
0C30 : 28 09                    jr      z,DIRIS         ;[M80] IF NOT SET UP FOR CONTINUE
0C32 : 22 D2 38                 ld      (OLDLIN),hl     ;[M80] SAVE OLD LINE #
0C35 : 2A CE 38                 ld      hl,(SAVTXT)     ;[M80] GET POINTER TO START OF STATEMENT
0C38 : 22 D4 38                 ld      (OLDTXT),hl     ;[M80] SAVE IT
0C3B
0C3B : CD BE 19   [M80] DIRIS:  call    FINLPT
0C3E : CD DE 19                 call    CRDONZ          ;[M80] PRINT CR IF TTYPOS .NE. 0
0C41 : F1                       pop     af              ;[M80] GET BACK ^C FLAG
0C42 : 21 73 03                 ld      hl,BRKTXT       ;[M80] "BREAK"
0C45 : C2 F4 03                 jp      nz,ERRFIN       ;[M80] CALL STROUT AND FALL INTO READY
0C48 : C3 02 04                 jp      READY
                        ;
0C4B : 2A D4 38   [M80] CONT:   ld      hl,(OLDTXT)     ;[M80] ZERO INDICATES THERE IS NOTHING TO CONTINUE
0C4E : 7C                       ld      a,h             ;[M80] "STOP","END",TYPING CRLF
0C4F : B5                       or      l               ;[M80] TO "INPUT" AND ^C SETUP OLDTXT
0C50 : 11 20 00         RESERR: ld      de,ERRCN        ;[M80] "CAN'T CONTINUE"
0C53 : CA DB 03                 jp      z,ERROR
0C56 : ED 5B D2 38              ld      de,(OLDLIN)
0C5A : ED 53 4D 38              ld      (CURLIN),de     ;[M80] SET UP OLD LINE # AS CURRENT LINE #
0C5E : C9                       ret

;;This looks like orphan code
0C5F : C3 97 06                 jp      FCERR

0C62   3E               CSAVES: .byte   $3E             ;"LD A,$AF"
0C63 : AF               CLOADS: .byte   $AF             ;"XOR A"
0C64 : B7                       or      a
0C65 : F5                       push    af
0C66 : D7                       rst     CHRGET
0C67 : 3E 01                    ld      a,001H
0C69 : 32 CB 38                 ld      (SUBFLG),a
0C6C : CD D1 10                 call    PTRGET
0C6F : C2 97 06                 jp      nz,FCERR
0C72 : 32 CB 38                 ld      (SUBFLG),a
0C75 : CD 75 09                 call    CHKNUM
0C78 : F1                       pop     af
0C79 : E5                       push    hl
0C7A : F5                       push    af
0C7B : C5                       push    bc
0C7C : 06 23                    ld      b,023H
0C7E : 28 12                    jr      z,L0C92
0C80 : CD 7F 1B                 call    L1B7F
0C83 : CD BC 1B                 call    L1BBC
0C86 : 78                       ld      a,b
0C87 : CD 87 1B                 call    L1B87
0C8A : CD 87 1B                 call    L1B87
0C8D : CD 87 1B                 call    L1B87
0C90 : 18 11                    jr      L0CA3
                                ;
0C92                            L0C92:
0C92 : CD 2E 1B         " . "           call    L1B2E
0C95 : CD CE 1B         "   "           call    L1BCE
0C98                            L0C98:
0C98 : 0E 06            "  "            ld      c,006H
0C9A                            L0C9A:
0C9A : CD 4D 1B         " M "           call    L1B4D
0C9D : B8               " "             cp      b
0C9E : 20 F8            "  "            jr      nz,L0C98
0CA0 : 0D               " "             dec     c
0CA1 : 20 F7            "  "            jr      nz,L0C9A
0CA3                            L0CA3:
0CA3 : E1               " "             pop     hl
0CA4 : EB               " "             ex      de,hl
0CA5 : 19               " "             add     hl,de
0CA6 : EB               " "             ex      de,hl
0CA7 : 4E               "N"             ld      c,(hl)
0CA8 : 06 00            "  "            ld      b,000H
0CAA : 09               " "             add     hl,bc
0CAB : 09               " "             add     hl,bc
0CAC : 23               "#"             inc     hl
0CAD                            L0CAD:
0CAD : E7               " "             rst     COMPAR
0CAE : 28 0D            "( "            jr      z,L0CBD
0CB0 : F1               " "             pop     af
0CB1 : F5               " "             push    af
0CB2 : 7E               "~"             ld      a,(hl)
0CB3 : C4 8A 1B         "   "           call    nz,L1B8A
0CB6 : CC 4D 1B         " M "           call    z,L1B4D
0CB9 : 77               "w"             ld      (hl),a
0CBA : 23               "#"             inc     hl
0CBB : 18 F0            "  "            jr      L0CAD
                                ;
0CBD                            L0CBD:
0CBD : F1               " "             pop     af
0CBE : C2 1C 1C         "   "           jp      nz,L1C1C
0CC1 : E1               " "             pop     hl
0CC2 : C3 7E 1B         " ~ "           jp      L1B7E
                                ;
                        ;
                        ;[M80] TEST FOR A LETTER / CARRY ON=NOT A LETTER
                        ;[M80] 		     CARRY OFF=A LETTER
                        ;
0CC5 : 7E         [M80] ISLET:  ld      a,(hl)
0CC6 : FE 41      [M65] ISLETC: cp      'A'
0CC8 : D8                       ret     c               ;[M80] IF LESS THAN "A", RETURN EARLY
0CC9 : FE 5B                    cp      'Z'+1
0CCB : 3F                       ccf
0CCC : C9                       ret

0CCD : F7               CLEAR:  rst     HOOKDO
0CCE : 0B                       dec     bc
0CCF : CA CF 0B                 jp      z,L0CD8
0CD2 : CD 7B 06                 call    L067B
0CD5 : 2B                       dec     hl
0CD6 : D7                       rst     CHRGET
0CD7 : E5                       push    hl
0CD8 : 2A AD 38         L0CD8: ld      hl,(MEMSIZ)
0CDB : 28 0E                    jr      z,L0CEB
0CDD : E1                       pop     hl
0CDE : CF                       rst     SYNCHK
0CDF : 2C                       .byte   ','
0CE0 : D5                       push    de
0CE1 : CD 7B 06                 call    L067B
0CE4 : 2B                       dec     hl
0CE5 : D7                       rst     CHRGET
0CE6 : C2 C4 03                 jp      nz,SNERR
0CE9 : E3                       ex      (sp),hl
0CEA : EB                       ex      de,hl
0CEB                    L0CEB:
0CEB : 7D                       ld      a,l
0CEC : 93                       sub     e
0CED : 5F                       ld      e,a
0CEE : 7C                       ld      a,h
0CEF : 9A                       sbc     a,d
0CF0 : 57                       ld      d,a
0CF1 : DA B7 0B                 jp      c,L0BB7
0CF4 : E5                       push    hl
0CF5 : 2A D6 38                 ld      hl,(VARTAB)
0CF8 : 01 28 00                 ld      bc,00028H
0CFB : 09                       add     hl,bc
0CFC : E7                       rst     COMPAR
0CFD : D2 B7 0B                 jp      nc,L0BB7
0D00 : EB                       ex      de,hl
0D01 : 22 4B 38                 ld      (TOPMEM),hl
0D04 : E1                       pop     hl
0D05 : 22 AD 38                 ld      (MEMSIZ),hl
0D08 : E1                       pop     hl
0D09 : C3 CF 0B                 jp      L0CD8
                        ;
0D0C : 7D                       ld      a,l
0D0D : 93                       sub     e
0D0E : 5F                       ld      e,a
0D0F : 7C                       ld      a,h
0D10 : 9A                       sbc     a,d
0D11 : 57                       ld      d,a
0D12 : C9                       ret
                                ;
0D13 : 11 00 00         NEXT:   ld      de,00000H
0D16                    L0D16:
0D16 : C4 D1 10                 call    nz,PTRGET
0D19 : 22 CE 38                 ld      (SAVTXT),hl
0D1C : CD 9F 03                 call    FNDFOR
0D1F : C2 CA 03                 jp      nz,NFERR
0D22 : F9                       ld      sp,hl
0D23 : D5                       push    de
0D24 : 7E                       ld      a,(hl)
0D25 : F5                       push    af
0D26 : 23                       inc     hl
0D27 : D5                       push    de
0D28 : CD 20 15                 call    MOVFM
0D2B : E3                       ex      (sp),hl
0D2C : E5                       push    hl
0D2D : CD 53 12                 call    L1253
0D30 : E1                       pop     hl
0D31 : CD 3A 15                 call    MOVMF
0D34 : E1                       pop     hl
0D35 : CD 31 15                 call    MOVRM
0D38 : E5                       push    hl
0D39 : CD 5B 15                 call    L155B
0D3C : E1                       pop     hl
0D3D : C1                       pop     bc
0D3E : 90                       sub     b
0D3F : CD 31 15                 call    MOVRM
0D42 : 28 09                    jr      z,L0D4D
0D44 : EB                       ex      de,hl
0D45 : 22 4D 38                 ld      (CURLIN),hl
0D48 : 69                       ld      l,c
0D49 : 60                       ld      h,b
0D4A : C3 28 06                 jp      L0628
                                ;
0D4D                            L0D4D:
0D4D : F9               " "             ld      sp,hl
0D4E : 2A CE 38         "* 8"           ld      hl,(SAVTXT)
0D51 : 7E               "~"             ld      a,(hl)
0D52 : FE 2C            " ,"            cp      02CH
0D54 : C2 2C 06         " , "           jp      nz,L062C
0D57 : D7               " "             rst     CHRGET
0D58 : CD 16 0D         "   "           call    L0D16

                        ;[M80] THIS IS THE LINE INPUT ROUTINE IT READS CHARACTERS INTO BUF
                        ;[M80] THE ROUTINE IS ENTERED AT INLIN, AT QINLIN TO TYPE A QUESTION MARK
                        ;[M80] AND A SPACE FIRST
                        ;
0D5B
0D5B : 3E 3F      [M80] QINLIN: ld      a,'?'
0D5D : DF                       rst     CHROUT
0D5E : 3E 20                    ld      a,' '
0D60 : DF                       rst     CHROUT
0D61 : C3 85 0D   {M65} GINLIN: jp      INLIN           ;;;For relative jumps
                                ;
0D64
0D64 : 3A 4A 38   [M80] RUBOUT: ld      a,(CHARC)       ;ARE WE ALREADY RUBBING OUT?
0D67 : B7                       or      a               ;SET CC'S
0D68 : 3E 5C                    ld      a,'\'           ;GET READY TO TYPE BACKSLASH
0D6A : 32 4A 38                 ld      (CHARC),a       ;MAKE RUBSW NON-ZERO IF NOT ALREADY
0D6D : 20 05                    jr      nz,NOTBEG       ;NOT RUBBING BACK TO BEGGINING
0D6F : 05                       dec     b               ;AT BEGINNING OF LINE?
0D70 : 28 13                    jr      z,INLIN         ;SET FIRST BYTE IN BUF TO ZERO
0D72 : DF                       rst     CHROUT          ;SEND BACKSLASH
0D73 : 04                       inc     b               ;EFFECTIVELY SKIP NEXT INSTRUCTION
0D74 : 05         [M80] NOTBEG: dec     b               ;BACK UP CHAR COUNT BY 1
0D75 : 2B                       dec     hl              ;AND LINE POSIT
0D76 : 28 09                    jr      z,INLINN         ;AND RE-SET UP INPUT
0D78 : 7E                       ld      a,(hl)          ;OTHERWISE GET CHAR TO ECHO
0D79 : DF                       rst     CHROUT          ;SEND IT
0D7A : 18 12                    jr      INLINC          ;AND GET NEXT CHAR

0D7C
0D7C : 05         [M65] LINLIN: dec     b               ;[M80] AT START OF LINE?
0D7D : 2B         {M80] LINLN2: dec     hl              ;[M65] BACKARROW SO BACKUP PNTR AND
0D7E : DF                       rst     CHROUT          ;[M80] SEND BACKSPACE
0D7F : 20 0D                    jr      nz,INLINC
0D81 : DF         [M80] INLINN: rst     CHROUT

0D82 : CD EA 19   [M80] INLINU: call    CRDO            ;[M80] TYPE A CRLF
0D85 : 21 60 38   [M80] INLIN:  ld      hl,BUF
0D88 : 06 01                    ld      b,1             ;[M80] CHARACTER COUNT
0D8A : AF                       xor     a               ;[M80] CLEAR TYPE AHEAD CHAR
0D8B : 32 4A 38                 ld      (CHARC),a       ;[M80] LIKE SO
0D8E : CD DA 19   [M80] INLINC: call    INCHR           ;[M80] GET A CHAR
0D91 : 4F         {M80} INLNC1: ld      c,a             ;[M80] SAVE CURRENT CHAR IN [C]
0D92 : FE 7F                    cp      CHRDEL          ;[M80] CHARACTER DELETE?
0D94 : 28 CE                    jr      z,RUBOUT        ;[M80] DO IT
0D96 : 3A 4A 38                 ld      a,(CHARC)       ;[M80] BEEN DOING A RUBOUT?
0D99 : B7                       or      a               ;[M80] SET CC'S
0D9A : 28 07                    jr      z,NOTRUB        ;[M80] NOPE.
0D9C : 3E 5C                    ld      a,'\'           ;[M80] GET READY TO TYPE SLASH
0D9E : DF                       rst     CHROUT          ;[M80] SEND IT
0D9F : AF                       xor     a               ;[M80] CLEAR RUBSW
0DA0 : 32 4A 38                 ld      (CHARC),a       ;[M80] LIKE SO
0DA3 : 79         [M80] NOTRUB: ld      a,c             ;[M80] GET BACK CURRENT CHAR
;;The following comment is in both [M65] and [M80], so it likely ended up in the Aquarius
;;source code as well. Bob Albrecht is a key figure in the early history of microcomputers.
;;He founded the People's Computer Company, a newsletter that operated with a walk-in
;;storefront to teach children "about having fun with computers" and later became
;;Dr. Dobb's Journal of Computer Calisthenics and Orthodontia.  He brought the first
;;Altair 8800 to the Homebrew Computer Club and was one of the main supporters
;;of the effort to make Tiny BASIC a standard on many early machines.
0DA4 : FE 07      {M80} CHKFUN: cp      CHRBEL          ;[M80] IS IT BOB ALBRECHT RINGING THE BELL
0DA6 : 28 41                    jr      z,GOODCH        ;[M80] FOR SCHOOL KIDS?
0DA8 : FE 03                    cp      CHRCAN          ;[M80] CONTROL-C?
0DAA : CC EA 19                 call    z,CRDO          ;[M80] TYPE CHAR, AND CRLFT
0DAD : 37                       scf                     ;[M80] RETURN WITH CARRY ON
0DAE : C8                       ret     z               ;[M80] IF IT WAS CONTROL-C
0DAF : FE 0D                    cp      CHRRET
0DB1 : CA E5 19                 jp      z,GFNINL        ;[M80] IS IT A CARRIAGE RETURN?
0DB4 : FE 15                    cp      CHRLDL          ;[M80] ;LINE DELETE? (CONTROL-U)
0DB6 : CA 82 0D                 jp      z,INLINU        ;[M80] GO DO IT
0DB9 : 00                       nop                     ;;;Whatever was removed isn't in the
0DBA : 00                       nop                     ;;;available source codes
0DBB : 00                       nop
0DBC : 00                       nop
0DBD : 00                       nop
0DBE : FE 08                    cp      CHRBAK          ;[M80] BACKSPACE? (CONTROL-H)?
0DC0 : CA 7C 0D                 jp      z,LINLIN        ;[M65] YES
0DC3 : FE 18                    cp      CTLX            ;[M80] AT START OF LINE?
0DC5 : 20 05                    jr      nz,NTCTLX       ;[M80] IS IT CONTROL-X (LINE DELETE)
0DC7 : 3E 23                    ld      a,'#'           ;[M80] SEND NUMBER SIGN
0DC9 : C3 81 0D                 jp      INLINN          ;[M80] SEND # SIGN AND ECHO
                                ;
0DCC                            NTCTLX:
0DCC : FE 12            "  "            cp      012H
0DCE : 20 14            "  "            jr      nz,L0DE4
0DD0 : C5               " "             push    bc
0DD1 : D5               " "             push    de
0DD2 : E5               " "             push    hl
0DD3 : 36 00            "6 "            ld      (hl),0
0DD5 : CD EA 19         "   "           call    CRDO
0DD8 : 21 60 38         "!`8"           ld      hl,BUF
0DDB : CD 9D 0E         "   "           call    STROUT
0DDE : E1               " "             pop     hl
0DDF : D1               " "             pop     de
0DE0 : C1               " "             pop     bc
0DE1 : C3 8E 0D         "   "           jp      INLINC
                                ;
0DE4                            L0DE4:
0DE4 : FE 20            "  "            cp      020H
0DE6 : DA 8E 0D         "   "           jp      c,INLINC
0DE9                            GOODCH:
0DE9 : 78               "x"             ld      a,b
0DEA : FE 49            " I"            cp      049H
0DEC : 3E 07            "> "            ld      a,007H
0DEE : D2 F8 0D         "   "           jp      nc,L0DF8
0DF1 : 79               "y"             ld      a,c
0DF2 : 71               "q"             ld      (hl),c
0DF3 : 32 CC 38         "2 8"           ld      (X38CC),a
0DF6 : 23               "#"             inc     hl
0DF7 : 04               " "             inc     b
0DF8                            L0DF8:
0DF8 : DF               " "             rst     CHROUT
0DF9 : C3 8E 0D         "   "           jp      INLINC
                                ;
0DFC                            L0DFC:
0DFC : D5               " "             push    de
0DFD : CD C9 0F         "   "           call    FREFAC
0E00 : 7E               "~"             ld      a,(hl)
0E01 : 23               "#"             inc     hl
0E02 : 23               "#"             inc     hl
0E03 : 4E               "N"             ld      c,(hl)
0E04 : 23               "#"             inc     hl
0E05 : 46               "F"             ld      b,(hl)
0E06 : D1               " "             pop     de
0E07 : C5               " "             push    bc
0E08 : F5               " "             push    af
0E09 : CD CD 0F         "   "           call    FRETMP
0E0C : CD 31 15         " 1 "           call    MOVRM
0E0F : F1               " "             pop     af
0E10 : 57               "W"             ld      d,a
0E11 : E1               " "             pop     hl
0E12                            L0E12:
0E12 : 7B               "{"             ld      a,e
0E13 : B2               " "             or      d
0E14 : C8               " "             ret     z
0E15 : 7A               "z"             ld      a,d
0E16 : D6 01            "  "            sub     001H
0E18 : D8               " "             ret     c
0E19 : AF               " "             xor     a
0E1A : BB               " "             cp      e
0E1B : 3C               "<"             inc     a
0E1C : D0               " "             ret     nc
0E1D : 15               " "             dec     d
0E1E : 1D               " "             dec     e
0E1F : 0A               " "             ld      a,(bc)
0E20 : 03               " "             inc     bc
0E21 : BE               " "             cp      (hl)
0E22 : 23               "#"             inc     hl
0E23 : 28 ED            "( "            jr      z,L0E12
0E25 : 3F               "?"             ccf
0E26 : C3 F1 14         "   "           jp      L14F1
                                ;
0E29 : CD 75 09         STR:    call    CHKNUM
0E2C : CD 80 16                 call    L1680
0E2F : CD 5F 0E                 call    STRLIT
0E32 : CD C9 0F                 call    FREFAC
0E35 : 01 1D 10                 ld      bc,0101DH
0E38 : C5                       push    bc
0E39                    L0E39:
0E39 : 7E                       ld      a,(hl)
0E3A : 23                       inc     hl
0E3B : 23                       inc     hl
0E3C : E5                       push    hl
0E3D : CD B3 0E                 call    GETSPA
0E40 : E1                       pop     hl
0E41 : 4E                       ld      c,(hl)
0E42 : 23                       inc     hl
0E43 : 46                       ld      b,(hl)
0E44 : CD 53 0E                 call    STRAD2
0E47 : E5                       push    hl
0E48 : 6F                       ld      l,a
0E49 : CD BD 0F                 call    L0FBD
0E4C : D1                       pop     de
0E4D : C9                       ret

0E4E                            STRIN1:
0E4E : 3E 01            "> "            ld      a,001H
0E50                            L0E50:
0E50 : CD B3 0E         "   "           call    GETSPA
0E53                            STRAD2:
0E53 : 21 BD 38         "! 8"           ld      hl,DSCTMP
0E56 : E5               " "             push    hl
0E57 : 77               "w"             ld      (hl),a
0E58 : 23               "#"             inc     hl
0E59 : 23               "#"             inc     hl
0E5A : 73               "s"             ld      (hl),e
0E5B : 23               "#"             inc     hl
0E5C : 72               "r"             ld      (hl),d
0E5D : E1               " "             pop     hl
0E5E : C9               " "             ret
                                ;
                        ;
                        ;[M80] STRLT2 TAKES THE STRING LITERAL WHOSE FIRST CHARACTER
                        ;[M80] IS POINTED BY [H,L]+1 AND BUILDS A DESCRIPTOR FOR IT.
                        ;[M80] THE DESCRIPTOR IS INITIALLY BUILT IN DSCTMP, BUT PUTNEW
                        ;[M80] TRANSFERS IT INTO A TEMPORARY AND LEAVES A POINTER
                        ;[M80] AT THE TEMPORARY IN FACLO. THE CHARACTERS OTHER THAN
                        ;[M80] ZERO THAT TERMINATE THE STRING SHOULD BE SET UP IN [B]
                        ;[M80] AND [D]. IT THE TERMINATOR IS A QUOTE, THE QUOTE IS SKIPPED
                        ;[M80] OVER. LEADING QUOTES SHOULD BE SKIPPED BEFORE CALL. ON RETURN
                        ;[M80] THE CHARACTER AFTER THE STRING LITERAL IS POINTED TO
                        ;[M80] BY [H,L] AND IS IN [A], BUT THE CONDITION CODES ARE
                        ;[M80] NOT SET UP.
                        ;
0E5F : 2B         [M80] STRLIT: dec     hl              ;;Back up to '"'
0E60 : 06 22      [M80] STRLTI: ld      b,'"'           ;[M80] ASSUME STR ENDS ON QUOTE
0E62 : 50         {M80} STRLT3: ld      d,b
0E63 : E5         [M80] STRLT2: push    hl              ;[M80] SAVE POINTER TO START OF LITERAL
0E64 : 0E FF                    ld      c,255           ;[M80] INITIALIZE CHARACTER COUNT
0E66 : 23         [M80] STRGET: inc     hl              ;;Move past '"'
0E67 : 7E                       ld      a,(hl)          ;[M80] GET CHAR
0E68 : 0C                       inc     c               ;[M80] BUMP CHARACTER COUNT
0E69 : B7                       or      a               ;[M80] IF 0, (END OF LINE) DONE
0E6A : 28 06                    jr      z,STRFIN        ;[M80] TEST
0E6C : BA                       cp      d
0E6D : 28 03                    jr      z,STRFIN
0E6F : B8                       cp      b               ;[M80] CLOSING QUOTE
0E70 : 20 F4                    jr      nz,STRGET       ;[M80] NO, GO BACK FOR MORE
0E72 : FE 22      [M80] STRFIN: cp      '"'             ;[M80] IF QUOTE TERMINATES THE STRING
0E74 : CC 6B 06                 call    z,CHRGTR        ;[M80] SKIP OVER THE QUOTE
0E77 : E3                       ex      (sp),hl         ;[M80] SAVE POINTER AT END OF STRING
0E78 : 23                       inc     hl
0E79 : EB                       ex      de,hl           ;[M80] GET POINTER TO TEMP
0E7A : 79                       ld      a,c             ;[M80] GET CHARACTER COUNT IN A
0E7B : CD 53 0E                 call    STRAD2          ;[M80] SAVE STR INFO
                        ;
                        ;[M80] SOME STRING FUNCTION IS RETURNING A RESULT IN DSCTMP
                        ;[M80] WE WANT TO SETUP A TEMP DESCRIPTOR WITH DCSTMP IN IT
                        ;[M80] PUT A POINTER TO THE DESCRIPTOR IN FACLO AND FLAG THE
                        ;[M80] RESULT AS TYPE STRING
                        ;
0E7E : 11 BD 38   [M80] PUTNEW: ld      de,DSCTMP       ;[M80] [D,E] POINT AT RESULT DESCRIPTOR
0E81 : 2A AF 38                 ld      hl,(TEMPPT)     ;[M80] [H,L]=POINTER TO FIRST FREE TEMP
0E84 : 22 E4 38                 ld      (FACLO),hl      ;[M80] POINTER AT WHERE RESULT DESCRIPTOR WILL BE
0E87 : 3E 01                    ld      a,1
0E89 : 32 AB 38                 ld      (VALTYP),a      ;[M80] FLAG THIS AS A STRING
0E8C : CD 3D 15                 call    VMOVE           ;[M80] AND MOVE THE VALUE INTO A TEMPORARY
0E8F : E7                       rst     COMPAR          ;;IF TEMPPT POINTS TO DSCTMP, THERE ARE NO FREE TEMPS
0E90 : 22 AF 38                 ld      (TEMPPT),hl     ;[M80] SAVE NEW TEMPORARY POINTER
0E93 : E1                       pop     hl              ;[M80] GET THE TEXT POINTER
0E94 : 7E                       ld      a,(hl)          ;[M80] GET CURRENT CHARACTER INTO [A]
0E95 : C0                       ret     nz
0E96 : 11 1E 00                 ld      de,ERRST        ;[M80] "STRING TEMPORARY" ERROR
0E99 : C3 DB 03                 jp      ERROR           ;[M80] GO TELL HIM
                                ;
                                ;[M80] PRINT THE STRING POINTED TO BY [H,L] WHICH ENDS WITH A ZERO
                                ;[M80] IF THE STRING IS BELOW DSCTMP IT WILL BE COPIED INTO STRING SPACE
                                ;
0E9C : 23               STROUI: inc     hl              ;[M80] POINT AT NEXT CHARACTER
0E9D : CD 5F 0E   [M80] STROUT: call    STRLIT          ;[M80] GET A STRING LITERAL
                                ;
                                ; PRINT THE STRING WHOSE DESCRIPTOR IS POINTED TO BY FACLO.
                                ;
0EA0 : CD C9 0F   [M80] STRPRT: call    FREFAC          ;[M80] RETURN TEMP POINTER BY FACLO
0EA3 : CD 31 15                 call    MOVRM           ;[M80] [D]=LENGTH [B,C]=POINTER AT DATA
0EA6 : 1C                       inc     e               ;[M80] CHECK FOR NULL STRING
0EA7 : 1D         [M80' STRPR2: dec     e               ;[M80] DECREMENT THE LENGTH
0EA8 : C8                       ret     z               ;[M80] ALL DONE
0EA9 : 0A                       ld      a,(bc)          ;[M80] GET CHARACTER TO PRINT
0EAA : DF                       rst     CHROUT
0EAB : FE 0D                    cp      CHRRET
0EAD : CC F0 19                 call    z,CRFIN         ;[M65] TYPE REST OF CARRIAGE RETURN
0EB0 : 03                       inc     bc              ;[M80] POINT TO THE NEXT CHARACTER
0EB1 : 18 F4                    jr      STRPR2          ;[M80] AND PRINT IT...

0EB3                    GETSPA:
0EB3 : B7                       or      a
0EB4 : 0E F1                    ld      c,0F1H
0EB6 : F5                       push    af
0EB7 : 2A 4B 38                 ld      hl,(TOPMEM)
0EBA : EB                       ex      de,hl
0EBB : 2A C1 38                 ld      hl,(FRETOP)
0EBE : 2F                       cpl
0EBF : 4F                       ld      c,a
0EC0 : 06 FF                    ld      b,$FF
0EC2 : 09                       add     hl,bc
0EC3 : 23                       inc     hl
0EC4 : E7                       rst     COMPAR
0EC5 : 38 07                    jr      c,L0ECE
0EC7 : 22 C1 38                 ld      (FRETOP),hl
0ECA : 23                       inc     hl
0ECB : EB                       ex      de,hl
0ECC : F1                       pop     af
0ECD : C9                       ret
                                ;
0ECE                            L0ECE:
0ECE : F1               " "             pop     af
0ECF : 11 1A 00         "   "           ld      de,ERROS
0ED2 : CA DB 03         "   "           jp      z,ERROR
0ED5 : BF               " "             cp      a
0ED6 : F5               " "             push    af
0ED7 : 01 B5 0E         "   "           ld      bc,00EB5H
0EDA : C5               " "             push    bc
0EDB                            L0EDB:
0EDB : 2A AD 38         "* 8"           ld      hl,(MEMSIZ)
0EDE                            L0EDE:
0EDE : 22 C1 38         "" 8"           ld      (FRETOP),hl
0EE1 : 21 00 00         "!  "           ld      hl,00000H
0EE4 : E5               " "             push    hl
0EE5 : 2A DA 38         "* 8"           ld      hl,(STREND)
0EE8 : E5               " "             push    hl
0EE9 : 21 B1 38         "! 8"           ld      hl,038B1H
0EEC : ED 5B AF 38      " [ 8"          ld      de,(TEMPPT)
0EF0 : E7               " "             rst     COMPAR
0EF1 : 01 EC 0E         "   "           ld      bc,00EECH
0EF4 : C2 32 0F         " 2 "           jp      nz,L0F32
0EF7 : 2A D6 38         "* 8"           ld      hl,(VARTAB)
0EFA                            L0EFA:
0EFA : ED 5B D8 38      " [ 8"          ld      de,(ARYTAB)
0EFE : E7               " "             rst     COMPAR
0EFF : 28 0A            "( "            jr      z,L0F0B
0F01 : 23               "#"             inc     hl
0F02 : 7E               "~"             ld      a,(hl)
0F03 : 23               "#"             inc     hl
0F04 : B7               " "             or      a
0F05 : CD 35 0F         " 5 "           call    L0F35
0F08 : 18 F0            "  "            jr      L0EFA
                                ;
0F0A                            L0F0A:
0F0A : C1               " "             pop     bc
0F0B                            L0F0B:
0F0B : ED 5B DA 38      " [ 8"          ld      de,(STREND)
0F0F : E7               " "             rst     COMPAR
0F10 : CA 57 0F         " W "           jp      z,L0F57
0F13 : CD 31 15         " 1 "           call    MOVRM
0F16 : 7A               "z"             ld      a,d
0F17 : E5               " "             push    hl
0F18 : 09               " "             add     hl,bc
0F19 : B7               " "             or      a
0F1A : F2 0A 0F         "   "           jp      p,L0F0A
0F1D : 22 C5 38         "" 8"           ld      (X38C5),hl
0F20 : E1               " "             pop     hl
0F21 : 4E               "N"             ld      c,(hl)
0F22 : 06 00            "  "            ld      b,000H
0F24 : 09               " "             add     hl,bc
0F25 : 09               " "             add     hl,bc
0F26 : 23               "#"             inc     hl
0F27 : EB               " "             ex      de,hl
0F28 : 2A C5 38         "* 8"           ld      hl,(X38C5)
0F2B : EB               " "             ex      de,hl
0F2C : E7               " "             rst     COMPAR
0F2D : 28 DC            "( "            jr      z,L0F0B
0F2F : 01 27 0F         " ' "           ld      bc,00F27H
0F32                            L0F32:
0F32 : C5               " "             push    bc
0F33 : F6 80            "  "            or      080H
0F35                            L0F35:
0F35 : 7E               "~"             ld      a,(hl)
0F36 : 23               "#"             inc     hl
0F37 : 23               "#"             inc     hl
0F38 : 5E               "^"             ld      e,(hl)
0F39 : 23               "#"             inc     hl
0F3A : 56               "V"             ld      d,(hl)
0F3B : 23               "#"             inc     hl
0F3C : F0               " "             ret     p
0F3D : B7               " "             or      a
0F3E : C8               " "             ret     z
0F3F : 44               "D"             ld      b,h
0F40 : 4D               "M"             ld      c,l
0F41 : 2A C1 38         "* 8"           ld      hl,(FRETOP)
0F44 : E7               " "             rst     COMPAR
0F45 : 60               "`"             ld      h,b
0F46 : 69               "i"             ld      l,c
0F47 : D8               " "             ret     c
0F48 : E1               " "             pop     hl
0F49 : E3               " "             ex      (sp),hl
0F4A : E7               " "             rst     COMPAR
0F4B : E3               " "             ex      (sp),hl
0F4C : E5               " "             push    hl
0F4D : 60               "`"             ld      h,b
0F4E : 69               "i"             ld      l,c
0F4F : D0               " "             ret     nc
0F50 : C1               " "             pop     bc
0F51 : F1               " "             pop     af
0F52 : F1               " "             pop     af
0F53 : E5               " "             push    hl
0F54 : D5               " "             push    de
0F55 : C5               " "             push    bc
0F56 : C9               " "             ret
                                ;
0F57                            L0F57:
0F57 : D1               " "             pop     de
0F58 : E1               " "             pop     hl
0F59 : 7C               "|"             ld      a,h
0F5A : B5               " "             or      l
0F5B : C8               " "             ret     z
0F5C : 2B               "+"             dec     hl
0F5D : 46               "F"             ld      b,(hl)
0F5E : 2B               "+"             dec     hl
0F5F : 4E               "N"             ld      c,(hl)
0F60 : E5               " "             push    hl
0F61 : 2B               "+"             dec     hl
0F62 : 2B               "+"             dec     hl
0F63 : 6E               "n"             ld      l,(hl)
0F64 : 26 00            "& "            ld      h,000H
0F66 : 09               " "             add     hl,bc
0F67 : 50               "P"             ld      d,b
0F68 : 59               "Y"             ld      e,c
0F69 : 2B               "+"             dec     hl
0F6A : 44               "D"             ld      b,h
0F6B : 4D               "M"             ld      c,l
0F6C : 2A C1 38         "* 8"           ld      hl,(FRETOP)
0F6F : CD 95 0B         "   "           call    L0B95
0F72 : E1               " "             pop     hl
0F73 : 71               "q"             ld      (hl),c
0F74 : 23               "#"             inc     hl
0F75 : 70               "p"             ld      (hl),b
0F76 : 60               "`"             ld      h,b
0F77 : 69               "i"             ld      l,c
0F78 : 2B               "+"             dec     hl
0F79 : C3 DE 0E         "   "           jp      L0EDE
                                ;
0F7C                            CAT:
0F7C : C5               " "             push    bc
0F7D : E5               " "             push    hl
0F7E : 2A E4 38         "* 8"           ld      hl,(FACLO)
0F81 : E3               " "             ex      (sp),hl
0F82 : CD FD 09         "   "           call    EVAL
0F85 : E3               " "             ex      (sp),hl
0F86 : CD 76 09         " v "           call    CHKSTR
0F89 : 7E               "~"             ld      a,(hl)
0F8A : E5               " "             push    hl
0F8B : 2A E4 38         "* 8"           ld      hl,(FACLO)
0F8E : E5               " "             push    hl
0F8F : 86               " "             add     a,(hl)
0F90 : 11 1C 00         "   "           ld      de,ERRLS
0F93 : DA DB 03         "   "           jp      c,ERROR
0F96 : CD 50 0E         " P "           call    L0E50
0F99 : D1               " "             pop     de
0F9A : CD CD 0F         "   "           call    FRETMP
0F9D : E3               " "             ex      (sp),hl
0F9E : CD CC 0F         "   "           call    FRETM2
0FA1 : E5               " "             push    hl
0FA2 : 2A BF 38         "* 8"           ld      hl,(X38BF)
0FA5 : EB               " "             ex      de,hl
0FA6 : CD B4 0F         "   "           call    L0FB4
0FA9 : CD B4 0F         "   "           call    L0FB4
0FAC : 21 91 09         "!  "           ld      hl,00991H
0FAF : E3               " "             ex      (sp),hl
0FB0 : E5               " "             push    hl
0FB1 : C3 7E 0E         " ~ "           jp      PUTNEW
                                ;
0FB4                            L0FB4:
0FB4 : E1               " "             pop     hl
0FB5 : E3               " "             ex      (sp),hl
0FB6 : 7E               "~"             ld      a,(hl)
0FB7 : 23               "#"             inc     hl
0FB8 : 23               "#"             inc     hl
0FB9 : 4E               "N"             ld      c,(hl)
0FBA : 23               "#"             inc     hl
0FBB : 46               "F"             ld      b,(hl)
0FBC : 6F               "o"             ld      l,a
0FBD                            L0FBD:
0FBD : 2C               ","             inc     l
0FBE                            L0FBE:
0FBE : 2D               "-"             dec     l
0FBF : C8               " "             ret     z
0FC0 : 0A               " "             ld      a,(bc)
0FC1 : 12               " "             ld      (de),a
0FC2 : 03               " "             inc     bc
0FC3 : 13               " "             inc     de
0FC4 : 18 F8            "  "            jr      L0FBE
                        ;
                        ;[M80] FRETMP IS PASSED A POINTER TO A STRING DESCRIPTOR IN [D,E]
                        ;[M80] THIS VALUE IS RETURNED IN [H,L]. ALL THE OTHER REGISTERS ARE MODIFIED.
                        ;[M80] A CHECK TO IS MADE TO SEE IF THE STRING DESCRIPTOR [D,E] POINTS
                        ;[M80] TO IS THE LAST TEMPORARY DESCRIPTOR ALLOCATED BY PUTNEW.
                        ;[M80] IF SO, THE TEMPORARY IS FREED UP BY THE UPDATING OF TEMPPT.
                        ;[M80] IF A TEMPORARY IS FREED UP, A FURTHER CHECK IS MADE TO SEE IF THE
                        ;[M80] STRING DATA THAT THAT STRING TEMPORARY POINTED TO IS THE
                        ;[M80] THE LOWEST PART OF STRING SPACE IN USE.
                        ;[M80] IF SO, FRETMP IS UPDATED TO REFLECT THE FACT THAT THAT SPACE IS NO
                        ;[M80] LONGER IN USE.
                        ;
0FC6 : CD 76 09   [M80] FRESTR: call    CHKSTR          ;[M80] MAKE SURE ITS A STRING
0FC9 : 2A E4 38   [M80] FREFAC: ld      hl,(FACLO)
0FCC : EB         [M80] FRETM2: ex      de,hl           ;[M80] FREE UP THE TEMP IN THE FACLO
0FCD : CD E4 0F   [M80] FRETMP: call    FRETMS          ;[M80] FREE UP THE TEMPORARY
0FD0 : EB                       ex      de,hl           ;[M80] PUT THE STRING POINTER INTO [H,L]
0FD1 : C0                       ret     nz
0FD2 : D5                       push    de              ;[M80] SAVE [D,E] TO RETURN IN [H,L]
0FD3 : 50                       ld      d,b             ;[M80] [D,E]=POINTER AT STRING
0FD4 : 59                       ld      e,c
0FD5 : 1B                       dec     de              ;[M80] SUBTRACT ONE
0FD6 : 4E                       ld      c,(hl)          ;[M80] [C]=LENGTH OF THE STRING FREED UP
0FD7 : 2A C1 38                 ld      hl,(FRETOP)     ;[M80] SEE IF ITS THE FIRST ONE IN STRING SPACE
0FDA : E7                       rst     COMPAR
0FDB : 20 05                    jr      nz,NOTLST       ;[M80] NO SO DON'T ADD
0FDD : 47                       ld      b,a             ;[M80] MAKE [B]=0
0FDE : 09                       add     hl,bc           ;[M80] ADD
0FDF : 22 C1 38                 ld      (FRETOP),hl     ;[M80] AND UPDATE FRETOP
0FE2 : E1         [M80] NOTLST: pop     hl              ;[M80] GET POINTER AT CURRENT DESCRIPTOR
0FE3 : C9                       ret

0FE4                    ;;Free up Temporary String Descriptor
0FE4 : 2A AF 38   [M80] FRETMS: ld      hl,(TEMPPT)     ;GET TEMP POINTER
0FE7 : 2B                       dec     hl              ;LOOK AT WHAT IS IN THE LAST TEMP
0FE8 : 46                       ld      b,(hl)          ;[B,C]=POINTER AT STRING
0FE9 : 2B                       dec     hl              ;DECREMENT TEMPPT BY STRSIZ
0FEA : 4E                       ld      c,(hl)
0FEB : 2B                       dec     hl
0FEC : 2B                       dec     hl
0FED : E7                       rst     COMPAR          ;SEE IF [D,E] POINT AT THE LAST
0FEE : C0                       ret     nz              ;RETURN NOW IF NOW FREEING DONE
0FEF : 22 AF 38                 ld      (TEMPPT),hl     ;UPDATE THE TEMP POINTER SINCE
0FF2 : C9                       ret
                        ;[M80]
                        ;[M80] THE FUNCTION LEN($) RETURNS THE LENGTH OF THE
                        ;[M80] STRING PASSED AS AN ARGUMENT
                        ;[M80]
0FF3 : 01 36 0B   [M80] LEN:    ld      bc,SNGFLT       ;CALL SNGFLT WHEN DONE
0FF6 : C5                       push    bc              ;LIKE SO
0FF7 : CD C6 0F   [M80] LEN1:   call    FRESTR          ;FREE UP TEMP POINTED TO BY FACLO
0FFA : AF                       xor     a               ;FORCE NUMERIC FLAG
0FFB : 57                       ld      d,a             ;SET HIGH OF [D,E] TO ZERO FOR VAL
0FFC : 32 AB 38                 ld      (VALTYP),a
0FFF : 7E                       ld      a,(hl)          ;SET CONDITION CODES ON LENGTH
1000 : B7                       or      a               ;RETURN
1001 : C9                       ret
                        ;
                        ;[M80] THE FOLLOWING IS THE ASC($) FUNCTION. IT RETURNS AN INTEGER
                        ;[M80] WHICH IS THE DECIMAL ASCII EQUIVALENT
                        ;
1002 : 01 36 0B   [M80] ASC:    ld      bc,00B36H       ;WHERE TO GO WHEN DONE
1005 : C5                       push    bc              ;SAVE RETURN ADDR ON STACK
1006 : CD F7 0F   [M80] ASC2:   call    LEN1            ;SET UP ORIGINAL STR
1009 : CA 97 06                 jp      z,FCERR         ;NULL STR, BAD ARG.
100C : 23                       inc     hl              ;BUMP POINTER
100D : 23                       inc     hl
100E : 5E                       ld      e,(hl)          ;[D,E]=POINTER AT STRING DATA
100F : 23                       inc     hl
1010 : 56                       ld      d,(hl)
1011 : 1A                       ld      a,(de)          ;[A]=FIRST CHARACTER
1012 : C9                       ret
                        ;
                        ;[M80] CHR$(#) CREATES A STRING WHICH CONTAINS AS ITS ONLY
                        ;[M80] CHARACTER THE ASCII EQUIVALENT OF THE INTEGER ARG (#)
                        ;[M80] WHICH MUST BE .LE. 255.
                        ;
1013 : CD 4E 0E   [M80] CHR:    call    STRIN1          ;[M80] GET STRING IN DSCTMP
1016 : CD 57 0B                 call    CONINT          ;[M80] GET INTEGER IN RANGE
1019 : 2A BF 38   [M80] SETSTR: ld      hl,(X38BF)      ;[M80] GET ADDR OF STR
101C : 73                       ld      (hl),e          ;[M80] SAVE ASCII BYTE
101D : C1         {M80} FINBCK: pop     bc              ;[M80] RETURN TO HIGHER LEVEL & SKIP THE CHKNUM CALL
101E : C3 7E 0E                 jp      PUTNEW          ;[M80] GO CALL PUTNEW
                        ;
                        ;[M80] THE FOLLOWING IS THE LEFT$($,#) FUNCTION.
                        ;[M80] IT TAKES THE LEFTMOST # CHARS OF THE STR.
                        ;[M80] IF # IS .GT. THAN THE LEN OF THE STR, IT RETURNS THE WHOLE STR.
                        ;
1021 : CD A0 10   [M65] LEFT:   call    PREAM           ;[M80] TEST THE PARAMETERS
1024 : AF                       xor     a               ;[M80] LEFT NEVER CHANGES STRING POINTER
1025 : E3         [M80] LEFT3:  ex      (sp),hl         ;[M80] SAVE TEXT POINTER
1026 : 4F                       ld      c,a             ;[M80] OFFSET NOW IN [C]
1027 : E5         {M80} LEFT2:  push    hl              ;[M80] SAVE DESC. FOR  FRETMP
1028 : 7E                       ld      a,(hl)          ;[M80] GET STRING LENGTH
1029 : B8                       cp      b               ;[M80] ENTIRE STRING WANTED?
102A : 38 02                    jr      c,ALLSTR        ;[M80] IF #CHARS ASKED FOR.GE.LENGTH,YES
102C : 78                       ld      a,b             ;[M80] GET TRUNCATED LENGTH OF STRING
102D : 11                       .byte   $11             ;[M80] SKIP OVER MVI USING "LD D,"
102E : 0E 00                    ld      c,0             ;[M80] MAKE OFFSET ZERO
1030 : C5                       push    bc              ;[M80] SAVE OFFSET ON STACK
1031 : CD B3 0E                 call    GETSPA          ;[M80] GET SPACE FOR NEW STRING
1034 : C1                       pop     bc              ;[M80] GET BACK OFFSET
1035 : E1                       pop     hl              ;[M80] GET BACK DESC POINTER.
1036 : E5                       push    hl              ;[M80] BUT KEEP ON STACK
1037 : 23                       inc     hl              ;[M80] MOVE TO STRING POINTER FIELD
1038 : 23                       inc     hl
1039 : 46                       ld      b,(hl)          ;[M80] GET POINTER LOW
103A : 23                       inc     hl
103B : 66                       ld      h,(hl)          ;[M80] POINTER HIGH
103C : 68                       ld      l,b             ;[M80] GET LOW IN  L
103D : 06 00                    ld      b,000H          ;[M80] GET READY TO ADD OFFSET TO POINTER
103F : 09                       add     hl,bc           ;[M80] ADD  IT
1040 : 44                       ld      b,h             ;[M80] GET OFFSET POINTER IN [B,C]
1041 : 4D                       ld      c,l
1042 : CD 53 0E                 call    STRAD2          ;[M80] SAVE INFO IN DSCTMP
1045 : 6F                       ld      l,a             ;[M80] GET#  OF CHARS TO  MOVE IN L
1046 : CD BD 0F                 call    L0FBD           ;[M80] MOVE THEM IN
1049 : D1                       pop     de              ;[M80] GET BACK DESC. POINTER
104A : CD CD 0F                 call    FRETMP          ;[M80] FREE IT UP.
104D : C3 7E 0E                 jp      PUTNEW          ;[M80] PUT TEMP IN TEMP LIST
                        ;
1050 : CD A0 10   [M80] RIGHT:  call    PREAM           ;[M80] CHECK ARG
1053 : D1                       pop     de              ;[M80] GET DESC. POINTER
1054 : D5                       push    de              ;[M80] SAVE BACK FOR LEFT
1055 : 1A                       ld      a,(de)          ;[M80] GET PRESENT LEN OF STR
1056 : 90                       sub     b               ;[M80] SUBTRACT 2ND PARM
1057 : 18 CC                    jr      LEFT3           ;[M80] CONTINUE WITH LEFT CODE
                                ;
                                ;[M80] MID ($,#) RETURNS STR WITH CHARS FROM # POSITION
                                ;[M80] ONWARD. IF # IS GT LEN($) THEN RETURN NULL STRING.
                                ;[M80] MID ($,#,#) RETURNS STR WITH CHARS FROM # POSITION
                                ;[M80] FOR #2 CHARS. IF #2 GOES PAST END OF STRING, RETURN
                                ;[M80] AS MUCH AS POSSIBLE.
                                ;
1059 : EB         [M80] MID:    ex      de,hl           ;[M80] PUT THE TEXT POINTER IN [H,L]
105A : 7E                       ld      a,(hl)          ;[M80] GET THE FIRST CHARACTER
105B : CD A3 10                 call    PREAM2          ;[M80] GET OFFSET OFF STACK AND MAKE
105E : 04                       inc     b
105F : 05                       dec     b               ;[M80] SEE IF EQUAL TO ZERO
1060 : CA 97 06                 jp      z,FCERR         ;[M80] IT MUST NOT BE 0
1063 : C5                       push    bc
1064 : 1E FF      [M80] MIDRST: ld      e,$FF           ;[M80] IF TWO ARG GUY, TRUNCATE
1066 : FE 29                    cp      ')'             ;[M80] [E] SAYS USE ALL CHARS
1068 : 28 05                    jr      z,MID2          ;[M80] IF ONE ARGUMENT THIS IS CORRECT
106A : CF                       rst     SYNCHK
106B : 2C                       .byte   ','             ;[M80] COMMA? MUST DELINEATE 3RD ARG
106C : CD 54 0B                 call    GETBYT          ;[M80] GET ARGUMENT  IN  [E]
106F : CF         [M80] MID2:   rst     SYNCHK
1070 : 29                       .byte   ')'             ;[M80] MUST BE FOLLOWED BY )
1071 : F1                       pop     af              ;[M80] GET OFFSET BACK IN A
1072 : E3                       ex      (sp),hl         ;[M80] SAVE TEXT POINTER, GET DESC.
1073 : 01 27 10                 ld      bc,LEFT2        ;[M80] WHERE TO RETURN TO.
1076 : C5                       push    bc              ;[M80] GOES ON STACK
1077 : 3D                       dec     a               ;[M80] SUB ONE FROM OFFSET
1078 : BE                       cp      (hl)            ;[M80] POINTER PAST END OF STR?
1079 : 06 00                    ld      b,0             ;[M80] ASSUME NULL LENGTH STR
107B : D0                       ret     nc              ;[M80] YES, JUST USE NULL STR
107C : 4F                       ld      c,a             ;[M80] SAVE OFFSET OF CHARACTER POINTER
107D : 7E                       ld      a,(hl)          ;[M80] GET PRESENT LEN OF STR
107E : 91                       sub     c               ;[M80] SUBTRACT INDEX (2ND ARG)
107F : BB                       cp      e               ;[M80] IS IT TRUNCATION
1080 : 47                       ld      b,a             ;[M80] GET CALCED LENGTH IN B
1081 : D8                       ret     c               ;[M80] IF NOT USE PARTIAL STR
1082 : 43                       ld      b,e             ;[M80] USE TRUNCATED LENGTH
1083 : C9                       ret                     ;[M80] RETURN TO LEFT2
                        ;
                        ;[M80] THE VAL FUNCTION TAKES A STRING AND TURN IT INTO
                        ;[M80] A NUMBER BY INTERPRETING THE ASCII DIGITS. ETC..
                        ;[M80] EXCEPT FOR THE PROBLEM THAT A TERMINATOR MUST BE SUPPLIED
                        ;[M80] BY REPLACING THE CHARACTER BEYOND THE STRING, VAL
                        ;[M80] IS MERELY A CALL TO FLOATING INPUT (FIN).
                        ;
1084 : CD F7 0F   [M80] VAL:    call    LEN1            ;DO SETUP, SET RESULT=REAL
1087 : CA C3 12                 jp      z,SNGFLT        ;MAKE SURE TYPE SET UP OK IN EXTENDED
108A : 5F                       ld      e,a             ;GET LENGTH OF STR
108B : 23                       inc     hl              ;TO HANDLE THE FACT THE IF
108C : 23                       inc     hl
108D : 7E                       ld      a,(hl)
108E : 23                       inc     hl
108F : 66                       ld      h,(hl)          ;TWO STRINGS "1" AND "2"
1090 : 6F                       ld      l,a             ;ARE STORED NEXT TO EACH OTHER
1091 : E5                       push    hl              ;AND FIN IS CALLED POINTING TO
1092 : 19                       add     hl,de           ;THE FIRST TWELVE WILL BE RETURNED
1093 : 46                       ld      b,(hl)          ;THE IDEA IS TO STORE 0 IN THE
1094 : 72                       ld      (hl),d          ;STRING BEYOND THE ONE VAL
1095 : E3                       ex      (sp),hl         ;IS BEING CALLED ON
1096 : C5                       push    bc              ;THE FIRST CHARACTER OF THE NEXT STRING
1097 : 2B                       dec     hl              ;***CALL CHRGET TO MAKE SURE
1098 : D7                       rst     CHRGET          ;VAL(" -3")=-3
1099 : CD E5 15                 call    FIN             ;IN EXTENDED, GET ALL THE PRECISION WE CAN
109C : C1                       pop     bc              ;GET THE MODIFIED CHARACTER OF THE NEXT STRING INTO [B]
109D : E1                       pop     hl              GET THE POINTER TO THE MODIFIED CHARACTER
109E : 70                       ld      (hl),b          RESTORE THE CHARACTER
                                ;IF STRING IS HIGHEST IN STRING SPACE WE ARE MODIFYING [MEMSIZ] AND
                                ;THIS IS WHY [MEMSIZ] CAN'T BE USED TO STORE STRING DATA BECAUSE WHAT IF THE
                                    ;USER TOOK VAL OFF THAT HIGH STRING
109F : C9                       ret

                        ;[M80] USED BY RIGHT$ AND LEFT$ FOR PARAMETER CHECKING AND SETUP
10A0 : EB         [M80] PREAM:  ex      de,hl           ;[M80] PUT THE TEXT POINTER IN [H,L]
10A1 : CF                       rst     SYNCHK
10A2 : 29                       .byte   ')'             ;[M80] PARAM LIST SHOULD END
                        ;[M80] USED BY MID$ FOR PARAMETER CHECKING AND SETUP
10A3 : C1         [M80] PREAM2: pop     bc              ;[M80] GET RETURN ADDR OFF STACK
10A4 : D1                       pop     de              ;[M80] GET LENGTH OF ARG OFF STACK
10A5 : C5                       push    bc              ;[M80] SAVE RETURN ADDR BACK ON
10A6 : 43                       ld      b,e             ;[M80] SAVE INIT LENGTH
10A7 : C9                       ret
                        ;
                        ;[M80] FRE FUNCTION AND INTEGER TO FLOATING  ROUTINES
                        ;
10A8 : 2A DA 38   [M80] FRE:    ld      hl,(STREND)     ;;Label CLCDIF in [M80]
10AB : EB                       ex      de,hl
10AC : 21 00 00                 ld      hl,00000H
10AF : 39                       add     hl,sp
10B0 : 3A AB 38                 ld      a,(VALTYP)
10B3 : B7                       or      a
10B4 : CA 1C 0B                 jp      z,GIVDBL
10B7 : CD C9 0F                 call    FREFAC
10BA : CD DB 0E                 call    L0EDB
10BD : ED 5B 4B 38              ld      de,(TOPMEM)
10C1 : 2A C1 38                 ld      hl,(FRETOP)     ;TOP OF FREE AREA
10C4 : C3 1C 0B                 jp      GIVDBL          ;RETURN [H,L]-[D,E]
                                ;
10C7 : 2B         [M80] DIMCON: dec     hl              ;[M80] SEE IF COMMA ENDED THIS VARIABLE
10C8 : D7                       rst     CHRGET
10C9 : C8                       ret     z               ;[M80] IF TERMINATOR, GOOD BYE
10CA : CF                       rst     SYNCHK
10CB : 2C                       .byte   ','             ;[M80] MUST BE COMMA
                        ;
                        ;[M80] THE "DIM" CODE SETS DIMFLG AND THEN FALLS INTO THE VARIABLE
                        ;[M80] SEARCH ROUTINE. THE VARIABLE SEARCH ROUTINE LOOKS AT
                        ;[M80] DIMFLG AT THREE DIFFERENT POINTS:
                        ;[M80]
                        ;[M80]	1) IF AN ENTRY IS FOUND, DIMFLG BEING ON INDICATES
                        ;[M80]		A "DOUBLY DIMENSIONED" VARIABLE
                        ;[M80]	2) WHEN A NEW ENTRY IS BEING BUILT DIMFLG'S BEING ON
                        ;[M80]		INDICATES THE INDICES SHOULD BE USED FOR
                        ;[M80]		THE SIZE OF EACH INDICE. OTHERWISE THE DEFAULT
                        ;[M80]		OF TEN IS USED.
                        ;[M80]	3) WHEN THE BUILD ENTRY CODE FINISHES, ONLY IF DIMFLG IS
                        ;[M80]		OFF WILL INDEXING BE DONE
                        ;
10CC : 01 C7 10   [M80] DIM:    ld      bc,DIMCON       ;[M80] PLACE TO COME BACK TO
10CF : C5                       push    bc
10D0 : F6                       ,byte   $F6             ;;"OR" to skip next instruction
                        ;
                        ;[M80] ROUTINE TO READ THE VARIABLE NAME AT THE CURRENT TEXT POSITION
                        ;[M80] AND PUT A POINTER TO ITS VALUE IN [D,E]. [H,L] IS UPDATED
                        ;[M80] TO POINT TO THE CHARACTER AFTER THE VARIABLE NAME.
                        ;[M80] VALTYP IS SETUP. NOTE THAT EVALUATING SUBSCRIPTS IN
                        ;[M80] A VARIABLE NAME CAN CAUSE RECURSIVE CALLS TO PTRGET SO AT
                        ;[M80] THAT POINT ALL VALUES MUST BE STORED ON THE STACK.
                        ;[M80] ON RETURN, [A] DOES NOT REFLECT THE VALUE OF THE TERMINATING CHARACTER
                        ;
10D1 : AF         [M80] PTRGET: xor      a              ;[M80] MAKE [A]=0
10D2 : 32 AA 38                 ld      (DIMFLG),a      ;[M80] FLAG IT AS SUCH
10D5 : 4E                       ld      c,(hl)          ;[M80] GET FIRST CHARACTER IN [C]
10D6 : CD C5 0C   {M80} PTRGT2: call    ISLET           ;[M80] CHECK FOR LETTER
10D9 : DA C4 03                 jp      c,SNERR         ;[M80] MUST HAVE A LETTER
10DC : AF                       xor     a
10DD : 47                       ld      b,a             ;[M80] ASSUME NO SECOND CHARACTER
10DE : 32 AB 38                 ld      (VALTYP),a      ;[M80] ZERO NAMCNT
10E1 : D7                       rst     CHRGET          ;[M80] GET CHAR
10E2 : 38 05                    jr      c,ISSEC         Y[M80] ES, WAS NUMERIC
10E4 : CD C6 0C                 call    ISLETC          ;[M80] SET CARRY IF NOT ALPHABETIC
10E7 : 38 09                    jr      c,NOSEC         ;[M80] ALLOW ALPHABETICS
10E9 : 47         [M80] ISSEC:  ld      b,a             ;[M80] IT IS A NUMBER--SAVE IN B
10EA : D7               EATEM:  rst     CHRGET          ;[M80] GET CHAR
10EB : 38 FD                    jr      c,EATEM         ;[M65] SKIP NUMERICS
10ED : CD C6 0C   {M80} VMORC1: call    ISLETC          ;[
10F0 : 30 F8                    jr      nc,EATEM        ;[M65] SKIP ALPHABETICS
10F2 : D6 24      [M80] NOSEC:  sub     '$'             ;[M65] IS IT A STRING?
10F4 : 20 08                    jr      nz,NOTSTR       ;[M65] IF NOT, [VALTYP]=0.
10F6 : 3C                       inc     a               ;[M65] SET [VALTYP]=1 (STRING !)
10F7 : 32 AB 38                 ld      (VALTYP),a
10FA : 0F                       rrca
10FB : 80                       add     a,b
10FC : 47                       ld      b,a
10FD : D7                       rst     CHRGET          ;READ PAST TYPE MARKER
10FE : 3A CB 38   [M65] NOTSTR: ld      a,(SUBFLG)      ;GET FLAG WHETHER TO ALLOW ARRAYS
1101 : 3D                       dec     a               ;IF SUBFLG=1, "ERASE" HAS CALLED
1102 : CA A0 11                 jp      z,ERSFIN        ;PTRGET, AND SPECIAL HANDLING MUST BE DONE
1105 : F2 0E 11                 jp      p,NOARYS        ;NO ARRAYS ALLOWED
1108 : 7E                       ld      a,(hl)          ;GET CHAR BACK
1109 : D6 28                    sub     '('             ;(CHECK FOR "(") WON'T MATCH IF SUBFLG SET
110B : CA 7A 11                 jp      z,ISARY         ;IT IS!
110E
110E : AF         [M80] NOARYS: xor     a               ;ALLOW PARENS AGAIN
110F : 32 CB 38                 ld      (SUBFLG),a      ;SAVE IN FLAG LOCATION
1112 : E5                       push    hl              ;SAVE THE TEXT POINTER
1113 : 50                       ld      d,b
1114 : 59                       ld      e,c
1115 : 2A DE 38                 ld      hl,(X38DE)
1118 : E7                       rst     COMPAR
1119 : 11 E0 38                 ld      de,038E0H
111C : CA 1A 14                 jp      z,L141A
111F : 2A D8 38                 ld      hl,(ARYTAB)
1122 : EB                       ex      de,hl
1123 : 2A D6 38                 ld      hl,(VARTAB)
1126                    L1126:
1126 : E7                       rst     COMPAR
1127 : CA 3D 11                 jp      z,L113D
112A : 79                       ld      a,c
112B : 96                       sub     (hl)
112C : 23                       inc     hl
112D : C2 32 11                 jp      nz,L1132
1130 : 78                       ld      a,b
1131 : 96                       sub     (hl)
1132                    L1132:
1132 : 23                       inc     hl
1133 : CA 6C 11                 jp      z,L116C
1136 : 23                       inc     hl
1137 : 23                       inc     hl
1138 : 23                       inc     hl
1139 : 23                       inc     hl
113A : C3 26 11                 jp      L1126
                                ;
113D                            L113D:
113D : E1               " "             pop     hl
113E : E3               " "             ex      (sp),hl
113F : D5               " "             push    de
1140 : 11 51 0A         " Q "           ld      de,00A51H
1143 : E7               " "             rst     COMPAR
1144 : D1               " "             pop     de
1145 : CA 6F 11         " o "           jp      z,L116F
1148 : E3               " "             ex      (sp),hl
1149 : E5               " "             push    hl
114A : C5               " "             push    bc
114B : 01 06 00         "   "           ld      bc,00006H
114E : 2A DA 38         "* 8"           ld      hl,(STREND)
1151 : E5               " "             push    hl
1152 : 09               " "             add     hl,bc
1153 : C1               " "             pop     bc
1154 : E5               " "             push    hl
1155 : CD 92 0B         "   "           call    BLTU
1158 : E1               " "             pop     hl
1159 : 22 DA 38         "" 8"           ld      (STREND),hl
115C : 60               "`"             ld      h,b
115D : 69               "i"             ld      l,c
115E : 22 D8 38         "" 8"           ld      (ARYTAB),hl
1161                            L1161:
1161 : 2B               "+"             dec     hl
1162 : 36 00            "6 "            ld      (hl),000H
1164 : E7               " "             rst     COMPAR
1165 : 20 FA            "  "            jr      nz,L1161
1167 : D1               " "             pop     de
1168 : 73               "s"             ld      (hl),e
1169 : 23               "#"             inc     hl
116A : 72               "r"             ld      (hl),d
116B : 23               "#"             inc     hl
116C                            L116C:
116C : EB               " "             ex      de,hl
116D : E1               " "             pop     hl
116E : C9               " "             ret
                                ;
116F                            L116F:
116F : 32 E7 38         "2 8"           ld      (FACHO),a
1172 : 21 6D 03         "!m "           ld      hl,0036DH
1175 : 22 E4 38         "" 8"           ld      (FACLO),hl
1178 : E1               " "             pop     hl
1179 : C9               " "             ret
                                ;
117A                            ISARY:
117A : E5               " "             push    hl
117B : 2A AA 38         "* 8"           ld      hl,(DIMFLG)
117E : E3               " "             ex      (sp),hl
117F : 57               "W"             ld      d,a
1180                            L1180:
1180 : D5               " "             push    de
1181 : C5               " "             push    bc
1182 : CD 7A 06         " z "           call    L067A
1185 : C1               " "             pop     bc
1186 : F1               " "             pop     af
1187 : EB               " "             ex      de,hl
1188 : E3               " "             ex      (sp),hl
1189 : E5               " "             push    hl
118A : EB               " "             ex      de,hl
118B : 3C               "<"             inc     a
118C : 57               "W"             ld      d,a
118D : 7E               "~"             ld      a,(hl)
118E : FE 2C            " ,"            cp      02CH
1190 : CA 80 11         "   "           jp      z,L1180
1193 : CF               " "             rst     SYNCHK
1194 : 29               "               .byte   ')'
1195 : 22 D0 38         "" 8"           ld      (TENP2),hl
1198 : E1               " "             pop     hl
1199 : 22 AA 38         "" 8"           ld      (DIMFLG),hl
119C : 1E 00            "  "            ld      e,000H
119E : D5               " "             push    de
119F : 11 E5 F5         "   "           ld      de,0F5E5H
11A2 : 2A D8 38         "* 8"           ld      hl,(ARYTAB)
11A5 : 3E 19            "> "            ld      a,019H
11A7 : ED 5B DA 38      " [ 8"          ld      de,(STREND)
11AB : E7               " "             rst     COMPAR
11AC : 28 25            "(%"            jr      z,L11D3
11AE : 7E               "~"             ld      a,(hl)
11AF : 23               "#"             inc     hl
11B0 : B9               " "             cp      c
11B1 : 20 02            "  "            jr      nz,L11B5
11B3 : 7E               "~"             ld      a,(hl)
11B4 : B8               " "             cp      b
11B5                            L11B5:
11B5 : 23               "#"             inc     hl
11B6 : 5E               "^"             ld      e,(hl)
11B7 : 23               "#"             inc     hl
11B8 : 56               "V"             ld      d,(hl)
11B9 : 23               "#"             inc     hl
11BA : 20 EA            "  "            jr      nz,L11A6
11BC : 3A AA 38         ": 8"           ld      a,(DIMFLG)
11BF : B7               " "             or      a
11C0 : C2 CD 03         "   "           jp      nz,DDERR
11C3 : F1               " "             pop     af
11C4 : 44               "D"             ld      b,h
11C5 : 4D               "M"             ld      c,l
11C6 : CA 1A 14         "   "           jp      z,L141A
11C9 : 96               " "             sub     (hl)
11CA : CA 2B 12         " + "           jp      z,L122B
11CD                            L11CD:
11CD : 11 10 00         "   "           ld      de,ERRBS
11D0 : C3 DB 03         "   "           jp      ERROR
                                ;
11D3                            L11D3:
11D3 : 11 04 00         "   "           ld      de,00004H
11D6 : F1               " "             pop     af
11D7 : CA 97 06         "   "           jp      z,FCERR
11DA : 71               "q"             ld      (hl),c
11DB : 23               "#"             inc     hl
11DC : 70               "p"             ld      (hl),b
11DD : 23               "#"             inc     hl
11DE : 4F               "O"             ld      c,a
11DF : CD A0 0B         "   "           call    GETSTK
11E2 : 23               "#"             inc     hl
11E3 : 23               "#"             inc     hl
11E4 : 22 C3 38         "" 8"           ld      (TENP3),hl
11E7 : 71               "q"             ld      (hl),c
11E8 : 23               "#"             inc     hl
11E9 : 3A AA 38         ": 8"           ld      a,(DIMFLG)
11EC : 17               " "             rla
11ED : 79               "y"             ld      a,c
11EE                            L11EE:
11EE : 01 0B 00         "   "           ld      bc,0000BH
11F1 : 30 02            "0 "            jr      nc,L11F5
11F3 : C1               " "             pop     bc
11F4 : 03               " "             inc     bc
11F5                            L11F5:
11F5 : 71               "q"             ld      (hl),c
11F6 : F5               " "             push    af
11F7 : 23               "#"             inc     hl
11F8 : 70               "p"             ld      (hl),b
11F9 : 23               "#"             inc     hl
11FA : E5               " "             push    hl
11FB : CD CA 15         "   "           call    L15CA
11FE : EB               " "             ex      de,hl
11FF : E1               " "             pop     hl
1200 : F1               " "             pop     af
1201 : 3D               "="             dec     a
1202 : 20 EA            "  "            jr      nz,L11EE
1204 : F5               " "             push    af
1205 : 42               "B"             ld      b,d
1206 : 4B               "K"             ld      c,e
1207 : EB               " "             ex      de,hl
1208 : 19               " "             add     hl,de
1209 : DA B7 0B         "   "           jp      c,L0BB7
120C : CD A9 0B         "   "           call    L0BA9
120F : 22 DA 38         "" 8"           ld      (STREND),hl
1212                            L1212:
1212 : 2B               "+"             dec     hl
1213 : 36 00            "6 "            ld      (hl),000H
1215 : E7               " "             rst     COMPAR
1216 : 20 FA            "  "            jr      nz,L1212
1218 : 03               " "             inc     bc
1219 : 57               "W"             ld      d,a
121A : 2A C3 38         "* 8"           ld      hl,(TENP3)
121D : 5E               "^"             ld      e,(hl)
121E : EB               " "             ex      de,hl
121F : 29               ")"             add     hl,hl
1220 : 09               " "             add     hl,bc
1221 : EB               " "             ex      de,hl
1222 : 2B               "+"             dec     hl
1223 : 2B               "+"             dec     hl
1224 : 73               "s"             ld      (hl),e
1225 : 23               "#"             inc     hl
1226 : 72               "r"             ld      (hl),d
1227 : 23               "#"             inc     hl
1228 : F1               " "             pop     af
1229 : 38 21            "8!"            jr      c,L124C
122B                            L122B:
122B : 47               "G"             ld      b,a
122C : 4F               "O"             ld      c,a
122D : 7E               "~"             ld      a,(hl)
122E : 23               "#"             inc     hl
122F : 16 E1            "  "            ld      d,0E1H
1231 : 5E               "^"             ld      e,(hl)
1232 : 23               "#"             inc     hl
1233 : 56               "V"             ld      d,(hl)
1234 : 23               "#"             inc     hl
1235 : E3               " "             ex      (sp),hl
1236 : F5               " "             push    af
1237 : E7               " "             rst     COMPAR
1238 : D2 CD 11         "   "           jp      nc,L11CD
123B : E5               " "             push    hl
123C : CD CA 15         "   "           call    L15CA
123F : D1               " "             pop     de
1240 : 19               " "             add     hl,de
1241 : F1               " "             pop     af
1242 : 3D               "="             dec     a
1243 : 44               "D"             ld      b,h
1244 : 4D               "M"             ld      c,l
1245 : 20 E9            "  "            jr      nz,L1230
1247 : 29               ")"             add     hl,hl
1248 : 29               ")"             add     hl,hl
1249 : C1               " "             pop     bc
124A : 09               " "             add     hl,bc
124B : EB               " "             ex      de,hl
124C                            L124C:
124C : 2A D0 38         "* 8"           ld      hl,(TENP2)
124F : C9               " "             ret
                                ;
1250                    L1250:
1250 : 21 57 17                 ld      hl,01757H
1253                    L1253:
1253 : CD 31 15                 call    MOVRM
1256 : 18 09                    jr      FADD

1258 :                  ;[M80] SUBTRACTION	FAC:=ARG-FAC
1258 : CD 31 15   [M80] FSUBS:  call    MOVRM           ;[M80] ENTRY IF POINTER TO ARG IS IN (HL)
125B : 21                       .byte   $21             ;;"LD HL," to skip next instruction
125C : C1 D1      [M80] FSUBT:  pop     bc              ;;ENTRY TO FMSUB IF ARGUMENT IS ON STACK
125E : CD 0B 15   [M80] FSUB:   call    NEG             ;[M80] NEGATE SECOND ARGUMENT
1261 :                  ;[M80] ADDITION	FAC:=ARG+FAC
1261 : 78         [M80] FADD:   ld      a,b
1262 : B7                       or      a
1263 : C8                       ret     z
1264 : 3A E7 38                 ld      a,(FACHO)
1267 : B7                       or      a
1268 : CA 23 15                 jp      z,MOVFR
126B : 90                       sub     b
126C : 30 0C                    jr      nc,L127A
126E : 2F                       cpl
126F : 3C                       inc     a
1270 : EB                       ex      de,hl
1271 : CD 13 15                 call    L1513
1274 : EB                       ex      de,hl
1275 : CD 23 15                 call    MOVFR
1278 : C1                       pop     bc
1279 : D1                       pop     de
127A                    L127A:
127A : FE 19                    cp      019H
127C : D0                       ret     nc
127D : F5                       push    af
127E : CD 46 15                 call    L1546
1281 : 67                       ld      h,a
1282 : F1                       pop     af
1283 : CD 30 13                 call    L1330
1286 : 7C                       ld      a,h
1287 : B7                       or      a
1288 : 21 E4 38                 ld      hl,FACLO
128B : F2 9F 12                 jp      p,L129F
128E : CD 10 13                 call    L1310
1291 : 30 5E                    jr      nc,L12F1
1293 : 23                       inc     hl
1294 : 34                       inc     (hl)
1295 : CA D3 03                 jp      z,L03D3
1298 : 2E 01                    ld      l,001H
129A : CD 52 13                 call    L1352
129D : 18 52                    jr      L12F1
                                ;
129F                            L129F:
129F : AF               " "             xor     a
12A0 : 90               " "             sub     b
12A1 : 47               "G"             ld      b,a
12A2 : 7E               "~"             ld      a,(hl)
12A3 : 9B               " "             sbc     a,e
12A4 : 5F               "_"             ld      e,a
12A5 : 23               "#"             inc     hl
12A6 : 7E               "~"             ld      a,(hl)
12A7 : 9A               " "             sbc     a,d
12A8 : 57               "W"             ld      d,a
12A9 : 23               "#"             inc     hl
12AA : 7E               "~"             ld      a,(hl)
12AB : 99               " "             sbc     a,c
12AC : 4F               "O"             ld      c,a
12AD                            L12AD:
12AD : DC 1C 13         "   "           call    c,L131C
12B0                            NORMAL:
12B0 : 68               "h"             ld      l,b
12B1 : 63               "c"             ld      h,e
12B2 : AF               " "             xor     a
12B3                            L12B3:
12B3 : 47               "G"             ld      b,a
12B4 : 79               "y"             ld      a,c
12B5 : B7               " "             or      a
12B6 : 20 27            " '"            jr      nz,L12DF
12B8 : 4A               "J"             ld      c,d
12B9 : 54               "T"             ld      d,h
12BA : 65               "e"             ld      h,l
12BB : 6F               "o"             ld      l,a
12BC : 78               "x"             ld      a,b
12BD : D6 08            "  "            sub     008H
12BF : FE E0            "  "            cp      0E0H
12C1 : 20 F0            "  "            jr      nz,L12B3
12C3                            SNGFLT:
12C3 : AF               " "             xor     a
12C4                            L12C4:
12C4 : 32 E7 38         "2 8"           ld      (FACHO),a
12C7 : C9               " "             ret
                                ;
12C8                            L12C8:
12C8 : 7C               "|"             ld      a,h
12C9 : B5               " "             or      l
12CA : B2               " "             or      d
12CB : 20 0A            "  "            jr      nz,L12D7
12CD : 79               "y"             ld      a,c
12CE                            L12CE:
12CE : 05               " "             dec     b
12CF : 17               " "             rla
12D0 : 30 FC            "0 "            jr      nc,L12CE
12D2 : 04               " "             inc     b
12D3 : 1F               " "             rra
12D4 : 4F               "O"             ld      c,a
12D5 : 18 0B            "  "            jr      L12E2
                                ;
12D7                            L12D7:
12D7 : 05               " "             dec     b
12D8 : 29               ")"             add     hl,hl
12D9 : 7A               "z"             ld      a,d
12DA : 17               " "             rla
12DB : 57               "W"             ld      d,a
12DC : 79               "y"             ld      a,c
12DD : 8F               " "             adc     a,a
12DE : 4F               "O"             ld      c,a
12DF                            L12DF:
12DF : F2 C8 12         "   "           jp      p,L12C8
12E2                            L12E2:
12E2 : 78               "x"             ld      a,b
12E3 : 5C               "\"             ld      e,h
12E4 : 45               "E"             ld      b,l
12E5 : B7               " "             or      a
12E6 : 28 09            "( "            jr      z,L12F1
12E8 : 21 E7 38         "! 8"           ld      hl,FACHO
12EB : 86               " "             add     a,(hl)
12EC : 77               "w"             ld      (hl),a
12ED : 30 D4            "0 "            jr      nc,SNGFLT
12EF : 28 D2            "( "            jr      z,SNGFLT
12F1                            L12F1:
12F1 : 78               "x"             ld      a,b
12F2                            L12F2:
12F2 : 21 E7 38         "! 8"           ld      hl,FACHO
12F5 : B7               " "             or      a
12F6 : FC 03 13         "   "           call    m,L1303
12F9 : 46               "F"             ld      b,(hl)
12FA : 23               "#"             inc     hl
12FB : 7E               "~"             ld      a,(hl)
12FC : E6 80            "  "            and     080H
12FE : A9               " "             xor     c
12FF : 4F               "O"             ld      c,a
1300 : C3 23 15         " # "           jp      MOVFR
                                ;
1303                            L1303:
1303 : 1C               " "             inc     e
1304 : C0               " "             ret     nz
1305 : 14               " "             inc     d
1306 : C0               " "             ret     nz
1307 : 0C               " "             inc     c
1308 : C0               " "             ret     nz
1309 : 0E 80            "  "            ld      c,080H
130B : 34               "4"             inc     (hl)
130C : C0               " "             ret     nz
130D : C3 D3 03         "   "           jp      L03D3
                                ;
1310                            L1310:
1310 : 7E               "~"             ld      a,(hl)
1311 : 83               " "             add     a,e
1312 : 5F               "_"             ld      e,a
1313 : 23               "#"             inc     hl
1314 : 7E               "~"             ld      a,(hl)
1315 : 8A               " "             adc     a,d
1316 : 57               "W"             ld      d,a
1317 : 23               "#"             inc     hl
1318 : 7E               "~"             ld      a,(hl)
1319 : 89               " "             adc     a,c
131A : 4F               "O"             ld      c,a
131B : C9               " "             ret
                                ;
131C                            L131C:
131C : 21 E8 38         "! 8"           ld      hl,038E8H
131F : 7E               "~"             ld      a,(hl)
1320 : 2F               "/"             cpl
1321 : 77               "w"             ld      (hl),a
1322 : AF               " "             xor     a
1323 : 6F               "o"             ld      l,a
1324 : 90               " "             sub     b
1325 : 47               "G"             ld      b,a
1326 : 7D               "}"             ld      a,l
1327 : 9B               " "             sbc     a,e
1328 : 5F               "_"             ld      e,a
1329 : 7D               "}"             ld      a,l
132A : 9A               " "             sbc     a,d
132B : 57               "W"             ld      d,a
132C : 7D               "}"             ld      a,l
132D : 99               " "             sbc     a,c
132E : 4F               "O"             ld      c,a
132F : C9               " "             ret
                                ;
1330                            L1330:
1330 : 06 00            "  "            ld      b,000H
1332                            L1332:
1332 : D6 08            "  "            sub     008H
1334 : 38 07            "8 "            jr      c,L133D
1336 : 43               "C"             ld      b,e
1337 : 5A               "Z"             ld      e,d
1338 : 51               "Q"             ld      d,c
1339 : 0E 00            "  "            ld      c,000H
133B : 18 F5            "  "            jr      L1332
                                ;
133D                            L133D:
133D : C6 09            "  "            add     a,009H
133F : 6F               "o"             ld      l,a
1340 : 7A               "z"             ld      a,d
1341 : B3               " "             or      e
1342 : B0               " "             or      b
1343 : 20 09            "  "            jr      nz,L134E
1345 : 79               "y"             ld      a,c
1346                            L1346:
1346 : 2D               "-"             dec     l
1347 : C8               " "             ret     z
1348 : 1F               " "             rra
1349 : 4F               "O"             ld      c,a
134A : 30 FA            "0 "            jr      nc,L1346
134C : 18 06            "  "            jr      L1354
                                ;
134E                            L134E:
134E : AF               " "             xor     a
134F : 2D               "-"             dec     l
1350 : C8               " "             ret     z
1351 : 79               "y"             ld      a,c
1352                            L1352:
1352 : 1F               " "             rra
1353 : 4F               "O"             ld      c,a
1354                            L1354:
1354 : 7A               "z"             ld      a,d
1355 : 1F               " "             rra
1356 : 57               "W"             ld      d,a
1357 : 7B               "{"             ld      a,e
1358 : 1F               " "             rra
1359 : 5F               "_"             ld      e,a
135A : 78               "x"             ld      a,b
135B : 1F               " "             rra
135C : 47               "G"             ld      b,a
135D : 18 EF            "  "            jr      L134E
                                ;
135F : 00               " "             nop
1360 : 00               " "             nop
1361 : 00               " "             nop
1362 : 81               " "             add     a,c
1363 : 04               " "             inc     b
1364 : 9A               " "             sbc     a,d
1365 : F7               " "             rst     HOOKDO
1366 : 19               " "             add     hl,de
1367 : 83               " "             add     a,e
1368 : 24               "$"             inc     h
1369 : 63               "c"             ld      h,e
136A : 43               "C"             ld      b,e
136B : 83               " "             add     a,e
136C : 75               "u"             ld      (hl),l
136D : CD 8D 84         "   "           call    L848D
1370 : A9               " "             xor     c
1371 : 7F               " "             ld      a,a
1372 : 83               " "             add     a,e
1373 : 82               " "             add     a,d
1374 : 04               " "             inc     b
1375 : 00               " "             nop
1376 : 00               " "             nop
1377 : 00               " "             nop
1378 : 81               " "             add     a,c
1379 : E2 B0 4D         "  M"           jp      po,L4DB0
137C : 83               " "             add     a,e
137D : 0A               " "             ld      a,(bc)
137E : 72               "r"             ld      (hl),d
137F : 11 83 F4         "   "           ld      de,0F483H
1382 : 04               " "             inc     b
1383 : 35               "5"             dec     (hl)
1384 : 7F               " "             ld      a,a

1385 : EF             ?  LOG:   rst     FSIGN
1386 : B7                       or      a
1387 : EA 97 06                 jp      pe,FCERR
138A : CD 95 13                 call    L1395
138D : 01 31 80                 ld      bc,08031H
1390 : 11 18 72                 ld      de,07218H
1393 : 18 36                    jr      FMULT
                                ;
1395                            L1395:
1395 : CD 2E 15         " . "           call    MOVRF
1398 : 3E 80            "> "            ld      a,080H
139A : 32 E7 38         "2 8"           ld      (FACHO),a
139D : A8               " "             xor     b
139E : F5               " "             push    af
139F : CD 13 15         "   "           call    L1513
13A2 : 21 63 13         "!c "           ld      hl,01363H
13A5 : CD 46 18         " F "           call    L1846
13A8 : C1               " "             pop     bc
13A9 : E1               " "             pop     hl
13AA : CD 13 15         "   "           call    L1513
13AD : EB               " "             ex      de,hl
13AE : CD 23 15         " # "           call    MOVFR
13B1 : 21 74 13         "!t "           ld      hl,01374H
13B4 : CD 46 18         " F "           call    L1846
13B7 : C1               " "             pop     bc
13B8 : D1               " "             pop     de
13B9 : CD 2F 14         " / "           call    FDIV
13BC : F1               " "             pop     af
13BD : CD 13 15         "   "           call    L1513
13C0 : CD F6 14         "   "           call    FLOAT
13C3 : C1               " "             pop     bc
13C4 : D1               " "             pop     de
13C5 : C3 61 12         " a "           jp      FADD

                        ;;*** At this point I haven't found any jumps or calls to 13C8
                        ;;*** although they may be obscured by overlappng code
                        ;;*** Check again after disassembly is complete
13C8 : 21                       .byte   $21
13C9 : C1         [M80] FMULTT: pop     bc              ;;GET ARG IN REGISTERS, ENTRY TO FMULT IF
13CA : D1                       pop     de              ;; ARGUMENT IS ON STACK.  FALL INTO FMULT

13CB                    ;MULTIPLICATION		FAC:=ARG*FAC
13CB : EF         [M80] FMULT:  rst     FSIGN
13CC : C8                       ret     z
13CD : 2E 00                    ld      l,000H
13CF : CD AC 14                 call    MULDIV
13D2 : 79                       ld      a,c
13D3 : 32 F6 38                 ld      (X38F6),a
13D6 : EB                       ex      de,hl
13D7 : 22 F7 38                 ld      (X38F7),hl
13DA : 01 00 00                 ld      bc,00000H
13DD : 50                       ld      d,b
13DE : 58                       ld      e,b
13DF : 21 B0 12                 ld      hl,012B0H
13E2 : E5                       push    hl
13E3 : 21 EB 13                 ld      hl,013EBH
13E6 : E5                       push    hl
13E7 : E5                       push    hl
13E8 : 21 E4 38                 ld      hl,FACLO
13EB : 7E                       ld      a,(hl)
13EC : 23                       inc     hl
13ED : B7                       or      a
13EE : 28 2C                    jr      z,L141C
13F0 : E5                       push    hl
13F1 : 2E 08                    ld      l,008H
13F3                    L13F3:
13F3 : 1F                       rra
13F4 : 67                       ld      h,a
13F5 : 79                       ld      a,c
13F6 : 30 0B                    jr      nc,L1403
13F8 : E5                       push    hl
13F9 : 2A F7 38                 ld      hl,(X38F7)
13FC : 19                       add     hl,de
13FD : EB                       ex      de,hl
13FE : E1                       pop     hl
13FF : 3A F6 38                 ld      a,(X38F6)
1402 : 89                       adc     a,c
1403                    L1403:
1403 : 1F                       rra
1404 : 4F                       ld      c,a
1405 : 7A                       ld      a,d
1406 : 1F                       rra
1407 : 57                       ld      d,a
1408 : 7B                       ld      a,e
1409 : 1F                       rra
140A : 5F                       ld      e,a
140B : 78                       ld      a,b
140C : 1F                       rra
140D : 47                       ld      b,a
140E : E6 10                    and     010H
1410 : 28 04                    jr      z,L1416
1412 : 78                       ld      a,b
1413 : F6 20                    or      020H
1415 : 47                       ld      b,a
1416                    L1416:
1416 : 2D                       dec     l
1417 : 7C                       ld      a,h
1418 : 20 D9                    jr      nz,L13F3
141A                    L141A:
141A : E1                       pop     hl
141B : C9                       ret
                                ;
141C                            L141C:
141C : 43               "C"             ld      b,e
141D : 5A               "Z"             ld      e,d
141E : 51               "Q"             ld      d,c
141F : 4F               "O"             ld      c,a
1420 : C9               " "             ret
                                ;
1421                            L1421:
1421 : CD 13 15         "   "           call    L1513
1424 : 01 20 84         "   "           ld      bc,08420H
1427 : 11 00 00         "   "           ld      de,00000H
142A : CD 23 15         " # "           call    MOVFR

142D : C1         [M80] FDIVT:  pop     bc              ;;GET ARG IN REGISTERS, ENTRY TO FDIV IF
142E : D1                       pop     de              ;; ARGUMENT IS ON STACK.  FALL INTO FDIV

142F                    ;DIVISION	FAC:=ARG/FAC
142F : EF         [M80] FDIV:   rst     FSIGN           ;[M80] CHECK FOR DIVISION BY ZERO
1430 : CA C7 03                 jp      z,INTDV1        ;[M80] DON'T ALLOW DIVIDE BY ZERO
1433 : 2E FF                    ld      l,255           ;[M80] SUBTRACT THE TWO EXPONENTS, L IS A FLAG
1435 : CD AC 14                 call    MULDIV          ;[M80] FIX UP THE EXPONENTS AND THINGS
1438 : 34                       inc     (hl)
1439 : CA D3 03                 jp      z,L03D3
143C : 34                       inc     (hl)
143D : CA D3 03                 jp      z,L03D3
1440 : 2B                       dec     hl
1441 : 7E                       ld      a,(hl)
1442 : 32 19 38                 ld      (X3819),a
1445 : 2B                       dec     hl
1446 : 7E                       ld      a,(hl)
1447 : 32 15 38                 ld      (X3815),a
144A : 2B                       dec     hl
144B : 7E                       ld      a,(hl)
144C : 32 11 38                 ld      (X3811),a
144F : 41                       ld      b,c
1450 : EB                       ex      de,hl
1451 : AF                       xor     a
1452 : 4F                       ld      c,a
1453 : 57                       ld      d,a
1454 : 5F                       ld      e,a
1455 : 32 1C 38                 ld      (X381C),a
1458                    L1458:
1458 : E5                       push    hl
1459 : C5                       push    bc
145A : 7D                       ld      a,l
145B : CD 10 38                 call    L3810
145E : DE 00                    sbc     a,000H
1460 : 3F                       ccf
1461 : 30 07                    jr      nc,L146A
1463 : 32 1C 38                 ld      (X381C),a
1466 : F1                       pop     af
1467 : F1                       pop     af
1468 : 37                       scf
1469 : D2 C1 E1                 jp      nc,LE1C1
146C : 79                       ld      a,c
146D : 3C                       inc     a
146E : 3D                       dec     a
146F : 1F                       rra
1470 : F2 87 14                 jp      p,L1487
1473 : 17                       rla
1474 : 3A 1C 38                 ld      a,(X381C)
1477 : 1F                       rra
1478 : E6 C0                    and     0C0H
147A : F5                       push    af
147B : 78                       ld      a,b
147C : B4                       or      h
147D : B5                       or      l
147E : 28 02                    jr      z,L1482
1480 : 3E 20                    ld      a,020H
1482                    L1482:
1482 : E1                       pop     hl
1483 : B4                       or      h
1484 : C3 F2 12                 jp      L12F2
                        ;
1487                    L1487:
1487 : 17                       rla
1488 : 7B                       ld      a,e
1489 : 17                       rla
148A : 5F                       ld      e,a
148B : 7A                       ld      a,d
148C : 17                       rla
148D : 57                       ld      d,a
148E : 79                       ld      a,c
148F : 17                       rla
1490 : 4F                       ld      c,a
1491 : 29                       add     hl,hl
1492 : 78                       ld      a,b
1493 : 17                       rla
1494 : 47                       ld      b,a
1495 : 3A 1C 38                 ld      a,(X381C)
1498 : 17                       rla
1499 : 32 1C 38                 ld      (X381C),a
149C : 79                       ld      a,c
149D : B2                       or      d
149E : B3                       or      e
149F : 20 B7                    jr      nz,L1458
14A1 : E5                       push    hl
14A2 : 21 E7 38                 ld      hl,FACHO
14A5 : 35                       dec     (hl)
14A6 : E1                       pop     hl
14A7 : 20 AF                    jr      nz,L1458
14A9 : C3 C3 12                 jp      SNGFLT
                        ;
14AC : 78         [M80] MULDIV: ld      a,b
14AD : B7                       or      a
14AE : 28 1D                    jr      z,L14CD
14B0 : 7D                       ld      a,l
14B1 : 21 E7 38                 ld      hl,FACHO
14B4 : AE                       xor     (hl)
14B5 : 80                       add     a,b
14B6 : 47                       ld      b,a
14B7 : 1F                       rra
14B8 : A8                       xor     b
14B9 : 78                       ld      a,b
14BA : F2 CC 14                 jp      p,L14CC
14BD : C6 80                    add     a,080H
14BF : 77                       ld      (hl),a
14C0 : CA 1A 14                 jp      z,L141A
14C3 : CD 46 15                 call    L1546
14C6 : 77                       ld      (hl),a
14C7 : 2B                       dec     hl
14C8 : C9                       ret
                                ;
14C9 : EF               " "             rst     FSIGN
14CA : 2F               "/"             cpl
14CB : E1               " "             pop     hl
14CC                            L14CC:
14CC : B7               " "             or      a
14CD                            L14CD:
14CD : E1               " "             pop     hl
14CE : F2 C3 12         "   "           jp      p,SNGFLT
14D1 : C3 D3 03         "   "           jp      L03D3
                                ;
14D4                            L14D4:
14D4 : CD 2E 15         " . "           call    MOVRF
14D7 : 78               "x"             ld      a,b
14D8 : B7               " "             or      a
14D9 : C8               " "             ret     z
14DA : C6 02            "  "            add     a,002H
14DC : DA D3 03         "   "           jp      c,L03D3
14DF : 47               "G"             ld      b,a
14E0 : CD 61 12         " a "           call    FADD
14E3 : 21 E7 38         "! 8"           ld      hl,FACHO
14E6 : 34               "4"             inc     (hl)
14E7 : C0               " "             ret     nz
14E8 : C3 D3 03         "   "           jp      L03D3
                                ;
14EB
14EB : 3A E6 38   [M80] SIGNC:  ld      a,(FACHO)       ;[M80] GET SIGN OF FACHO, IT IS NON-ZERO
14EE : FE 2F                    cp      47
14F0 : 17                       rla
14F1                    L14F1:
14F1 : 9F                       sbc     a,a
14F2 : C0                       ret     nz
14F3 : 3C                       inc     a
14F4 : C9                       ret
                                ;

14F5 : EF             ? SGN:    rst     FSIGN
14F6 : 06 88      [M80] FLOAT:  ld      b,088H
14F8 : 11 00 00                 ld      de,00000H
14FB                    L14FB:
14FB : 21 E7 38                 ld      hl,FACHO
14FE : 4F                       ld      c,a
14FF : 70                       ld      (hl),b
1500 : 06 00                    ld      b,000H
1502 : 23                       inc     hl
1503 : 36 80                    ld      (hl),080H
1505 : 17                       rla
1506 : C3 AD 12                 jp      L12AD
                        ;
1509 : EF             ? ABS:    rst     FSIGN
150A : F0                       ret     p
150B                    NEG:
150B : 21 E6 38                 ld      hl,FACHO
150E : 7E                       ld      a,(hl)
150F : EE 80                    xor     080H
1511 : 77                       ld      (hl),a
1512 : C9                       ret

1513                            L1513:
1513 : EB                       ex      de,hl
1514 : 2A E4 38                 ld      hl,(FACLO)
1517 : E3                       ex      (sp),hl
1518 : E5                       push    hl
1519 : 2A E6 38                 ld      hl,(FACHO)
151C : E3                       ex      (sp),hl
151D : E5                       push    hl
151E : EB                       ex      de,hl
151F : C9                       ret
                                ;
1520 : CD 31 15   [M80] MOVFM:  call    MOVRM           ;[M80] MOVE NUMBER FROM MEMORY [(HL)] TO FAC
1523 : EB         [M80] MOVFR:  ex      de,hl           ;[M80] MOVE REGISTERS (B,C,D,E) TO FAC
1524 : 22 E4 38                 ld      (FACLO),hl
1527 : 60                       ld      h,b
1528 : 69                       ld      l,c
1529 : 22 E6 38                 ld      (FACHO),hl
152C : EB                       ex      de,hl
152D : C9                       ret

152E : 21 E4 38   [M80] MOVRF:  ld      hl,FACLO        ;MOVE FAC TO REGISTERS (B,C,D,E)
1531 : 5E         [M80] MOVRM:  ld      e,(hl)          ;[M80] GET NUMBER IN REGISTERS (B,C,D,E) FROM MEMORY [(HL)]
1532 : 23                       inc     hl
1533 : 56                       ld      d,(hl)
1534 : 23                       inc     hl
1535 : 4E                       ld      c,(hl)
1536 : 23                       inc     hl
1537 : 46                       ld      b,(hl)
1538 : 23         [M80] INXHRT: inc     hl              ;INC POINTER TO BEGINNING OF NEXT NUMBER
1539 : C9                       ret

153A                            MOVMF:
153A : 11 E4 38         "  8"           ld      de,FACLO
153D                            VMOVE:
153D : 06 04            "  "            ld      b,004H
153F                            L153F:
153F : 1A               " "             ld      a,(de)
1540 : 77               "w"             ld      (hl),a
1541 : 13               " "             inc     de
1542 : 23               "#"             inc     hl
1543 : 10 FA            "  "            djnz    L153F
1545 : C9               " "             ret
                                ;
1546                            L1546:
1546 : 21 E6 38         "! 8"           ld      hl,FACHO
1549 : 7E               "~"             ld      a,(hl)
154A : 07               " "             rlca
154B : 37               "7"             scf
154C : 1F               " "             rra
154D : 77               "w"             ld      (hl),a
154E : 3F               "?"             ccf
154F : 1F               " "             rra
1550 : 23               "#"             inc     hl
1551 : 23               "#"             inc     hl
1552 : 77               "w"             ld      (hl),a
1553 : 79               "y"             ld      a,c
1554 : 07               " "             rlca
1555 : 37               "7"             scf
1556 : 1F               " "             rra
1557 : 4F               "O"             ld      c,a
1558 : 1F               " "             rra
1559 : AE               " "             xor     (hl)
155A : C9               " "             ret
                                ;
155B                            L155B:
155B : 78               "x"             ld      a,b
155C : B7               " "             or      a
155D : CA 28 00         " ( "           jp      z,SIGN
1560 : 21 EF 14         "!  "           ld      hl,014EFH
1563 : E5               " "             push    hl
1564 : EF               " "             rst     FSIGN
1565 : 79               "y"             ld      a,c
1566 : C8               " "             ret     z
1567 : 21 E6 38         "! 8"           ld      hl,FACHO
156A : AE               " "             xor     (hl)
156B : 79               "y"             ld      a,c
156C : F8               " "             ret     m
156D : CD 73 15         " s "           call    L1573
1570 : 1F               " "             rra
1571 : A9               " "             xor     c
1572 : C9               " "             ret
                                ;
1573                            L1573:
1573 : 23               "#"             inc     hl
1574 : 78               "x"             ld      a,b
1575 : BE               " "             cp      (hl)
1576 : C0               " "             ret     nz
1577 : 2B               "+"             dec     hl
1578 : 79               "y"             ld      a,c
1579 : BE               " "             cp      (hl)
157A : C0               " "             ret     nz
157B : 2B               "+"             dec     hl
157C : 7A               "z"             ld      a,d
157D : BE               " "             cp      (hl)
157E : C0               " "             ret     nz
157F : 2B               "+"             dec     hl
1580 : 7B               "{"             ld      a,e
1581 : 96               " "             sub     (hl)
1582 : C0               " "             ret     nz
1583 : E1               " "             pop     hl
1584 : E1               " "             pop     hl
1585 : C9               " "             ret
                                ;
1586                            L1586:
1586 : 47               "G"             ld      b,a
1587 : 4F               "O"             ld      c,a
1588 : 57               "W"             ld      d,a
1589 : 5F               "_"             ld      e,a
158A : B7               " "             or      a
158B : C8               " "             ret     z
158C : E5               " "             push    hl
158D : CD 2E 15         " . "           call    MOVRF
1590 : CD 46 15         " F "           call    L1546
1593 : AE               " "             xor     (hl)
1594 : 67               "g"             ld      h,a
1595 : FC AA 15         "   "           call    m,L15AA
1598 : 3E 98            "> "            ld      a,098H
159A : 90               " "             sub     b
159B : CD 30 13         " 0 "           call    L1330
159E : 7C               "|"             ld      a,h
159F : 17               " "             rla
15A0 : DC 03 13         "   "           call    c,L1303
15A3 : 06 00            "  "            ld      b,000H
15A5 : DC 1C 13         "   "           call    c,L131C
15A8 : E1               " "             pop     hl
15A9 : C9               " "             ret
                                ;
15AA                            L15AA:
15AA : 1B               " "             dec     de
15AB : 7A               "z"             ld      a,d
15AC : A3               " "             and     e
15AD : 3C               "<"             inc     a
15AE : C0               " "             ret     nz
15AF : 0B               " "             dec     bc
15B0 : C9               " "             ret

15B1 : 21 E7 38       ? INT:    ld      hl,FACHO
15B4 : 7E                       ld      a,(hl)
15B5 : FE 98                    cp      098H
15B7 : 3A E4 38                 ld      a,(FACLO)
15BA : D0                       ret     nc
15BB : 7E                       ld      a,(hl)
15BC : CD 86 15                 call    L1586
15BF : 36 98                    ld      (hl),098H
15C1 : 7B                       ld      a,e
15C2 : F5                       push    af
15C3 : 79                       ld      a,c
15C4 : 17                       rla
15C5 : CD AD 12                 call    L12AD
15C8 : F1                       pop     af
15C9 : C9                       ret
                                ;
15CA                            L15CA:
15CA : 21 00 00         "!  "           ld      hl,00000H
15CD : 78               "x"             ld      a,b
15CE : B1               " "             or      c
15CF : C8               " "             ret     z
15D0 : 3E 10            "> "            ld      a,010H
15D2                            L15D2:
15D2 : 29               ")"             add     hl,hl
15D3 : DA CD 11         "   "           jp      c,L11CD
15D6 : EB               " "             ex      de,hl
15D7 : 29               ")"             add     hl,hl
15D8 : EB               " "             ex      de,hl
15D9 : D2 E0 15         "   "           jp      nc,L15E0
15DC : 09               " "             add     hl,bc
15DD : DA CD 11         "   "           jp      c,L11CD
15E0                            L15E0:
15E0 : 3D               "="             dec     a
15E1 : C2 D2 15         "   "           jp      nz,L15D2
15E4 : C9               " "             ret
                                ;
15E5                            FIN:
15E5 : FE 2D            " -"            cp      02DH
15E7 : F5               " "             push    af
15E8 : 28 05            "( "            jr      z,L15EF
15EA : FE 2B            " +"            cp      02BH
15EC : 28 01            "( "            jr      z,L15EF
15EE : 2B               "+"             dec     hl
15EF                            L15EF:
15EF : CD C3 12         "   "           call    SNGFLT
15F2 : 47               "G"             ld      b,a
15F3 : 57               "W"             ld      d,a
15F4 : 5F               "_"             ld      e,a
15F5 : 2F               "/"             cpl
15F6 : 4F               "O"             ld      c,a
15F7                            L15F7:
15F7 : D7               " "             rst     CHRGET
15F8 : DA 3F 16         " ? "           jp      c,L163F
15FB : FE 2E            " ."            cp      02EH
15FD : CA 1A 16         "   "           jp      z,L161A
1600 : FE 65            " e"            cp      065H
1602 : CA 0A 16         "   "           jp      z,L160A
1605 : FE 45            " E"            cp      045H
1607 : C2 1E 16         "   "           jp      nz,L161E
160A                            L160A:
160A : D7               " "             rst     CHRGET
160B : CD 98 0A         "   "           call    L0A98
160E                            L160E:
160E : D7               " "             rst     CHRGET
160F : DA 61 16         " a "           jp      c,L1661
1612 : 14               " "             inc     d
1613 : C2 1E 16         "   "           jp      nz,L161E
1616 : AF               " "             xor     a
1617 : 93               " "             sub     e
1618 : 5F               "_"             ld      e,a
1619 : 0C               " "             inc     c
161A                            L161A:
161A : 0C               " "             inc     c
161B : CA F7 15         "   "           jp      z,L15F7
161E                            L161E:
161E : E5               " "             push    hl
161F : 7B               "{"             ld      a,e
1620 : 90               " "             sub     b
1621                            L1621:
1621 : F4 37 16         " 7 "           call    p,L1637
1624 : F2 2D 16         " - "           jp      p,L162D
1627 : F5               " "             push    af
1628 : CD 21 14         " ! "           call    L1421
162B : F1               " "             pop     af
162C : 3C               "<"             inc     a
162D                            L162D:
162D : C2 21 16         " ! "           jp      nz,L1621
1630 : D1               " "             pop     de
1631 : F1               " "             pop     af
1632 : CC 0B 15         "   "           call    z,NEG
1635 : EB               " "             ex      de,hl
1636 : C9               " "             ret
                                ;
1637                            L1637:
1637 : C8               " "             ret     z
1638                            L1638:
1638 : F5               " "             push    af
1639 : CD D4 14         "   "           call    L14D4
163C : F1               " "             pop     af
163D : 3D               "="             dec     a
163E : C9               " "             ret
                                ;
163F                    L163F:
163F : D5                        push    de
1640 : 57                        ld      d,a
1641 : 78                        ld      a,b
1642 : 89                        adc     a,c
1643 : 47                        ld      b,a
1644 : C5                        push    bc
1645 : E5                        push    hl
1646 : D5                        push    de
1647 : CD D4 14                  call    L14D4
164A : F1                        pop     af
164B : D6 30                     sub     030H
164D : CD 56 16                  call    L1656
1650 : E1                        pop     hl
1651 : C1                        pop     bc
1652 : D1                        pop     de
1653 : C3 F7 15                 jp      L15F7

1656                    L1656:
1656 : CD 13 15                 call    L1513
1659 : CD F6 14                 call    FLOAT

165C : C1        [M80] FADDT:   pop     bc              ;GET ARG IN REGISTERS, ENTRY TO FADD IF
165D : D1                       pop     de              ; ARGUMENT IS ON STACK.  JUMP TO FADD
165E : C3 61 12                 jp      FADD

1661                            L1661:
1661 : 7B               "{"             ld      a,e
1662 : 07               " "             rlca
1663 : 07               " "             rlca
1664 : 83               " "             add     a,e
1665 : 07               " "             rlca
1666 : 86               " "             add     a,(hl)
1667 : D6 30            " 0"            sub     030H
1669 : 5F               "_"             ld      e,a
166A : C3 0E 16         "   "           jp      L160E
                                ;
166D
166D : E5         [M80] INPRT:  push    hl
166E : 21 69 03                 ld      hl,INTXT
1671 : CD 9D 0E                 call    STROUT
1674 : E1                       pop     hl
1675                            L1675:
1675 : 11 9C 0E         "   "           ld      de,STROUI
1678 : D5               " "             push    de
1679 : EB               " "             ex      de,hl
167A : AF               " "             xor     a
167B : 06 98            "  "            ld      b,098H
167D : CD FB 14         "   "           call    L14FB
1680                            L1680:
1680 : 21 E9 38         "! 8"           ld      hl,038E9H
1683 : E5               " "             push    hl
1684 : EF               " "             rst     FSIGN
1685 : 36 20            "6 "            ld      (hl),020H
1687 : F2 8C 16         "   "           jp      p,L168C
168A : 36 2D            "6-"            ld      (hl),02DH
168C                            L168C:
168C : 23               "#"             inc     hl
168D : 36 30            "60"            ld      (hl),030H
168F : CA 42 17         " B "           jp      z,L1742
1692 : E5               " "             push    hl
1693 : FC 0B 15         "   "           call    m,NEG
1696 : AF               " "             xor     a
1697 : F5               " "             push    af
1698 : CD 48 17         " H "           call    L1748
169B                            L169B:
169B : 01 43 91         " C "           ld      bc,09143H
169E : 11 F8 4F         "  O"           ld      de,04FF8H
16A1 : CD 5B 15         " [ "           call    L155B
16A4 : B7               " "             or      a
16A5 : E2 B9 16         "   "           jp      po,L16B9
16A8 : F1               " "             pop     af
16A9 : CD 38 16         " 8 "           call    L1638
16AC : F5               " "             push    af
16AD : C3 9B 16         "   "           jp      L169B
                                ;
16B0                            L16B0:
16B0 : CD 21 14         " ! "           call    L1421
16B3 : F1               " "             pop     af
16B4 : 3C               "<"             inc     a
16B5 : F5               " "             push    af
16B6 : CD 48 17         " H "           call    L1748
16B9                            L16B9:
16B9 : CD 50 12         " P "           call    L1250
16BC : 3C               "<"             inc     a
16BD : CD 86 15         "   "           call    L1586
16C0 : CD 23 15         " # "           call    MOVFR
16C3 : 01 06 03         "   "           ld      bc,00306H
16C6 : F1               " "             pop     af
16C7 : 81               " "             add     a,c
16C8 : 3C               "<"             inc     a
16C9 : FA D5 16         "   "           jp      m,L16D5
16CC : FE 08            "  "            cp      008H
16CE : D2 D5 16         "   "           jp      nc,L16D5
16D1 : 3C               "<"             inc     a
16D2 : 47               "G"             ld      b,a
16D3 : 3E 02            "> "            ld      a,002H
16D5                            L16D5:
16D5 : 3D               "="             dec     a
16D6 : 3D               "="             dec     a
16D7 : E1               " "             pop     hl
16D8 : F5               " "             push    af
16D9 : 11 5E 17         " ^ "           ld      de,0175EH
16DC : 05               " "             dec     b
16DD : C2 E6 16         "   "           jp      nz,L16E6
16E0 : 36 2E            "6."            ld      (hl),02EH
16E2 : 23               "#"             inc     hl
16E3 : 36 30            "60"            ld      (hl),030H
16E5 : 23               "#"             inc     hl
16E6                            L16E6:
16E6 : 05               " "             dec     b
16E7 : 36 2E            "6."            ld      (hl),02EH
16E9 : CC 38 15         " 8 "           call    z,INXHRT
16EC : C5               " "             push    bc
16ED : E5               " "             push    hl
16EE : D5               " "             push    de
16EF : CD 2E 15         " . "           call    MOVRF
16F2 : E1               " "             pop     hl
16F3 : 06 2F            " /"            ld      b,02FH
16F5                            L16F5:
16F5 : 04               " "             inc     b
16F6 : 7B               "{"             ld      a,e
16F7 : 96               " "             sub     (hl)
16F8 : 5F               "_"             ld      e,a
16F9 : 23               "#"             inc     hl
16FA : 7A               "z"             ld      a,d
16FB : 9E               " "             sbc     a,(hl)
16FC : 57               "W"             ld      d,a
16FD : 23               "#"             inc     hl
16FE : 79               "y"             ld      a,c
16FF : 9E               " "             sbc     a,(hl)
1700 : 4F               "O"             ld      c,a
1701 : 2B               "+"             dec     hl
1702 : 2B               "+"             dec     hl
1703 : D2 F5 16         "   "           jp      nc,L16F5
1706 : CD 10 13         "   "           call    L1310
1709 : 23               "#"             inc     hl
170A : CD 23 15         " # "           call    MOVFR
170D : EB               " "             ex      de,hl
170E : E1               " "             pop     hl
170F : 70               "p"             ld      (hl),b
1710 : 23               "#"             inc     hl
1711 : C1               " "             pop     bc
1712 : 0D               " "             dec     c
1713 : C2 E6 16         "   "           jp      nz,L16E6
1716 : 05               " "             dec     b
1717 : CA 26 17         " & "           jp      z,L1726
171A                            L171A:
171A : 2B               "+"             dec     hl
171B : 7E               "~"             ld      a,(hl)
171C : FE 30            " 0"            cp      030H
171E : CA 1A 17         "   "           jp      z,L171A
1721 : FE 2E            " ."            cp      02EH
1723 : C4 38 15         " 8 "           call    nz,INXHRT
1726                            L1726:
1726 : F1               " "             pop     af
1727 : CA 45 17         " E "           jp      z,L1745
172A : 36 45            "6E"            ld      (hl),045H
172C : 23               "#"             inc     hl
172D : 36 2B            "6+"            ld      (hl),02BH
172F : F2 36 17         " 6 "           jp      p,L1736
1732 : 36 2D            "6-"            ld      (hl),02DH
1734 : 2F               "/"             cpl
1735 : 3C               "<"             inc     a
1736                            L1736:
1736 : 06 2F            " /"            ld      b,02FH
1738                            L1738:
1738 : 04               " "             inc     b
1739 : D6 0A            "  "            sub     00AH
173B : D2 38 17         " 8 "           jp      nc,L1738
173E : C6 3A            " :"            add     a,03AH
1740 : 23               "#"             inc     hl
1741 : 70               "p"             ld      (hl),b
1742                            L1742:
1742 : 23               "#"             inc     hl
1743 : 77               "w"             ld      (hl),a
1744 : 23               "#"             inc     hl
1745                            L1745:
1745 : 71               "q"             ld      (hl),c
1746 : E1               " "             pop     hl
1747 : C9               " "             ret
                                ;
1748                            L1748:
1748 : 01 74 94         " t "           ld      bc,09474H
174B : 11 F7 23         "  #"           ld      de,023F7H
174E : CD 5B 15         " [ "           call    L155B
1751 : B7               " "             or      a
1752 : E1               " "             pop     hl
1753 : E2 B0 16         "   "           jp      po,L16B0
1756 : E9               " "             jp      (hl)
                                ;
1757 : 00               " "             nop
1758 : 00               " "             nop
1759 : 00               " "             nop
175A : 80               " "             add     a,b
175B : 40               "@"             ld      b,b
175C : 42               "B"             ld      b,d
175D : 0F               " "             rrca
175E : A0               " "             and     b
175F : 86               " "             add     a,(hl)
1760 : 01 10 27         "  '"           ld      bc,02710H
1763 : 00               " "             nop
1764 : E8               " "             ret     pe
1765 : 03               " "             inc     bc
1766 : 00               " "             nop
1767 : 64               "d"             ld      h,h
1768 : 00               " "             nop
1769 : 00               " "             nop
176A : 0A               " "             ld      a,(bc)
176B : 00               " "             nop
176C : 00               " "             nop
176D : 01 00 00         "   "           ld      bc,00000H
1770                            L1770:
1770 : 21 0B 15         "!  "           ld      hl,0150BH
1773 : E3               " "             ex      (sp),hl
1774 : E9               " "             jp      (hl)
                                ;
1775 : CD 13 15       ? SQR:    call    L1513
1778 : 21 57 17                 ld      hl,01757H
177B : CD 20 15                 call    MOVFM

177E : C1         [M80] FPWRT:  pop     bc      ;GET ARG IN REGISTERS, ENTRY TO FPWR IF
177F : D1                       pop     de      ; ARGUMENT IS ON STACK.  FALL INTO FPWR

1780 : EF         [M80] FPWR:   rst     FSIGN
1781 : 78                       ld      a,b
1782 : CA CD 17                 jp      z,EXP
1785 : F2 8C 17                 jp      p,L178C
1788 : B7                       or      a
1789 : CA C7 03                 jp      z,INTDV1
178C                            L178C:
178C : B7               " "             or      a
178D : CA C4 12         "   "           jp      z,L12C4
1790 : D5               " "             push    de
1791 : C5               " "             push    bc
1792 : 79               "y"             ld      a,c
1793 : F6 7F            "  "            or      07FH
1795 : CD 2E 15         " . "           call    MOVRF
1798 : F2 B5 17         "   "           jp      p,L17B5
179B : F5               " "             push    af
179C : 3A E7 38         ": 8"           ld      a,(FACHO)
179F : FE 99            "  "            cp      099H
17A1 : 38 03            "8 "            jr      c,L17A6
17A3 : F1               " "             pop     af
17A4 : 18 0F            "  "            jr      L17B5
                                ;
17A6                            L17A6:
17A6 : F1               " "             pop     af
17A7 : D5               " "             push    de
17A8 : C5               " "             push    bc
17A9 : CD B1 15         "   "           call    INT
17AC : C1               " "             pop     bc
17AD : D1               " "             pop     de
17AE : F5               " "             push    af
17AF : CD 5B 15         " [ "           call    L155B
17B2 : E1               " "             pop     hl
17B3 : 7C               "|"             ld      a,h
17B4 : 1F               " "             rra
17B5                            L17B5:
17B5 : E1               " "             pop     hl
17B6 : 22 E6 38         "" 8"           ld      (FACHO),hl
17B9 : E1               " "             pop     hl
17BA : 22 E4 38         "" 8"           ld      (FACLO),hl
17BD : DC 70 17         " p "           call    c,L1770
17C0 : CC 0B 15         "   "           call    z,NEG
17C3 : D5               " "             push    de
17C4 : C5               " "             push    bc
17C5 : CD 85 13         "   "           call    LOG
17C8 : C1               " "             pop     bc
17C9 : D1               " "             pop     de
17CA : CD CB 13         "   "           call    FMULT

17CD : 01 38 81       ?  EXP:   ld      bc,08138H
17D0 : 11 3B AA                 ld      de,0AA3BH
17D3 : CD CB 13                 call    FMULT
17D6 : 3A E7 38                 ld      a,(FACHO)
17D9 : FE 88                    cp      088H
17DB : 30 22                    jr      nc,L17FF
17DD : FE 68                    cp      068H
17DF : 38 30                    jr      c,L1811
17E1 : CD 13 15                 call    L1513
17E4 : CD B1 15                 call    INT
17E7 : C6 81                    add     a,081H
17E9 : C1                       pop     bc
17EA : D1                       pop     de
17EB : 28 15                    jr      z,L1802
17ED : F5                       push    af
17EE : CD 5E 12                 call    FSUB
17F1 : 21 1A 18                 ld      hl,0181AH
17F4 : CD 46 18                 call    L1846
17F7 : C1                       pop     bc
17F8 : 11 00 00                 ld      de,00000H
17FB : 4A                       ld      c,d
17FC : C3 CB 13                 jp      FMULT
                                ;
17FF                            L17FF:
17FF : CD 13 15         "   "           call    L1513
1802                            L1802:
1802 : 3A E6 38         ": 8"           ld      a,(FACHO)
1805 : B7               " "             or      a
1806 : F2 0E 18         "   "           jp      p,L180E
1809 : F1               " "             pop     af
180A : F1               " "             pop     af
180B : C3 C3 12         "   "           jp      SNGFLT
180E                            L180E:
180E : C3 D3 03         "   "           jp      L03D3
                                ;
1811                            L1811:
1811 : 01 00 81         "   "           ld      bc,08100H
1814 : 11 00 00         "   "           ld      de,00000H
1817 : C3 23 15         " # "           jp      MOVFR
                                ;
181A : 07               " "             rlca
181B : 7C               "|"             ld      a,h
181C : 88               " "             adc     a,b
181D : 59               "Y"             ld      e,c
181E : 74               "t"             ld      (hl),h
181F : E0               " "             ret     po
1820 : 97               " "             sub     a
1821 : 26 77            "&w"            ld      h,077H
1823 : C4 1D 1E         "   "           call    nz,RESREG
1826 : 7A               "z"             ld      a,d
1827 : 5E               "^"             ld      e,(hl)
1828 : 50               "P"             ld      d,b
1829 : 63               "c"             ld      h,e
182A : 7C               "|"             ld      a,h
182B : 1A               " "             ld      a,(de)
182C : FE 75            " u"            cp      075H
182E : 7E               "~"             ld      a,(hl)
182F : 18 72            " r"            jr      L18A3
                                ;
1831 : 31 80 00         "1  "           ld      sp,00080H
1834 : 00               " "             nop
1835 : 00               " "             nop
1836 : 81               " "             add     a,c
1837                            L1837:
1837 : CD 13 15         "   "           call    L1513
183A : 11 C9 13         "   "           ld      de,013C9H
183D : D5               " "             push    de
183E : E5               " "             push    hl
183F : CD 2E 15         " . "           call    MOVRF
1842 : CD CB 13         "   "           call    FMULT
1845 : E1               " "             pop     hl
1846                            L1846:
1846 : CD 13 15         "   "           call    L1513
1849 : 7E               "~"             ld      a,(hl)
184A : 23               "#"             inc     hl
184B : CD 20 15         "   "           call    MOVFM
184E : 06 F1            "  "            ld      b,0F1H
1850 : C1               " "             pop     bc
1851 : D1               " "             pop     de
1852 : 3D               "="             dec     a
1853 : C8               " "             ret     z
1854 : D5               " "             push    de
1855 : C5               " "             push    bc
1856 : F5               " "             push    af
1857 : E5               " "             push    hl
1858 : CD CB 13         "   "           call    FMULT
185B : E1               " "             pop     hl
185C : CD 31 15         " 1 "           call    MOVRM
185F : E5               " "             push    hl
1860 : CD 61 12         " a "           call    FADD
1863 : E1               " "             pop     hl
1864 : 18 E9            "  "            jr      L184F

1866 : EF         [M80] RND:    rst     FSIGN           ;[M80] GET SIGN OF ARG
1867 : 21 20 38                 ld      hl,RNDX
186A : FA C4 18                 jp      m,RNDSTR        ;[M80] START NEW SEQUENCE IF NEGATIVE
186D : 21 41 38                 ld      hl,03841H       ;[M80] GET LAST NUMBER GENERATED
1870 : CD 20 15                 call    MOVFM
1873 : 21 20 38                 ld      hl,RNDX
1876 : C8                       ret     z               ;[M80] RETURN LAST NUMBER GENERATED IF ZERO
1877 : 86                       add     a,(hl)          ;[M80] GET COUNTER INTO CONSTANTS AND ADD ONE
1878 : E6 07                    and     7
187A : 06 00                    ld      b,0
187C : 77                       ld      (hl),a
187D : 23                       inc     hl
187E : 87                       add     a,a
187F : 87                       add     a,a
1880 : 4F                       ld      c,a
1881 : 09                       add     hl,bc
1882 : CD 31 15                 call    MOVRM
1885 : CD CB 13                 call    FMULT
1888 : 3A 1F 38                 ld      a,(RNDCNT)
188B : 3C                       inc     a
188C : E6 03                    and     3
188E : 06 00                    ld      b,000H
1890 : FE 01                    cp      1
1892 : 88                       adc     a,b
1893 : 32 1F 38                 ld      (RNDCNT),a
1896 : 21 C7 18                 ld      hl,RNDTB2-4
1899 : 87                       add     a,a
189A : 87                       add     a,a
189B : 4F                       ld      c,a
189C : 09                       add     hl,bc
189D : CD 53 12                 call    L1253
18A0
18A0 : CD 2E 15   [M80] RND1:   call    MOVRF           ;[M80] SWITCH HO AND LO BYTES,
18A3 : 7B               L18A3:  ld      a,e             ;[M80] GET LO
18A4 : 59                       ld      e,c             ;[M80] PUT HO IN LO BYTE
18A5 : EE 4F                    xor     $4F
18A7 : 4F                       ld      c,a             ;[M80] PUT LO IN HO BYTE
18A8 : 36 80                    ld      (hl),128        ;[M80] MAKE RESULT POSITIVE
18AA : 2B                       dec     hl              ;[M80] GET POINTER TO EXPONENT
18AB : 46                       ld      b,(hl)          ;[M80] PUT EXPONENT IN OVERFLOW POSITION
18AC : 36 80                    ld      (hl),128        ;[M80] SET EXP SO RESULT WILL BE BETWEEN 0 AND 1
18AE : 21 1E 38                 ld      hl,RNDCNT-1
18B1 : 34                       inc     (hl)            ;[M80] INCREMENT THE PERTUBATION COUNT
18B2 : 7E                       ld      a,(hl)          ;[M80] SEE IF ITS TIME
18B3 : D6 AB                    sub     $AB
18B5 : 20 04                    jr      nz,NTPTRB
18B7 : 77                       ld      (hl),a          ;[M80] ZERO THE COUNTER
18B8 : 0C                       inc     c
18B9 : 15                       dec     d
18BA : 1C                       inc     e
18BB : CD B0 12   [M80] NTPTRB: call    NORMAL
18BE : 21 41 38                 ld      hl,03841H
18C1 : C3 3A 15                 jp      MOVMF

18C4 : 77         [M80] RNDSTR: ld      (hl),a          ;[M80] ZERO THE COUNTERS
18C5 : 2B                       dec     hl
18C6 : 77                       ld      (hl),a
18C7 : 2B                       dec     hl
18C8 : 77                       ld      (hl),a
18C9 : 18 D5                    jr      RND1

                   [M80] RNDTB2:
18CB : 68 B1 46 68              .byte   $68,$B1,$46,$68
18CF : 99 E9 92 69              .byte   $99,$E9,$92,$69
18D3 : 10 D1 75 68              .byte   $10,$D1,$75,$68

18D7                  ? COS:
18D7 : 21 53 19                 ld      hl,01953H
18DA : CD 53 12                 call    L1253

18DD                  ? SIN:
18DD : 3A E7 38                 ld      a,(FACHO)
18E0 : FE 77                    cp      077H
18E2 : D8                       ret     c
18E3 : 3A E6 38                 ld      a,(FACHO)
18E6 : B7                       or      a
18E7 : F2 F3 18                 jp      p,L18F3
18EA : E6 7F                    and     07FH
18EC : 32 E6 38                 ld      (FACHO),a
18EF : 11 0B 15                 ld      de,0150BH
18F2 : D5                       push    de
18F3                            L18F3:
18F3 : 01 22 7E         " "~"           ld      bc,07E22H
18F6 : 11 83 F9         "   "           ld      de,0F983H
18F9 : CD CB 13         "   "           call    FMULT
18FC : CD 13 15         "   "           call    L1513
18FF : CD B1 15         "   "           call    INT
1902 : C1               " "             pop     bc
1903 : D1               " "             pop     de
1904 : CD 5E 12         " ^ "           call    FSUB
1907 : 01 00 7F         "   "           ld      bc,07F00H
190A : 11 00 00         "   "           ld      de,00000H
190D : CD 5B 15         " [ "           call    L155B
1910 : FA 35 19         " 5 "           jp      m,L1935
1913 : 01 80 7F         "   "           ld      bc,07F80H
1916 : 11 00 00         "   "           ld      de,00000H
1919 : CD 61 12         " a "           call    FADD
191C : 01 80 80         "   "           ld      bc,08080H
191F : 11 00 00         "   "           ld      de,00000H
1922 : CD 61 12         " a "           call    FADD
1925 : EF               " "             rst     FSIGN
1926 : F4 0B 15         "   "           call    p,NEG
1929 : 01 00 7F         "   "           ld      bc,07F00H
192C : 11 00 00         "   "           ld      de,00000H
192F : CD 61 12         " a "           call    FADD
1932 : CD 0B 15         "   "           call    NEG
1935                            L1935:
1935 : 3A E6 38         ": 8"           ld      a,(FACHO)
1938 : B7               " "             or      a
1939 : F5               " "             push    af
193A : F2 42 19         " B "           jp      p,L1942
193D : EE 80            "  "            xor     080H
193F : 32 E6 38         "2 8"           ld      (FACHO),a
1942                            L1942:
1942 : 21 5B 19         "![ "           ld      hl,0195BH
1945 : CD 37 18         " 7 "           call    L1837
1948 : F1               " "             pop     af
1949 : F0               " "             ret     p
194A : 3A E6 38         ": 8"           ld      a,(FACHO)
194D : EE 80            "  "            xor     080H
194F : 32 E6 38         "2 8"           ld      (FACHO),a
1952 : C9               " "             ret
                                ;
1953 : DB 0F            "  "            in      a,(00FH)
1955 : 49               "I"             ld      c,c
1956 : 81               " "             add     a,c
1957 : 00               " "             nop
1958 : 00               " "             nop
1959 : 00               " "             nop
195A : 7F               " "             ld      a,a
195B : 05               " "             dec     b
195C : FB               " "             ei
195D : D7               " "             rst     CHRGET
195E : 1E 86            "  "            ld      e,086H
1960 : 65               "e"             ld      h,l
1961 : 26 99            "& "            ld      h,099H
1963 : 87               " "             add     a,a
1964 : 58               "X"             ld      e,b
1965 : 34               "4"             inc     (hl)
1966 : 23               "#"             inc     hl
1967 : 87               " "             add     a,a
1968 : E1               " "             pop     hl
1969 : 5D               "]"             ld      e,l
196A : A5               " "             and     l
196B : 86               " "             add     a,(hl)
196C : DB 0F            "  "            in      a,(00FH)
196E : 49               "I"             ld      c,c
196F : 83               " "             add     a,e

1970 : CD 13 15       ? TAN:    call    L1513
1973 : CD DD 18                 call    SIN
1976 : C1                       pop     bc
1977 : E1                       pop     hl
1978 : CD 13 15                 call    L1513
197B : EB                       ex      de,hl
197C : CD 23 15                 call    MOVFR
197F : CD D7 18                 call    COS
1982 : C3 2D 14                 jp      FDIVT

1985 : F7               ATN:    rst     HOOKDO          ;execute hook routine 15 (ATN)
1986 : 0E                       db.c    15              ;if not implemented
1988 : C3 C4 03                 jmp     SNERR           ;  generate SYNTAX error

198A : F7         [M80] OUTDO:  rst     HOOKDO          ;execute hook routine 15 (ATN)
198B : 0D                       db.c    13              ;if not implemented
198C : F5         [M80] OUTCON: push    af
198D : 3A 47 38   [M80] LPTCOD: ld      a,(PRTFLG)      ;[M80] SEE IF WE WANT TO TALK TO LPT
1990 : B7                       or      a               ;[M80] TEST BITS
1991 : CA D6 19                 jp      z,TTYPOP        ;[M80] IF ZERO THEN NOT
1994 : F1                       pop     af
                                ;; Print character in [A] to printer
1995 : F5                       push    af
1996 : FE 09                    cp      9               ;[M80] TAB
1998 : 20 0C                    jr      nz,NOTABL       ;[M80] NO
199A              [M80] MORSPL: ;; Print spaces until next Tab Stop is reached
199A : 3E 20                    ld      a,' '           ;[M80] GET SPACE
199C : DF                       rst     CHROUT          ;[M80] SEND IT
199D : 3A 46 38                 ld      a,(LPTPOS)      ;[M80] GET CURRENT PRINT POSIT
19A0 : E6 07                    and     7               ;[M80] AT TAB STOP?
19A2 : 20 F6                    jr      nz,MORSPL       ;[M80] GO BACK IF MORE TO PRINT
19A4 : F1                       pop     af              ;[M80] POP OFF CHAR
19A5 : C9                       ret                     ;[M80] RETURN

19A6 : F1         [M80] NOTABL: pop     af              ;[M80] GET CHAR BACK
19A7 : F5                       push    af              ;[M80] SAVE AGAIN
19A8 : D6 0D                    sub     13              ;[M80] IF FUNNY CONTROL CHAR, (LF) DO NOTHING
19AA : 28 0B                    jr      z,ZERLP1
19AC : 38 0C                    jr      c,LPTPOP        ;[M80] JUST PRINT CHAR
19AE : 3A 46 38                 ld      a,(LPTPOS)      ;[M80] GET POSIT
19B1 : 3C                       inc     a
19B2 : FE 84                    cp      132
19B4 : CC C7 19                 call    z,PRINTW
19B7 : 32 46 38   [M80] ZERLP1: ld      (LPTPOS),a      ;Save print pos
19BA : F1               LPTPOP: pop     af              ;Print character on stack
19BB : C3 E8 1A   [M80] LPTCHR: jp      LPTOUT          ;Print raw character to printer

19BE : AF         [M80] FINLPT: xor     a               ;[M80] RESET PRINT FLAG SO
19BF : 32 47 38                 ld      (PRTFLG),a      ;[M80] OUTPUT GOES TO TERMINAL
19C2 : 3A 46 38                 ld      a,(LPTPOS)      ;[M80] GET CURRENT LPT POSIT
19C5 : B7                       or      a               ;[M80] ON LEFT HAND MARGIN ALREADY?
19C6 : C8                       ret     z               ;[M80] YES, RETURN
19C7
19C7 : 3E 0D      [M80] PRINTW: ld      a,13            ;[M80] PUT OUT CRLF
19C9 : CD BB 19                 call    LPTCHR
19CC : 3E 0A                    ld      a,10
19CE : CD BB 19                 call    LPTCHR
19D1 : AF                       xor     a               ;[M80] ZERO LPTPOS
19D2 : 32 46 38                 ld      (LPTPOS),a
19D5 : C9                       ret                     ;[M80] DONE


19D6 : F1         [M80] TTYPOP: pop     af              ;Print character on stack to screen
19D7 : C3 72 1D                 jp      TTYCHR

19DA                    INCHR:
19DA : CD 2F 1A                 call    L1A2F
19DD : C9                       ret
                                ;
                        ; CRDONZ Only does a CR if TTYPOS is not Zero.
                        ; In other words, only print a carriage return when not at left margin.
19DE : 3A 00 38   [M80] CRDONZ: ld      a,(TTYPOS)      ;GET CURRENT TTYPOS
19E1 : B7                       or      a               ;SET CC'S
19E2 : C8                       ret     z               ;IF ALREADY ZERO, RETURN
19E3 : 18 05                    jr      CRDO           ;DO CR
                                ;
19E5                            GFNINL:
19E5 : 36 00            "6 "            ld      (hl),000H
19E7 : 21 5F 38         "!_8"           ld      hl,0385FH
19EA
19EA : 3E 0D      [M80] CRDO:   ld      a,CHRRET
19EC : DF                       rst     CHROUT
19ED : 3E 0A                    ld      a,CHRLNF
19EF : DF         {M80} CRFINO: rst     CHROUT
19F0 : 3A 47 38   [M80] CRFIN:  ld      a,(PRTFLG)      ;[M80] SEE IF OUTPUTTING TO PRINTER
19F3 : B7                       or      a
19F4 : 28 04                    jr      z,CRCONT        ;[M80] NOT PRINTER, CONTINUE
19F6 : AF                       xor     a               ;[M80] CRFIN MUST ALWAYS RETURN WITH A=0
19F7 : 32 46 38                 ld      (LPTPOS),a      ;;Set Print Head position to 0
19FA : C9               CRCONT: ret

19FB                            L19FB:
19FB : D7               " "             rst     CHRGET
19FC : E5               " "             push    hl
19FD : CD 18 1A         "   "           call    L1A18
1A00 : 28 09            "( "            jr      z,L1A0B
1A02 : F5               " "             push    af
1A03 : CD 4E 0E         " N "           call    STRIN1
1A06 : F1               " "             pop     af
1A07 : 5F               "_"             ld      e,a
1A08 : CD 19 10         "   "           call    SETSTR
1A0B                            L1A0B:
1A0B : 21 6D 03         "!m "           ld      hl,0036DH
1A0E : 22 E4 38         "" 8"           ld      (FACLO),hl
1A11 : 3E 01            "> "            ld      a,001H
1A13 : 32 AB 38         "2 8"           ld      (VALTYP),a
1A16 : E1               " "             pop     hl
1A17 : C9               " "             ret
                                ;
1A18                            L1A18:
1A18 : E5               " "             push    hl
1A19 : 21 0A 38         "! 8"           ld      hl,X380A
1A1C : 7E               "~"             ld      a,(hl)
1A1D : 36 00            "6 "            ld      (hl),000H
1A1F : B7               " "             or      a
1A20 : CC 39 1A         " 9 "           call    z,L1A39
1A23 : E1               " "             pop     hl
1A24 : C9               " "             ret
                                ;
1A25                            L1A25:
1A25 : CD 39 1A         " 9 "           call    L1A39
1A28 : C8               " "             ret     z
1A29 : 32 0A 38         "2 8"           ld      (X380A),a
1A2C : FE 13            "  "            cp      013H
1A2E : C0               " "             ret     nz
1A2F                            L1A2F:
1A2F : AF               " "             xor     a
1A30 : 32 0A 38         "2 8"           ld      (X380A),a
1A33                            L1A33:
1A33 : CD 39 1A         " 9 "           call    L1A39
1A36 : 28 FB            "( "            jr      z,L1A33
1A38 : C9               " "             ret
                                ;
1A39                            L1A39:
1A39 : CD 7E 1E         " ~ "           call    L1E7E
1A3C : FE 03            "  "            cp      003H
1A3E : 20 0A            "  "            jr      nz,L1A4A
1A40                            L1A40:
1A40 : 3A 5E 38         ":^8"           ld      a,(X385E)
1A43 : B7               " "             or      a
1A44 : CC BE 0B         "   "           call    z,L0BBE
1A47 : C3 CE 1F         "   "           jp      L1FCE
                                ;
1A4A                            L1A4A:
1A4A : B7               " "             or      a
1A4B : C9               " "             ret

1A4C : AF               PRESET: xor     a
1A4D : 18 02                    jr      PPRSET          ;[EUB] PSET FLAG
1A4F : 3E 01            PSET:   ld      a,1             ;[EUB] PSET FLAG
1A51 : 08               PPRSET: ex      af,af'          ;;Save PSET/PRESET flag
1A52 : CD 7F 1A                 call    SCAND
1A55 : CD 8E 1A                 call    L1A8E
1A58 : 28 02                    jr      z,L1A5C
1A5A : 36 A0                    ld      (hl),0A0H
1A5C                    L1A5C:
1A5C : 08                       ex      af,af'
1A5D : B7                       or      a
1A5E : 1A                       ld      a,(de)
1A5F : 20 03                    jr      nz,L1A64
1A61 : 2F                       cpl
1A62 : A6                       and     (hl)
1A63 : 06 B6                    ld      b,0B6H
1A65 : 77                       ld      (hl),a
1A66 : E1                       pop     hl
1A67 : C9                       ret
                                ;
1A68                            L1A68:
1A68 : D7               " "             rst     CHRGET
1A69 : CD 7F 1A         "   "           call    SCAND
1A6C : CD 8E 1A         "   "           call    L1A8E
1A6F : 20 06            "  "            jr      nz,L1A77
1A71 : 1A               " "             ld      a,(de)
1A72 : A6               " "             and     (hl)
1A73 : 16 01            "  "            ld      d,001H
1A75 : 20 02            "  "            jr      nz,L1A79
1A77                            L1A77:
1A77 : 16 00            "  "            ld      d,000H
1A79                            L1A79:
1A79 : AF               " "             xor     a
1A7A : CD 23 0B         " # "           call    L0B23
1A7D : E1               " "             pop     hl
1A7E : C9               " "             ret
                                ;
1A7F
1A7F : CF         [GWB] SCAND:  rst     SYNCHK
1A80 : 28                       .byte   '('             ;SKIP OVER OPEN PAREN
1A81 : CD D0 1A                 call    $1AD0
1A84 : D5                       push    de
1A85 : CF                       rst     SYNCHK
1A86 : 2C                       ,byte   ','
1A87 : CD D0 1A                 call    L1AD0
1A8A : CF                       rst     SYNCHK
1A8B : 29                       .byte   ')'
1A8C : C1                       pop     bc
1A8D : C9                       ret
                                ;
1A8E                            L1A8E:
1A8E : E3               " "             ex      (sp),hl
1A8F : E5               " "             push    hl
1A90 : C5               " "             push    bc
1A91 : D5               " "             push    de
1A92 : 21 47 00         "!G "           ld      hl,00047H
1A95 : E7               " "             rst     COMPAR
1A96                            L1A96:
1A96 : DA 97 06         "   "           jp      c,FCERR
1A99 : 21 4F 00         "!O "           ld      hl,0004FH
1A9C : C5               " "             push    bc
1A9D : D1               " "             pop     de
1A9E : E7               " "             rst     COMPAR
1A9F : 38 F5            "8 "            jr      c,L1A96
1AA1 : D1               " "             pop     de
1AA2 : C1               " "             pop     bc
1AA3 : 21 28 30         "!(0"           ld      hl,03028H
1AA6 : 7B               "{"             ld      a,e
1AA7 : 11 28 00         " ( "           ld      de,00028H
1AAA                            L1AAA:
1AAA : FE 03            "  "            cp      003H
1AAC : 38 06            "8 "            jr      c,L1AB4
1AAE : 19               " "             add     hl,de
1AAF : 3D               "="             dec     a
1AB0 : 3D               "="             dec     a
1AB1 : 3D               "="             dec     a
1AB2 : 18 F6            "  "            jr      L1AAA
                                ;
1AB4                            L1AB4:
1AB4 : 07               " "             rlca
1AB5 : CB 29            " )"            sra     c
1AB7 : 30 01            "0 "            jr      nc,L1ABA
1AB9 : 3C               "<"             inc     a
1ABA                            L1ABA:
1ABA : 09               " "             add     hl,bc
1ABB : 11 CA 1A         "   "           ld      de,01ACAH
1ABE                            L1ABE:
1ABE : B7               " "             or      a
1ABF : 28 04            "( "            jr      z,L1AC5
1AC1 : 13               " "             inc     de
1AC2 : 3D               "="             dec     a
1AC3 : 18 F9            "  "            jr      L1ABE
                                ;
1AC5                            L1AC5:
1AC5 : 7E               "~"             ld      a,(hl)
1AC6 : F6 A0            "  "            or      0A0H
1AC8 : AE               " "             xor     (hl)
1AC9 : C9               " "             ret
                                ;
1ACA : 01 02 04         "   "           ld      bc,00402H
1ACD : 08               " "             ex      af,af'
1ACE : 10 40            " @"            djnz    L1B10
1AD0                            L1AD0:
1AD0 : CD 85 09         "   "           call    FRMEVL
1AD3 : C3 82 06         "   "           jp      FRCINT
                                ;
1AD6 : D5               SOUND:  push    de
1AD7 : CD 7F 1A                 call    SCAND
1ADA : E5                       push    hl
1ADB : CD 64 1E                 call    SOUNDS
1ADE : E1                       pop     hl
1ADF : D1                       pop     de
1AE0 : C9                       ret

1AE1                    L1AE1:
1AE1 : 3E 0D                    ld      a,00DH
1AE3 : CD E8 1A                 call    LPTOUT
1AE6 : 3E 0A                    ld      a,00AH
1AE8              [M80] LPTOUT: ;Primitive print character to printer routine
1AE8 : F7                       rst     HOOKDO          ;;Call Extended ROM Hook Routine
1AE9 : 11                       .byte    17
1AEA : F5                       push    af              ;;Save character
1AEB : F5                       push    af              ;;Save Registers
1AEC : D9                       exx
1AED : DB FE            LPTRDY: in      a,($FE)         ;;Wait for printer to be ready
1AEF : E6 01                    and     1
1AF1 : 28 FA                    jr      z,LPTRDY
1AF3 : CD 08 1B                 call    OUTBIZ          ;;Send Start Bit
1AF6 : 1E 08            OUTBYT: ld      e,8             ;;Send 8 bits to printer
1AF8 : F1                       pop     af              ;;Restore character
1AF9 : CD 0A 1B         OUTBT1: call    OUTBIT          ;;Send bit 0 to printer
1AFC : 0F                       rrca                    ;;Rotate bits
1AFD : 1D                       dec     e               ;;Decrement counter and loop
1AFE : 20 F9                    jr      nz,OUTBT1
1B00 : 3E 01                    ld      a,1             ;;Send Stop Bit
1B02 : CD 0A 1B                 call    OUTBIT
1B05 : D9                       exx                     ;;Restore Registers
1B06 : F1                       pop     af
1B07 : C9                       ret

1B08 : 3E 00            OUTBIZ: ld      a,000H          ;Write zero bit to printer port
1B0A : D3 FE            OUTBIT: out     (0FEH),a        ;Write bit to printer port
1B0C : 26 B1                    ld      h,177           ;Wait 375,948 cycles
1B0E : 25               OUTDLY: dec     h               ;Wait [H]*2124+17 cycles
1B0F : 20 FD                    jr      nz,OUTDLY
1B11 : 00                       nop
1B12 : 00                       nop
1B13 : 00                       nop
1B14 : C9                       ret

1B15 : E5               COPY:   push    hl
1B16 : D5                       push    de
1B17 : CD E1 1A                 call    L1AE1
1B1A : 21 28 30                 ld      hl,03028H
1B1D : 11 E8 33                 ld      de,033E8H
1B20                    L1B20:
1B20 : 7E                       ld      a,(hl)
1B21 : CD E8 1A                 call

1B24 : 23                       inc     hl
1B25 : E7                       rst     COMPAR
1B26 : 38 F8                    jr      c,L1B20
1B28 : CD E1 1A                 call    L1AE1
1B2B : D1                       pop     de
1B2C : E1                       pop     hl
1B2D : C9                       ret
                                ;
1B2E                            L1B2E:
1B2E : E5               " "             push    hl
1B2F : D5               " "             push    de
1B30 : C5               " "             push    bc
1B31 : 21 E8 1B         "!  "           ld      hl,01BE8H
1B34                            L1B34:
1B34 : F5               " "             push    af
1B35 : CD 9D 0E         "   "           call    STROUT
1B38 : 21 B5 00         "!  "           ld      hl,000B5H
1B3B : CD 9D 0E         "   "           call    STROUT
1B3E                            L1B3E:
1B3E : CD 7E 1E         " ~ "           call    L1E7E
1B41 : FE 0D            "  "            cp      00DH
1B43 : 20 F9            "  "            jr      nz,L1B3E
1B45 : CD EA 19         "   "           call    CRDO
1B48 : F1               " "             pop     af
1B49 : C1               " "             pop     bc
1B4A : D1               " "             pop     de
1B4B : E1               " "             pop     hl
1B4C : C9               " "             ret
                                ;
1B4D                            L1B4D:
1B4D : D9               " "             exx
1B4E : 0E FC            "  "            ld      c,0FCH
1B50                            L1B50:
1B50 : CD 62 1B         " b "           call    L1B62
1B53 : 38 FB            "8 "            jr      c,L1B50
1B55 : 26 08            "& "            ld      h,008H
1B57                            L1B57:
1B57 : CD 62 1B         " b "           call    L1B62
1B5A : CB 15            "  "            rl      l
1B5C : 25               "%"             dec     h
1B5D : 20 F8            "  "            jr      nz,L1B57
1B5F : 7D               "}"             ld      a,l
1B60 : D9               " "             exx
1B61 : C9               " "             ret
                                ;
1B62                            L1B62:
1B62 : ED 78            " x"            in      a,(c)
1B64 : 1F               " "             rra
1B65 : 38 FB            "8 "            jr      c,L1B62
1B67                            L1B67:
1B67 : ED 78            " x"            in      a,(c)
1B69 : 1F               " "             rra
1B6A : 30 FB            "0 "            jr      nc,L1B67
1B6C : AF               " "             xor     a
1B6D                            L1B6D:
1B6D : 3C               "<"             inc     a
1B6E : ED 40            " @"            in      b,(c)
1B70 : CB 18            "  "            rr      b
1B72 : 38 F9            "8 "            jr      c,L1B6D
1B74                            L1B74:
1B74 : 3C               "<"             inc     a
1B75 : ED 40            " @"            in      b,(c)
1B77 : CB 18            "  "            rr      b
1B79 : 30 F9            "0 "            jr      nc,L1B74
1B7B : FE 49            " I"            cp      049H
1B7D : C9               " "             ret
1B7E                            L1B7E:
1B7E : C9               " "             ret
                                ;
1B7F                            L1B7F:
1B7F : E5               " "             push    hl
1B80 : D5               " "             push    de
1B81 : C5               " "             push    bc
1B82 : 21 F7 1B         "!  "           ld      hl,01BF7H
1B85 : 18 AD            "  "            jr      L1B34
                                ;
1B87                            L1B87:
1B87 : CD 8A 1B         "   "           call    L1B8A
1B8A                            L1B8A:
1B8A : F5               " "             push    af
1B8B : D9               " "             exx
1B8C : 0E FC            "  "            ld      c,0FCH
1B8E : F5               " "             push    af
1B8F : AF               " "             xor     a
1B90 : 1E 01            "  "            ld      e,001H
1B92 : CD A5 1B         "   "           call    L1BA5
1B95 : F1               " "             pop     af
1B96 : 1E 08            "  "            ld      e,008H
1B98 : CD A5 1B         "   "           call    L1BA5
1B9B : 3E FF            "> "            ld      a,$FF
1B9D : 1E 02            "  "            ld      e,002H
1B9F : CD A5 1B         "   "           call    L1BA5
1BA2 : D9               " "             exx
1BA3 : F1               " "             pop     af
1BA4 : C9               " "             ret
                                ;
1BA5                            L1BA5:
1BA5 : 17               " "             rla
1BA6 : 2E 40            ".@"            ld      l,040H
1BA8 : 38 02            "8 "            jr      c,L1BAC
1BAA : 2E 80            ". "            ld      l,080H
1BAC                            L1BAC:
1BAC : 06 04            "  "            ld      b,004H
1BAE                            L1BAE:
1BAE : ED 41            " A"            out     (c),b
1BB0 : 65               "e"             ld      h,l
1BB1                            L1BB1:
1BB1 : 25               "%"             dec     h
1BB2 : 20 FD            "  "            jr      nz,L1BB1
1BB4 : 05               " "             dec     b
1BB5 : 20 F7            "  "            jr      nz,L1BAE
1BB7 : 1D               " "             dec     e
1BB8 : 20 EB            "  "            jr      nz,L1BA5
1BBA : C9               " "             ret
1BBB : C9               " "             ret
                                ;
1BBC                            L1BBC:
1BBC : F5               " "             push    af
1BBD : C5               " "             push    bc
1BBE : 06 0C            "  "            ld      b,00CH
1BC0                            L1BC0:
1BC0 : 3E FF            "> "            ld      a,$FF
1BC2 : CD 8A 1B         "   "           call    L1B8A
1BC5 : 10 F9            "  "            djnz    L1BC0
1BC7 : AF               " "             xor     a
1BC8 : CD 8A 1B         "   "           call    L1B8A
1BCB : C1               " "             pop     bc
1BCC : F1               " "             pop     af
1BCD : C9               " "             ret
                                ;
1BCE                            L1BCE:
1BCE : F5               " "             push    af
1BCF : C5               " "             push    bc
1BD0                            L1BD0:
1BD0 : 06 06            "  "            ld      b,006H
1BD2                            L1BD2:
1BD2 : CD 4D 1B         " M "           call    L1B4D
1BD5 : 3C               "<"             inc     a
1BD6 : 20 F8            "  "            jr      nz,L1BD0
1BD8 : 10 F8            "  "            djnz    L1BD2
1BDA                            L1BDA:
1BDA : CD 4D 1B         " M "           call    L1B4D
1BDD : B7               " "             or      a
1BDE : 28 05            "( "            jr      z,L1BE5
1BE0 : 3C               "<"             inc     a
1BE1 : 28 F7            "( "            jr      z,L1BDA
1BE3 : 18 EB            "  "            jr      L1BD0
                                ;
1BE5                            L1BE5:
1BE5 : C1               " "             pop     bc
1BE6 : F1               " "             pop     af
1BE7 : C9               " "             ret
                                ;
1BE8 : 50               "P"             ld      d,b
1BE9 : 72               "r"             ld      (hl),d
1BEA : 65               "e"             ld      h,l
1BEB : 73               "s"             ld      (hl),e
1BEC : 73               "s"             ld      (hl),e
1BED : 20 3C            " <"            jr      nz,L1C2B
1BEF : 50               "P"             ld      d,b
1BF0 : 4C               "L"             ld      c,h
1BF1 : 41               "A"             ld      b,c
1BF2 : 59               "Y"             ld      e,c
1BF3 : 3E 0D            "> "            ld      a,00DH
1BF5 : 0A               " "             ld      a,(bc)
1BF6 : 00               " "             nop
1BF7 : 50               "P"             ld      d,b
1BF8 : 72               "r"             ld      (hl),d
1BF9 : 65               "e"             ld      h,l
1BFA : 73               "s"             ld      (hl),e
1BFB : 73               "s"             ld      (hl),e
1BFC : 20 3C            " <"            jr      nz,L1C3A
1BFE : 52               "R"             ld      d,d
1BFF : 45               "E"             ld      b,l
1C00 : 43               "C"             ld      b,e
1C01 : 4F               "O"             ld      c,a
1C02 : 52               "R"             ld      d,d
1C03 : 44               "D"             ld      b,h
1C04 : 3E 0D            "> "            ld      a,00DH
1C06 : 0A               " "             ld      a,(bc)
1C07 : 00               " "             nop

1C08 : F7               CSAVE:  rst     HOOKDO
1C09 : 15                       dec     d
1C0A : FE AA                    cp      0AAH
1C0C : CA 62 0C                 jp      z,CSAVES
1C0F : CD B8 1C                 call    L1CB8
1C12 : E5                       push    hl
1C13 : CD 25 1D                 call    L1D25
1C16 : 2A 4F 38                 ld      hl,(TXTTAB)
1C19 : CD 38 1D                 call    L1D38
1C1C                    L1C1C:
1C1C : 06 0F                    ld      b,00FH
1C1E : AF                       xor     a
1C1F                    L1C1F:
1C1F : CD 8A 1B                 call    L1B8A
1C22 : 10 FB                    djnz    L1C1F
1C24 : 01 40 1F                 ld      bc,01F40H
1C27 : CD 4B 1D                 call    L1D4B
1C2A : E1                       pop     hl
1C2B                    L1C2B:
1C2B : C9                       ret
                                ;
1C2C : F7               ClOAD:  rst     HOOKDO
1C2D : 14                       inc     d
1C2E : FE AA                    cp      '*'
1C30 : CA 63 0C                 jp      z,CLOADS
1C33 : D6 95                    sub     095H
1C35 : 28 02                    jr      z,L1C39
1C37 : AF                       xor     a
1C38 : 01 2F 23                 ld      bc,0232FH
1C3B : FE 01                    cp      001H
1C3D : F5                       push    af
1C3E : 3E FF                    ld      a,$FF
1C40 : 32 5E 38                 ld      (X385E),a
1C43 : CD B1 1C                 call    L1CB1
1C46                            L1C46:
1C46 : AF                       xor     a
1C47 : 32 5D 38                 ld      (X385D),a
1C4A : D5                       push    de
1C4B : CD 2E 1B                 call    L1B2E
1C4E : CD D9 1C                 call    L1CD9
1C51 : 21 57 38                 ld      hl,03857H
1C54 : CD ED 1C                 call    L1CED
1C57 : D1                       pop     de
1C58 : 28 12                    jr      z,L1C6C
1C5A : 21 06 1D                 ld      hl,01D06H
1C5D : CD 0D 1D                 call    L1D0D
1C60                    L1C60:
1C60 : 06 0A                    ld      b,00AH
1C62                    L1C62:
1C62 : CD 4D 1B                 call    L1B4D
1C65 : B7                       or      a
1C66 : 20 F8                    jr      nz,L1C60
1C68 : 10 F8                    djnz    L1C62
1C6A : 18 DA                    jr      L1C46
                                ;
1C6C                            L1C6C:
1C6C : 21 FE 1C         "!  "           ld      hl,01CFEH
1C6F : CD 0D 1D         "   "           call    L1D0D
1C72 : F1               " "             pop     af
1C73 : 32 E4 38         "2 8"           ld      (FACLO),a
1C76 : DC BE 0B         "   "           call    c,L0BBE
1C79 : 3A E4 38         ": 8"           ld      a,(FACLO)
1C7C : FE 01            "  "            cp      001H
1C7E : 32 5E 38         "2^8"           ld      (X385E),a
1C81 : 2A 4F 38         "*O8"           ld      hl,(TXTTAB)
1C84 : CD 51 1D         " Q "           call    L1D51
1C87 : 20 11            "  "            jr      nz,L1C9A
1C89 : 22 D6 38         "" 8"           ld      (VARTAB),hl
1C8C                            L1C8C:
1C8C : 21 6E 03         "!n "           ld      hl,REDDY
1C8F : CD 9D 0E         "   "           call    STROUT
1C92 : 3E FF            "> "            ld      a,$FF
1C94 : 32 5E 38         "2^8"           ld      (X385E),a
1C97 : C3 80 04         "   "           jp      FINI
                                ;
1C9A                            L1C9A:
1C9A : 23               "#"             inc     hl
1C9B : EB               " "             ex      de,hl
1C9C : 2A D6 38         "* 8"           ld      hl,(VARTAB)
1C9F : E7               " "             rst     COMPAR
1CA0 : 38 EA            "8 "            jr      c,L1C8C
1CA2 : 21 AB 1C         "!  "           ld      hl,01CABH
1CA5 : CD 9D 0E         "   "           call    STROUT
1CA8 : C3 01 04         "   "           jp      L0401
                                ;
1CAB : 42               "B"             ld      b,d
1CAC : 61               "a"             ld      h,c
1CAD : 64               "d"             ld      h,h
1CAE : 0D               " "             dec     c
1CAF : 0A               " "             ld      a,(bc)
1CB0 : 00               " "             nop
1CB1                            L1CB1:
1CB1 : AF               " "             xor     a
1CB2 : 32 51 38         "2Q8"           ld      (X3851),a
1CB5 : 2B               "+"             dec     hl
1CB6 : D7               " "             rst     CHRGET
1CB7 : C8               " "             ret     z
1CB8                            L1CB8:
1CB8 : CD 85 09         "   "           call    FRMEVL
1CBB : E5               " "             push    hl
1CBC : CD 06 10         "   "           call    ASC2
1CBF : 2B               "+"             dec     hl
1CC0 : 2B               "+"             dec     hl
1CC1 : 2B               "+"             dec     hl
1CC2 : 46               "F"             ld      b,(hl)
1CC3 : 0E 06            "  "            ld      c,006H
1CC5 : 21 51 38         "!Q8"           ld      hl,X3851
1CC8                            L1CC8:
1CC8 : 1A               " "             ld      a,(de)
1CC9 : 77               "w"             ld      (hl),a
1CCA : 23               "#"             inc     hl
1CCB : 13               " "             inc     de
1CCC : 0D               " "             dec     c
1CCD : 28 08            "( "            jr      z,L1CD7
1CCF : 10 F7            "  "            djnz    L1CC8
1CD1 : 41               "A"             ld      b,c
1CD2                            L1CD2:
1CD2 : 36 00            "6 "            ld      (hl),000H
1CD4 : 23               "#"             inc     hl
1CD5 : 10 FB            "  "            djnz    L1CD2
1CD7                            L1CD7:
1CD7 : E1               " "             pop     hl
1CD8 : C9               " "             ret
                                ;
1CD9                            L1CD9:
1CD9 : CD CE 1B         "   "           call    L1BCE
1CDC : AF               " "             xor     a
1CDD : 32 5D 38         "2]8"           ld      (X385D),a
1CE0 : 21 57 38         "!W8"           ld      hl,03857H
1CE3 : 06 06            "  "            ld      b,006H
1CE5                            L1CE5:
1CE5 : CD 4D 1B         " M "           call    L1B4D
1CE8 : 77               "w"             ld      (hl),a
1CE9 : 23               "#"             inc     hl
1CEA : 10 F9            "  "            djnz    L1CE5
1CEC : C9               " "             ret
                                ;
1CED                            L1CED:
1CED : 01 51 38         " Q8"           ld      bc,X3851
1CF0 : 1E 06            "  "            ld      e,006H
1CF2 : 0A               " "             ld      a,(bc)
1CF3 : B7               " "             or      a
1CF4 : C8               " "             ret     z
1CF5                            L1CF5:
1CF5 : 0A               " "             ld      a,(bc)
1CF6 : BE               " "             cp      (hl)
1CF7 : 23               "#"             inc     hl
1CF8 : 03               " "             inc     bc
1CF9 : C0               " "             ret     nz
1CFA : 1D               " "             dec     e
1CFB : 20 F8            "  "            jr      nz,L1CF5
1CFD : C9               " "             ret
                                ;
1CFE : 46               "F"             ld      b,(hl)
1CFF : 6F               "o"             ld      l,a
1D00 : 75               "u"             ld      (hl),l
1D01 : 6E               "n"             ld      l,(hl)
1D02 : 64               "d"             ld      h,h
1D03 : 3A 20 00         ":  "           ld      a,(X0020)
1D06 : 53               "S"             ld      d,e
1D07 : 6B               "k"             ld      l,e
1D08 : 69               "i"             ld      l,c
1D09 : 70               "p"             ld      (hl),b
1D0A : 3A 20 00         ":  "           ld      a,(X0020)
1D0D                            L1D0D:
1D0D : D5               " "             push    de
1D0E : F5               " "             push    af
1D0F : CD 9D 0E         "   "           call    STROUT
1D12 : 21 57 38         "!W8"           ld      hl,03857H
1D15 : 06 06            "  "            ld      b,006H
1D17                            L1D17:
1D17 : 7E               "~"             ld      a,(hl)
1D18 : 23               "#"             inc     hl
1D19 : B7               " "             or      a
1D1A : 28 01            "( "            jr      z,L1D1D
1D1C : DF               " "             rst     CHROUT
1D1D                            L1D1D:
1D1D : 10 F8            "  "            djnz    L1D17
1D1F : CD EA 19         "   "           call    CRDO
1D22 : F1               " "             pop     af
1D23 : D1               " "             pop     de
1D24 : C9               " "             ret
                                ;
1D25                            L1D25:
1D25 : CD 7F 1B         "   "           call    L1B7F
1D28 : CD BC 1B         "   "           call    L1BBC
1D2B : 06 06            "  "            ld      b,006H
1D2D : 21 51 38         "!Q8"           ld      hl,X3851
1D30                            L1D30:
1D30 : 7E               "~"             ld      a,(hl)
1D31 : 23               "#"             inc     hl
1D32 : CD 8A 1B         "   "           call    L1B8A
1D35 : 10 F9            "  "            djnz    L1D30
1D37 : C9               " "             ret
                                ;
1D38                            L1D38:
1D38 : CD BC 1B         "   "           call    L1BBC
1D3B : EB               " "             ex      de,hl
1D3C : 2A D6 38         "* 8"           ld      hl,(VARTAB)
1D3F                            L1D3F:
1D3F : 1A               " "             ld      a,(de)
1D40 : 13               " "             inc     de
1D41 : CD 8A 1B         "   "           call    L1B8A
1D44 : E7               " "             rst     COMPAR
1D45 : 20 F8            "  "            jr      nz,L1D3F
1D47 : C9               " "             ret
                                ;
1D48 : 01 00 00         "   "           ld      bc,00000H
1D4B                            L1D4B:
1D4B : 0B               " "             dec     bc
1D4C : 78               "x"             ld      a,b
1D4D : B1               " "             or      c
1D4E : 20 FB            "  "            jr      nz,L1D4B
1D50 : C9               " "             ret
                                ;
1D51                            L1D51:
1D51 : CD CE 1B         "   "           call    L1BCE
1D54 : 3E FF            "> "            ld      a,$FF
1D56 : 32 5D 38         "2]8"           ld      (X385D),a
1D59 : 9F               " "             sbc     a,a
1D5A : 2F               "/"             cpl
1D5B : 57               "W"             ld      d,a
1D5C                            L1D5C:
1D5C : 06 0A            "  "            ld      b,00AH
1D5E                            L1D5E:
1D5E : CD 4D 1B         " M "           call    L1B4D
1D61 : 5F               "_"             ld      e,a
1D62 : 96               " "             sub     (hl)
1D63 : A2               " "             and     d
1D64 : C0               " "             ret     nz
1D65 : 73               "s"             ld      (hl),e
1D66 : CD A9 0B         "   "           call    L0BA9
1D69 : 7E               "~"             ld      a,(hl)
1D6A : B7               " "             or      a
1D6B : 23               "#"             inc     hl
1D6C : 20 EE            "  "            jr      nz,L1D5C
1D6E : 10 EE            "  "            djnz    L1D5E
1D70 : AF               " "             xor     a
1D71 : C9               " "             ret
                                ;
1D72              [M80] TTYCHR: ;Print character to screen
1D72 : F7                       rst     HOOKDO          ;Call Extended BASIC Hook Routine
1D73 : 13                       .byte   19
1D74 : F5                       push    af              ;Save character
1D75 : FE 0A                    cp      CHRLNF          ;If LF
1D77 : 28 1A                    jr      z,L1D93
1D79 : 3A 00 38                 ld      a,(TTYPOS)      ;[M80] GET TTY POS
1D7C : B7                       or      a               ;[M80] SET CC'S
1D7D : 20 14                    jr      nz,L1D93
1D7F : 3A 08 38                 ld      a,(CNTOFL)
1D82 : B7                       or      a
1D83 : 28 0E                    jr      z,L1D93
1D85 : 3D                       dec     a
1D86 : 32 08 38                 ld      (CNTOFL),a
1D89 : 20 08                    jr      nz,L1D93
1D8B : 3E 17                    ld      a,017H
1D8D : 32 08 38                 ld      (CNTOFL),a
1D90 : CD 2F 1A                 call    L1A2F

1D93                    L1D93:
1D93 : F1                       pop     af
1D94                    L1D94:
1D94 : F5                       push    af
1D95 : D9                       exx
1D96 : FE 07                    cp      7
1D98 : CA 14 1E                 jp      z,OUTBEL
1D9B : FE 0B                    cp      11
1D9D : CA 45 1E                 jp      z,L1E45
1DA0 : 5F                       ld      e,a
1DA1 : 2A 01 38                 ld      hl,(X3801)
1DA4 : 3A 0D 38                 ld      a,(X380D)
1DA7 : 77                       ld      (hl),a
1DA8 : 7B                       ld      a,e
1DA9 : FE 08                    cp      008H
1DAB : 28 30                    jr      z,L1DDD
1DAD : FE 0D                    cp      00DH
1DAF : 28 0D                    jr      z,L1DBE
1DB1 : FE 0A                    cp      00AH
1DB3 : 28 13                    jr      z,L1DC8
1DB5 : 2A 01 38                 ld      hl,(X3801)
1DB8 : 77                       ld      (hl),a
1DB9 : CD 1F 1E                 call    L1E1F
1DBC : 18 2C                    jr      L1DEA
                                ;
1DBE                            L1DBE:
1DBE : ED 5B 00 38      " [ 8"          ld      de,(TTYPOS)
1DC2 : AF               " "             xor     a
1DC3 : 57               "W"             ld      d,a
1DC4 : ED 52            " R"            sbc     hl,de
1DC6 : 18 1F            "  "            jr      L1DE7
                                ;
1DC8                            L1DC8:
1DC8 : 11 C0 33         "  3"           ld      de,033C0H
1DCB : E7               " "             rst     COMPAR
1DCC : D2 D8 1D         "   "           jp      nc,L1DD8
1DCF : 11 28 00         " ( "           ld      de,00028H
1DD2 : 19               " "             add     hl,de
1DD3 : 22 01 38         "" 8"           ld      (X3801),hl
1DD6 : 18 12            "  "            jr      L1DEA
                                ;
1DD8                            L1DD8:
1DD8 : CD FE 1D         "   "           call    L1DFE
1DDB : 18 0D            "  "            jr      L1DEA
                                ;
1DDD                            L1DDD:
1DDD : 3A 00 38         ": 8"           ld      a,(TTYPOS)
1DE0 : B7               " "             or      a
1DE1 : 28 02            "( "            jr      z,L1DE5
1DE3 : 2B               "+"             dec     hl
1DE4 : 3D               "="             dec     a
1DE5                            L1DE5:
1DE5 : 36 20            "6 "            ld      (hl),020H
1DE7                            L1DE7:
1DE7 : CD 3E 1E         " > "           call    L1E3E
1DEA                    L1DEA:
1DEA : 2A 01 38                 ld      hl,(X3801)
1DED : 7E                       ld      a,(hl)
1DEE : 32 0D 38                 ld      (X380D),a
1DF1 : 36 7F                    ld      (hl),07FH
1DF3 : D9               XPOPAF: exx                     ;Restore [BC], [DE] and [HL]
1DF4 : F1                       pop     af              ;Restore [AF]
1DF5 : C9                       ret
                                ;
1DF6 : 2A 01 38         "* 8"           ld      hl,(X3801)
1DF9 : 3A 0D 38         ": 8"           ld      a,(X380D)
1DFC : 77               "w"             ld      (hl),a
1DFD : C9               " "             ret
                                ;
1DFE                            L1DFE:
1DFE : 01 98 03         "   "           ld      bc,00398H
1E01 : 11 28 30         " (0"           ld      de,03028H
1E04 : 21 50 30         "!P0"           ld      hl,03050H
1E07 : ED B0            "  "            ldir
1E09 : 06 28            " ("            ld      b,028H
1E0B : 21 C1 33         "! 3"           ld      hl,033C1H
1E0E                            L1E0E:
1E0E : 36 20            "6 "            ld      (hl),020H
1E10 : 23               "#"             inc     hl
1E11 : 10 FB            "  "            djnz    L1E0E
1E13 : C9               " "             ret
                                ;
1E14
1E14 : 01 C8 00   [M65] OUTBEL: ld      bc,200          ;Output BEL character
1E17 : 11 32 00                 ld      de,50
1E1A : CD 64 1E                 call    SOUNDS          ;Play freq 50, delay 300
1E1D : 18 D4            RESREG: jr      XPOPAF          ;Restore Registers and return

1E1F                            L1E1F:
1E1F : 2A 01 38         "* 8"           ld      hl,(X3801)
1E22 : 3A 00 38         ": 8"           ld      a,(TTYPOS)
1E25 : 23               "#"             inc     hl
1E26 : 3C               "<"             inc     a
1E27 : FE 26            " &"            cp      026H
1E29 : 38 13            "8 "            jr      c,L1E3E
1E2B : 23               "#"             inc     hl
1E2C : 23               "#"             inc     hl
1E2D : 11 E8 33         "  3"           ld      de,033E8H
1E30 : E7               " "             rst     COMPAR
1E31 : 3E 00            "> "            ld      a,000H
1E33 : 38 09            "8 "            jr      c,L1E3E
1E35 : 21 C1 33         "! 3"           ld      hl,033C1H
1E38 : CD 3E 1E         " > "           call    L1E3E
1E3B : C3 FE 1D         "   "           jp      L1DFE
                                ;
1E3E                            L1E3E:
1E3E : 22 01 38         "" 8"           ld      (X3801),hl
1E41 : 32 00 38         "2 8"           ld      (TTYPOS),a
1E44 : C9               " "             ret
                                ;
1E45                            L1E45:
1E45 : 06 20            "  "            ld      b,020H
1E47 : 21 00 30         "! 0"           ld      hl,03000H
1E4A : CD 59 1E         " Y "           call    L1E59
1E4D : 06 06            "  "            ld      b,006H
1E4F : CD 59 1E         " Y "           call    L1E59
1E52 : 21 29 30         "!)0"           ld      hl,03029H
1E55 : AF               " "             xor     a
1E56 : C3 E7 1D         "   "           jp      L1DE7
                                ;
1E59                            L1E59:
1E59 : 11 FF 03         "   "           ld      de,003FFH
1E5C                            L1E5C:
1E5C : 70               "p"             ld      (hl),b
1E5D : 23               "#"             inc     hl
1E5E : 1B               " "             dec     de
1E5F : 7A               "z"             ld      a,d
1E60 : B3               " "             or      e
1E61 : 20 F9            "  "            jr      nz,L1E5C
1E63 : C9               " "             ret
                                ;
1E64 : 78         [GWB] SOUNDS: ld      a,b             ;;Play frequency [DE] for duration [BC]
1E65 : B1                       or      c               ;;If BC = 0 return
1E66 : C8                       ret     z
1E67 : AF                       xor     a
1E68 : D3 FC                    out     (0FCH),a        ;;Write 0 to port $FC
1E6A : CD 76 1E                 call    SDELAY
1E6D : 3C                       inc     a
1E6E : D3 FC                    out     (0FCH),a        ;;Write 1 to port $FC
1E70 : CD 76 1E                 call    SDELAY          ;;Delay [DE]*31+44 cycles
1E73 : 0B                       dec     bc              ;;Decrememt duration counter and loop
1E74 : 18 EE                    jr      SOUNDS

1E76
1E76 : D5               SDELAY: push    de      ;;Delay [DE]*31+27 cycles
1E77 : E1                       pop     hl      ;;Copy freq delay to HL (+10)
1E78 : 7C               SDELAL: ld      a,h
1E79 : B5                       or      l
1E7A : C8                       ret     z       ;;If 0, return
1E7B : 2B                       dec     hl
1E7C : 18 FA                    jr      SDELAL  ;;Decrement and loop

1E7E                            L1E7E:
1E7E : F7               " "             rst     HOOKDO
1E7F : 12               " "             ld      (de),a
1E80                            L1E80:
1E80 : D9               " "             exx
1E81                            L1E81:
1E81 : 2A 0B 38         "* 8"           ld      hl,(X380B)
1E84 : 7C               "|"             ld      a,h
1E85 : B7               " "             or      a
1E86 : 28 1A            "( "            jr      z,L1EA2
1E88 : EB               " "             ex      de,hl
1E89 : 21 0F 38         "! 8"           ld      hl,0380FH
1E8C : 34               "4"             inc     (hl)
1E8D : 7E               "~"             ld      a,(hl)
1E8E : FE 0F            "  "            cp      00FH
1E90 : 38 3C            "8<"            jr      c,L1ECE
1E92 : 36 05            "6 "            ld      (hl),005H
1E94 : EB               " "             ex      de,hl
1E95 : 23               "#"             inc     hl
1E96 : 7E               "~"             ld      a,(hl)
1E97 : 22 0B 38         "" 8"           ld      (X380B),hl
1E9A : B7               " "             or      a
1E9B : F2 36 1F         " 6 "           jp      p,L1F36
1E9E : AF               " "             xor     a
1E9F : 32 0C 38         "2 8"           ld      (X380C),a
1EA2                            L1EA2:
1EA2 : 01 FF 00         "   "           ld      bc,000FFH
1EA5 : ED 78            " x"            in      a,(c)
1EA7 : 2F               "/"             cpl
1EA8 : E6 3F            " ?"            and     03FH
1EAA : 21 0E 38         "! 8"           ld      hl,0380EH
1EAD : 28 16            "( "            jr      z,L1EC5
1EAF : 06 7F            "  "            ld      b,07FH
1EB1 : ED 78            " x"            in      a,(c)
1EB3 : 2F               "/"             cpl
1EB4 : E6 0F            "  "            and     00FH
1EB6 : 20 1F            "  "            jr      nz,L1ED7
1EB8 : 06 BF            "  "            ld      b,0BFH
1EBA                            L1EBA:
1EBA : ED 78            " x"            in      a,(c)
1EBC : 2F               "/"             cpl
1EBD : E6 3F            " ?"            and     03FH
1EBF : 20 16            "  "            jr      nz,L1ED7
1EC1 : CB 08            "  "            rrc     b
1EC3 : 38 F5            "8 "            jr      c,L1EBA
1EC5                            L1EC5:
1EC5 : 23               "#"             inc     hl
1EC6 : 3E 46            ">F"            ld      a,046H
1EC8 : BE               " "             cp      (hl)
1EC9 : 38 03            "8 "            jr      c,L1ECE
1ECB : 28 04            "( "            jr      z,L1ED1
1ECD : 34               "4"             inc     (hl)
1ECE                            L1ECE:
1ECE : AF               " "             xor     a
1ECF : D9               " "             exx
1ED0 : C9               " "             ret
                                ;
1ED1                            L1ED1:
1ED1 : 34               "4"             inc     (hl)
1ED2 : 2B               "+"             dec     hl
1ED3 : 36 00            "6 "            ld      (hl),000H
1ED5 : 18 F7            "  "            jr      L1ECE
                                ;
1ED7                            L1ED7:
1ED7 : 11 00 00         "   "           ld      de,00000H
1EDA                            L1EDA:
1EDA : 1C               " "             inc     e
1EDB : 1F               " "             rra
1EDC : 30 FC            "0 "            jr      nc,L1EDA
1EDE : 7B               "{"             ld      a,e
1EDF                            L1EDF:
1EDF : CB 18            "  "            rr      b
1EE1 : 30 04            "0 "            jr      nc,L1EE7
1EE3 : C6 06            "  "            add     a,006H
1EE5 : 18 F8            "  "            jr      L1EDF
                                ;
1EE7                            L1EE7:
1EE7 : 5F               "_"             ld      e,a
1EE8 : BE               " "             cp      (hl)
1EE9 : 77               "w"             ld      (hl),a
1EEA : 23               "#"             inc     hl
1EEB : 20 0F            "  "            jr      nz,L1EFC
1EED : 3E 04            "> "            ld      a,004H
1EEF : BE               " "             cp      (hl)
1EF0 : 38 05            "8 "            jr      c,L1EF7
1EF2 : 28 0C            "( "            jr      z,L1F00
1EF4 : 34               "4"             inc     (hl)
1EF5 : 18 02            "  "            jr      L1EF9
                                ;
1EF7                            L1EF7:
1EF7 : 36 06            "6 "            ld      (hl),006H
1EF9                            L1EF9:
1EF9 : AF               " "             xor     a
1EFA : D9               " "             exx
1EFB : C9               " "             ret
                                ;
1EFC                            L1EFC:
1EFC : 36 00            "6 "            ld      (hl),000H
1EFE : 18 F9            "  "            jr      L1EF9
                                ;
1F00                            L1F00:
1F00 : 34               "4"             inc     (hl)
1F01 : 06 7F            "  "            ld      b,07FH
1F03 : ED 78            " x"            in      a,(c)
1F05 : CB 6F            " o"            bit     5,a
1F07 : DD 21 93 1F      " !  "          ld      ix,01F93H
1F0B : 28 0C            "( "            jr      z,L1F19
1F0D : CB 67            " g"            bit     4,a
1F0F : DD 21 65 1F      " !e "          ld      ix,01F65H
1F13 : 28 04            "( "            jr      z,L1F19
1F15 : DD 21 37 1F      " !7 "          ld      ix,01F37H
1F19                            L1F19:
1F19 : DD 19            "  "            add     ix,de
1F1B : DD 7E 00         " ~ "           ld      a,(ix+000H)
1F1E : B7               " "             or      a
1F1F : F2 36 1F         " 6 "           jp      p,L1F36
1F22 : D6 7F            "  "            sub     07FH
1F24 : 4F               "O"             ld      c,a
1F25 : 21 44 02         "!D "           ld      hl,00244H
1F28                            L1F28:
1F28 : 23               "#"             inc     hl
1F29 : 7E               "~"             ld      a,(hl)
1F2A : B7               " "             or      a
1F2B : F2 28 1F         " ( "           jp      p,L1F28
1F2E : 0D               " "             dec     c
1F2F : 20 F7            "  "            jr      nz,L1F28
1F31 : 22 0B 38         "" 8"           ld      (X380B),hl
1F34 : E6 7F            "  "            and     07FH
1F36                            L1F36:
1F36 : D9               " "             exx
1F37 : C9               " "             ret
                                ;
1F38 : 3D               "="             dec     a
1F39 : 08               " "             ex      af,af'
1F3A : 3A 0D 3B         ": ;"           ld      a,(X3B0D)
1F3D : 2E 2D            ".-"            ld      l,02DH
1F3F : 2F               "/"             cpl
1F40 : 30 70            "0p"            jr      nc,L1FB2
1F42 : 6C               "l"             ld      l,h
1F43                            L1F43:
1F43 : 2C               ","             inc     l
1F44 : 39               "9"             add     hl,sp
1F45 : 6F               "o"             ld      l,a
1F46 : 6B               "k"             ld      l,e
1F47 : 6D               "m"             ld      l,l
1F48 : 6E               "n"             ld      l,(hl)
1F49 : 6A               "j"             ld      l,d
1F4A : 38 69            "8i"            jr      c,L1FB5
1F4C : 37               "7"             scf
1F4D : 75               "u"             ld      (hl),l
1F4E : 68               "h"             ld      l,b
1F4F : 62               "b"             ld      h,d
1F50 : 36 79            "6y"            ld      (hl),079H
1F52 : 67               "g"             ld      h,a
1F53 : 76               "v"             halt
1F54 : 63               "c"             ld      h,e
1F55 : 66               "f"             ld      h,(hl)
1F56 : 35               "5"             dec     (hl)
1F57 : 74               "t"             ld      (hl),h
1F58 : 34               "4"             inc     (hl)
1F59 : 72               "r"             ld      (hl),d
1F5A : 64               "d"             ld      h,h
1F5B : 78               "x"             ld      a,b
1F5C : 33               "3"             inc     sp
1F5D : 65               "e"             ld      h,l
1F5E : 73               "s"             ld      (hl),e
1F5F : 7A               "z"             ld      a,d
1F60 : 20 61            " a"            jr      nz,L1FC3
1F62 : 32 77 31         "2w1"           ld      (X3177),a
1F65 : 71               "q"             ld      (hl),c
1F66 : 2B               "+"             dec     hl
1F67 : 5C               "\"             ld      e,h
1F68 : 2A 0D 40         "* @"           ld      hl,(X400D)
1F6B : 3E 5F            ">_"            ld      a,05FH
1F6D : 5E               "^"             ld      e,(hl)
1F6E : 3F               "?"             ccf
1F6F : 50               "P"             ld      d,b
1F70 : 4C               "L"             ld      c,h
1F71 : 3C               "<"             inc     a
1F72 : 29               ")"             add     hl,hl
1F73 : 4F               "O"             ld      c,a
1F74 : 4B               "K"             ld      c,e
1F75 : 4D               "M"             ld      c,l
1F76 : 4E               "N"             ld      c,(hl)
1F77 : 4A               "J"             ld      c,d
1F78 : 28 49            "(I"            jr      z,L1FC3
1F7A : 27               "'"             daa
1F7B : 55               "U"             ld      d,l
1F7C : 48               "H"             ld      c,b
1F7D : 42               "B"             ld      b,d
1F7E : 26 59            "&Y"            ld      h,059H
1F80 : 47               "G"             ld      b,a
1F81 : 56               "V"             ld      d,(hl)
1F82 : 43               "C"             ld      b,e
1F83 : 46               "F"             ld      b,(hl)
1F84 : 25               "%"             dec     h
1F85 : 54               "T"             ld      d,h
1F86 : 24               "$"             inc     h
1F87 : 52               "R"             ld      d,d
1F88 : 44               "D"             ld      b,h
1F89 : 58               "X"             ld      e,b
1F8A : 23               "#"             inc     hl
1F8B : 45               "E"             ld      b,l
1F8C : 53               "S"             ld      d,e
1F8D : 5A               "Z"             ld      e,d
1F8E : 20 41            " A"            jr      nz,L1FD1
1F90 : 22 57 21         ""W!"           ld      (X2157),hl
1F93 : 51               "Q"             ld      d,c
1F94 : 82               " "             add     a,d
1F95 : 1C               " "             inc     e
1F96 : C1               " "             pop     bc
1F97 : 0D               " "             dec     c
1F98 : 94               " "             sub     h
1F99 : C4 81 1E         "   "           call    nz,L1E81
1F9C : 30 10            "0 "            jr      nc,L1FAE
1F9E : CA C3 92         "   "           jp      z,L92C3
1FA1 : 0F               " "             rrca
1FA2 : 9D               " "             sbc     a,l
1FA3 : 0D               " "             dec     c
1FA4 : C8               " "             ret     z
1FA5 : 9C               " "             sbc     a,h
1FA6 : 8D               " "             adc     a,l
1FA7 : 09               " "             add     hl,bc
1FA8 : 8C               " "             adc     a,h
1FA9 : 15               " "             dec     d
1FAA : 08               " "             ex      af,af'
1FAB : C9               " "             ret
                                ;
1FAC : 90               " "             sub     b
1FAD : 19               " "             add     hl,de
1FAE                            L1FAE:
1FAE : 07               " "             rlca
1FAF : C7               " "             rst     START
1FB0 : 03               " "             inc     bc
1FB1 : 83               " "             add     a,e
1FB2                            L1FB2:
1FB2 : 88               " "             adc     a,b
1FB3 : 84               " "             add     a,h
1FB4 : A5               " "             and     l
1FB5                            L1FB5:
1FB5 : 12               " "             ld      (de),a
1FB6 : 86               " "             add     a,(hl)
1FB7 : 18 8A            "  "            jr      L1F43
                                ;
1FB9 : 85               " "             add     a,l
1FBA : 13               " "             inc     de
1FBB : 9A               " "             sbc     a,d
1FBC : C6 9B            "  "            add     a,09BH
1FBE : 97               " "             sub     a
1FBF : 8E               " "             adc     a,(hl)
1FC0 : 89               " "             adc     a,c
1FC1 : 11 E5 21         "  !"           ld      de,021E5H
1FC4 : 04               " "             inc     b
1FC5 : 00               " "             nop
1FC6 : 39               "9"             add     hl,sp
1FC7 : 22 F9 38         "" 8"           ld      (SAVSTK),hl
1FCA : E1               " "             pop     hl
1FCB : C3 25 1A         " % "           jp      L1A25
                                ;
1FCE                            L1FCE:
1FCE : 2A F9 38         "* 8"           ld      hl,(SAVSTK)
1FD1                            L1FD1:
1FD1 : F9               " "             ld      sp,hl
1FD2 : 2A CE 38         "* 8"           ld      hl,(SAVTXT)
1FD5 : CD 20 0C         "   "           call    L0C20

                        ;;Called from STKINI to save the stack pointer
                        ;;This code is inline in all the reference sources
1FD8 : 2B               STKSAV: dec     hl              ;TAKE INTO ACCOUNT FNDFOR STOPPER
1FD9 : 2B                       dec     hl
1FDA : 22 F9 38                 ld      (SAVSTK),hl      ;MAKE SURE SAVSTK OK JUST IN CASE
1FDD : 21 B1 38                 ld      hl,038B1H       ;INCREMENT BACK FOR SPHL
1FE0 : C9                       ret

                                ;
1FE1 : 3E FF      [M80] JMPINI: ld      a,$FF           ;;Turn off printer and Cold Start
1FE3 : D3 FE                    out     ($FE),a         ;;Write $FF to Printer Port
1FE5 : C3 41 00                 jp      INIT            ;[M80] INIT IS THE INTIALIZATION ROUTINE

1FE8                            L1FE8:
1FE8 : 3E AA            "> "            ld      a,0AAH
1FEA : D3 FF            "  "            out     ($FF),a
1FEC : 32 09 38         "2 8"           ld      (LASTFF),a
1FEF : C3 10 20         "   "           jp      L2010
                                ;
1FF2                            L1FF2:
1FF2 : 21 5F 01         "!_ "           ld      hl,0015FH
1FF5 : C3 9D 0E         "   "           jp      STROUT
                                ;
1FF8 : F5               " "             push    af
1FF9 : F5               " "             push    af
1FFA : F5               " "             push    af
1FFB : F5               " "             push    af
1FFC : F5               " "             push    af
1FFD : F5               " "             push    af
1FFE : F5               " "             push    af
1FFF : F5               " "             push    af

;--------------------------------------------------------------
Symbol table
============

Value           Type    Name
-----           ----    ----
0000            Code    START
0008            Code    SYNCHK
000A            Data    X000A
0010            Code    CHRGET
0018            Code    CHROUT
0020            Code    COMPAR
0020            Data    X0020
0028            Code    SIGN
0030            Code    HOOKDO
0041            Code    INIT
0062            Code    EXTCH1
0073            Code    EXTCH2
0089            Code    RESET
009F            Code    CYCLE
00CF            Code    COLORS
00D2            Code    COLOR1
00DC            Code    COLOR2
00ED            Code    WARMST
00FD            Code    COLDST
010E            Code    L010E
0112            Code    L0112
0123            Code    L0123
012E            Code    L012E
013B            Code    L013B
013D            Code    L013D
0147            Code    L0147
0153            Code    L0153
0170            Code    L0170
0193            Code    L0193
019E            Code    L019E
01A2            Code    L01A2
01AD            Code    L01AD
01C2            Code    L01C2
01C6            Code    L01C6
01C8            Code    L01C8
01D4            Code    L01D4
01DC            Code    L01DC
020B            Code    L020B
023E            Code    L023E
024E            Code    L024E
0251            Code    L0251
0261            Code    L0261
0292            Code    L0292
029D            Code    L029D
02A0            Code    L02A0
02A3            Code    L02A3
036E            Code    REDDY
039F            Code    FNDFOR
03A3            Code    LOOPER
03A8            Code    L03A8
03B6            Code    POPGOF
03BE            Code    DATSNE
03C4            Code    SNERR
03C7            Code    INTDV1
03CA            Code    ERRNF
03CD            Code    DDERR
03D3            Code    L03D3
03D4            Code    L03D4
03D6            Code    MOERR
03D9            Code    TMERR
03DB            Code    ERROR
03F4            Code    ERRFIN
0401            Code    L0401
0402            Code    READY
0414            Code    MAIN
0448            Code    LEXIST
044F            Code    MLOOP
045B            Code    NODEL
0479            Code    MLOOPR
0480            Code    FINI
0489            Code    CHEAD
0495            Code    CZLOOP
049F            Code    FNDLIN
04A2            Code    LOOP
04BC            Code    CRUNCH
04C5            Code    KLOOP
04EE            Code    MUSTCR
0505            Code    RESCON
0507            Code    LOPPSI
0516            Code    L0516
0524            Code    L0524
052C            Code    L052C
0532            Code    L0532
053C            Code    STUFFH
0548            Code    COLIS
054B            Code    NODATT
0551            Code    STR1
0558            Code    STRNG
055E            Code    CRDONE
057A            Code    LIST4
0597            Code    L0597
0598            Code    L0598
05A8            Code    L05A8
05B1            Code    L05B1
05D0            Code    LPFORM
05E9            Code    NOTOL
061F            Code    ONEON
0628            Code    L0628
062C            Code    L062C
064B            Code    GONE
0650            Code    GONE3
0651            Code    GONE2
066B            Code    CHRGTR
0670            Code    CHRCON
067A            Code    L067A
067B            Code    L067B
067E            Code    L067E
0682            Code    FRCINT
0697            Code    FCERR
069C            Code    SCNLIN
069D            Code    LINGET
06A0            Code    MORGET
06BB            Code    L06BB
06DB            Code    RUNC2
06DC            Code    GOTO
06F3            Code    USERR
0716            Code    L0716
071B            Code    L071B
071C            Code    DATA
071E            Code    REM
0722            Code    EXCHQT
0725            Code    L0725
0731            Code    LET
074A            Code    L074A
0768            Code    L0768
0770            Code    L0770
0779            Code    L0779
078E            Code    L078E
078F            Code    L078F
07A7            Code    L07A7
07BA            Code    L07BA
07C1            Code    L07C1
07FD            Code    L07FD
080A            Code    L080A
080D            Code    L080D
0811            Code    L0811
0817            Code    L0817
0825            Code    L0825
082D            Code    L082D
0833            Code    L0833
083A            Code    L083A
0853            Code    L0853
0856            Code    L0856
085A            Code    L085A
085E            Code    L085E
0861            Code    L0861
0880            Code    L0880
08AA            Code    NOTQTI
08C3            Code    L08C3
08C9            Code    L08C9
08DA            Code    L08DA
08EC            Code    L08EC
08F0            Code    DATBK
0908            Code    L0908
090B            Code    L090B
0917            Code    L0917
0929            Code    L0929
0953            Code    DATLOP
096A            Code    L096A
0972            Code    FRMNUM
0975            Code    CHKNUM
0976            Code    CHKSTR
0977            Code    CHKSTR
0983            Code    FRMPRN
0985            Code    FRMEVL
0988            Code    LPOPER
0994            Code    RETAOP
09B3            Code    L09B3
09BA            Code    NTPLUS
09CB            Code    L09CB
09E2            Code    DORELS
09E4            Code    L09E4
09FD            Code    EVAL
0A37            Code    L0A37
0A3D            Code    DOMIN
0A4E            Code    ISVAR
0A5F            Code    L0A5F
0A87            Code    L0A87
0A8F            Code    L0A8F
0A98            Code    L0A98
0ACB            Code    L0ACB
0AD0            Code    L0AD0
0B05            Code    L0B05
0B06            Code    L0B06
0B1C            Code    GIVDBL
0B21            Code    L0B21
0B22            Code    L0B22
0B23            Code    L0B23
0B36            Code    L0B36
0B40            Code    L0B40
0B45            Code    ERRDIR
0B53            Code    L0B53
0B54            Code    GETBYT
0B57            Code    CONINT
0B88            Code    L0B88
0B92            Code    BLTU
0B95            Code    L0B95
0B98            Code    L0B98
0BA0            Code    GETSTK
0BA9            Code    L0BA9
0BB7            Code    L0BB7
0BBE            Code    L0BBE
0BCB            Code    L0BCB
0BCF            Code    L0CD8
0BE5            Code    STKINI
0C01            Code    STKRTS
0C05            Code    RESTOR
0C19            Code    BGNRST
0C1A            Code    L0C1A
0C20            Code    L0C20
0C26            Code    L0C26
0C29            Code    ENDCON
0C3B            Code    DIRIS
0C62            Code    CSAVES
0C63            Code    CLOADS
0C92            Code    L0C92
0C98            Code    L0C98
0C9A            Code    L0C9A
0CA3            Code    L0CA3
0CAD            Code    L0CAD
0CBD            Code    L0CBD
0CC5            Code    ISLET
0CC6            Code    ISLETC
0CEB            Code    L0CEB
0D16            Code    L0D16
0D4D            Code    L0D4D
0D5B            Code    QINLIN
0D64            Code    RUBOUT
0D74            Code    NOTBEG
0D7C            Code    LINLIN
0D81            Code    INLINN
0D82            Code    INLINU
0D85            Code    INLIN
0D8E            Code    INLINC
0DA3            Code    NOTRUB
0DCC            Code    NTCTLX
0DE4            Code    L0DE4
0DE9            Code    GOODCH
0DF8            Code    L0DF8
0DFC            Code    L0DFC
0E12            Code    L0E12
0E39            Code    L0E39
0E4E            Code    STRIN1
0E50            Code    L0E50
0E53            Code    STRAD2
0E5F            Code    STRLIT
0E60            Code    STRLTI
0E63            Code    STRLT2
0E66            Code    STRGET
0E72            Code    STRFIN
0E7E            Code    PUTNEW
0E9D            Code    STROUT
0EA0            Code    STRPRT
0EA7            Code    STRPR2
0EB3            Code    GETSPA
0ECE            Code    L0ECE
0EDB            Code    L0EDB
0EDE            Code    L0EDE
0EFA            Code    L0EFA
0F0A            Code    L0F0A
0F0B            Code    L0F0B
0F32            Code    L0F32
0F35            Code    L0F35
0F57            Code    L0F57
0F7C            Code    CAT
0FB4            Code    L0FB4
0FBD            Code    L0FBD
0FBE            Code    L0FBE
0FC6            Code    FRESTR
0FC9            Code    FREFAC
0FCC            Code    FRETM2
0FCD            Code    FRETMP
0FE2            Code    NOTLST
0FE4            Code    FRETMS
0FF7            Code    LEN1
1006            Code    ASC2
1019            Code    SETSTR
1025            Code    LEFT3
102E            Code    ALLSTR
106F            Code    MID2
10A0            Code    PREAM
10A3            Code    PREAM2
10D1            Code    PTRGET
10E9            Code    ISSEC
10EA            Code    EATEM
10F2            Code    NOSEC
10FE            Code    NOTSTR
110E            Code    NOARYS
1126            Code    L1126
1132            Code    L1132
113D            Code    L113D
1161            Code    L1161
116C            Code    L116C
116F            Code    L116F
117A            Code    ISARY
1180            Code    L1180
11A0            Code    ERSFIN
11A6            Code    L11A6
11B5            Code    L11B5
11CD            Code    L11CD
11D3            Code    L11D3
11EE            Code    L11EE
11F5            Code    L11F5
1212            Code    L1212
122B            Code    L122B
1230            Code    L1230
124C            Code    L124C
1250            Code    L1250
1253            Code    L1253
125E            Code    FSUB
1261            Code    FADD
127A            Code    L127A
129F            Code    L129F
12AD            Code    L12AD
12B0            Code    NORMAL
12B3            Code    L12B3
12C3            Code    SNGFLT
12C4            Code    L12C4
12C8            Code    L12C8
12CE            Code    L12CE
12D7            Code    L12D7
12DF            Code    L12DF
12E2            Code    L12E2
12F1            Code    L12F1
12F2            Code    L12F2
1303            Code    L1303
1310            Code    L1310
131C            Code    L131C
1330            Code    L1330
1332            Code    L1332
133D            Code    L133D
1346            Code    L1346
134E            Code    L134E
1352            Code    L1352
1354            Code    L1354
1385            Code    LOG
1395            Code    L1395
13CB            Code    FMULT
13F3            Code    L13F3
1403            Code    L1403
1416            Code    L1416
141A            Code    L141A
141C            Code    L141C
1421            Code    L1421
142D            Code    FDIVT
142F            Code    FDIV
1458            Code    L1458
146A            Code    L146A
1482            Code    L1482
1487            Code    L1487
14AC            Code    MULDIV
14CC            Code    L14CC
14CD            Code    L14CD
14D4            Code    L14D4
14EB            Code    SIGNC
14F1            Code    L14F1
14F6            Code    FLOAT
14FB            Code    L14FB
150B            Code    NEG
1513            Code    L1513
1520            Code    MOVFM
1523            Code    MOVFR
152E            Code    MOVRF
1531            Code    MOVRM
1538            Code    INXHRT
153A            Code    MOVMF
153D            Code    VMOVE
153F            Code    L153F
1546            Code    L1546
155B            Code    L155B
1573            Code    L1573
1586            Code    L1586
15AA            Code    L15AA
15B1            Code    INT
15CA            Code    L15CA
15D2            Code    L15D2
15E0            Code    L15E0
15E5            Code    FIN
15EF            Code    L15EF
15F7            Code    L15F7
160A            Code    L160A
160E            Code    L160E
161A            Code    L161A
161E            Code    L161E
1621            Code    L1621
162D            Code    L162D
1637            Code    L1637
1638            Code    L1638
163F            Code    L163F
1656            Code    L1656
1661            Code    L1661
166D            Code    INPRT
1675            Code    L1675
1680            Code    L1680
168C            Code    L168C
169B            Code    L169B
16B0            Code    L16B0
16B9            Code    L16B9
16D5            Code    L16D5
16E6            Code    L16E6
16F5            Code    L16F5
171A            Code    L171A
1726            Code    L1726
1736            Code    L1736
1738            Code    L1738
1742            Code    L1742
1745            Code    L1745
1748            Code    L1748
1770            Code    L1770
178C            Code    L178C
17A6            Code    L17A6
17B5            Code    L17B5
17CD            Code    EXP
17FF            Code    L17FF
1802            Code    L1802
180E            Code    L180E
1811            Code    L1811
1837            Code    L1837
1846            Code    L1846
184F            Code    L184F
18A0            Code    RND1
18A3            Code    L18A3
18A6            Code    L18A6
18BB            Code    NTPTRB
18C4            Code    RNDSTR
18D7            Code    COS
18DD            Code    SIN
18F3            Code    L18F3
1935            Code    L1935
1942            Code    L1942
199A            Code    MORSPL
19A6            Code    NOTABL
19B7            Code    ZERLP1
19BA            Code    LPTPOP
19BB            Code    LPTCHR
19BE            Code    FINLPT
19C7            Code    PRINTW
19D6            Code    TTYPOP
19DA            Code    INCHR
19DE            Code    CRDONZ
19E5            Code    GFNINL
19EA            Code    CRDO
19F0            Code    CRFIN
19FA            Code    CRCONT
19FB            Code    L19FB
1A0B            Code    L1A0B
1A18            Code    L1A18
1A25            Code    L1A25
1A2F            Code    L1A2F
1A33            Code    L1A33
1A39            Code    L1A39
1A40            Code    L1A40
1A4A            Code    L1A4A
1A4F            Code    PSET
1A51            Code    PPRSET
1A5C            Code    L1A5C
1A64            Code    L1A64
1A68            Code    L1A68
1A77            Code    L1A77
1A79            Code    L1A79
1A7F            Code    SCAND
1A8E            Code    L1A8E
1A96            Code    L1A96
1AAA            Code    L1AAA
1AB4            Code    L1AB4
1ABA            Code    L1ABA
1ABE            Code    L1ABE
1AC5            Code    L1AC5
1AD0            Code    L1AD0
1AE1            Code    L1AE1
1AE8            Code    LPTOUT
1AED            Code    LPTRDY
1AF9            Code    OUTBT1
1B08            Code    OUTBIZ
1B0A            Code    OUTBIT
1B0E            Code    LPTDLY
1B10            Code    L1B10
1B20            Code    L1B20
1B2E            Code    L1B2E
1B34            Code    L1B34
1B3E            Code    L1B3E
1B4D            Code    L1B4D
1B50            Code    L1B50
1B57            Code    L1B57
1B62            Code    L1B62
1B67            Code    L1B67
1B6D            Code    L1B6D
1B74            Code    L1B74
1B7E            Code    L1B7E
1B7F            Code    L1B7F
1B87            Code    L1B87
1B8A            Code    L1B8A
1BA5            Code    L1BA5
1BAC            Code    L1BAC
1BAE            Code    L1BAE
1BB1            Code    L1BB1
1BBC            Code    L1BBC
1BC0            Code    L1BC0
1BCE            Code    L1BCE
1BD0            Code    L1BD0
1BD2            Code    L1BD2
1BDA            Code    L1BDA
1BE5            Code    L1BE5
1C1C            Code    L1C1C
1C1F            Code    L1C1F
1C2B            Code    L1C2B
1C39            Code    L1C39
1C3A            Code    L1C3A
1C46            Code    L1C46
1C60            Code    L1C60
1C62            Code    L1C62
1C6C            Code    L1C6C
1C8C            Code    L1C8C
1C9A            Code    L1C9A
1CB1            Code    L1CB1
1CB8            Code    L1CB8
1CC8            Code    L1CC8
1CD2            Code    L1CD2
1CD7            Code    L1CD7
1CD9            Code    L1CD9
1CE5            Code    L1CE5
1CED            Code    L1CED
1CF5            Code    L1CF5
1D0D            Code    L1D0D
1D17            Code    L1D17
1D1D            Code    L1D1D
1D25            Code    L1D25
1D30            Code    L1D30
1D38            Code    L1D38
1D3F            Code    L1D3F
1D4B            Code    L1D4B
1D51            Code    L1D51
1D5C            Code    L1D5C
1D5E            Code    L1D5E
1D72            Code    TTYCHR
1D93            Code    L1D93
1D94            Code    L1D94
1DBE            Code    L1DBE
1DC8            Code    L1DC8
1DD8            Code    L1DD8
1DDD            Code    L1DDD
1DE5            Code    L1DE5
1DE7            Code    L1DE7
1DEA            Code    L1DEA
1DF3            Code    XPOPAF
1DFE            Code    L1DFE
1E0E            Code    L1E0E
1E14            Code    OUTBEL
1E1D            Code    RESREG
1E1F            Code    L1E1F
1E3E            Code    L1E3E
1E45            Code    L1E45
1E59            Code    L1E59
1E5C            Code    L1E5C
1E64            Code    SOUNDS
1E76            Code    SDELAY
1E78            Code    SDELAL
1E7E            Code    L1E7E
1E80            Code    L1E80
1E81            Code    L1E81
1EA2            Code    L1EA2
1EBA            Code    L1EBA
1EC5            Code    L1EC5
1ECE            Code    L1ECE
1ED1            Code    L1ED1
1ED7            Code    L1ED7
1EDA            Code    L1EDA
1EDF            Code    L1EDF
1EE7            Code    L1EE7
1EF7            Code    L1EF7
1EF9            Code    L1EF9
1EFC            Code    L1EFC
1F00            Code    L1F00
1F19            Code    L1F19
1F28            Code    L1F28
1F36            Code    L1F36
1F43            Code    L1F43
1FAE            Code    L1FAE
1FB2            Code    L1FB2
1FB5            Code    L1FB5
1FC2            Code    L1FC2
1FC3            Code    L1FC3
1FCE            Code    L1FCE
1FD1            Code    L1FD1
1FD8            Code    STKSAV
1FE1            Code    INIT
1FE8            Code    L1FE8
1FF2            Code    L1FF2
2010            Code    L2010
2157            Data    X2157
2C0C            Code    L2C0C
3177            Data    X3177
3800            Data    TTYPOS
3801            Data    X3801
3803            Code    USRPOK
3806            Data    HOOK
3808            Data    CNTOFL
3809            Data    LASTFF
380A            Data    X380A
380B            Data    X380B
380C            Data    X380C
380D            Data    X380D
3810            Code    L3810
3811            Data    X3811
3815            Data    X3815
3819            Data    X3819
381C            Data    X381C
381F            Data    RNDCNT
3846            Data    LPTPOS
3847            Data    PRTFLG
3848            Data    X3848
3849            Data    X3849
384A            Data    CHARC
384B            Data    TOPMEM
384D            Data    CURLIN
384F            Data    TXTTAB
3851            Data    X3851
385D            Data    X385D
385E            Data    X385E
38A9            Data    X38A9
38AA            Data    DIMFLG
38AB            Data    VALTYP
38AC            Data    DORES
38AD            Data    MEMSIZ
38AF            Data    TEMPPT
38BF            Data    X38BF
38C1            Data    FRETOP
38C3            Data    TENP3
38C5            Data    X38C5
38C7            Data    ENDFOR
38C9            Data    DATLIN
38CB            Data    SUBFLG
38CC            Data    X38CC
38CD            Data    FLGINP
38CE            Data    SAVTXT
38D0            Data    TENP2
38D2            Data    OLDLIN
38D4            Data    OLDTXT
38D6            Data    VARTAB
38D8            Data    ARYTAB
38DA            Data    STREND
38DC            Data    DATPTR
38DE            Data    X38DE
38E4            Data    FACLO
38E6            Data    FACHO
38E7            Data    FAC
38F6            Data    X38F6
38F7            Data    X38F7
38F9            Data    SAVSTK
3900            Data    X3900
3999            Code    L3999
3B0D            Data    X3B0D
400D            Data    X400D
4145            Code    L4145
4153            Code    L4153
4241            Code    L4241
4449            Code    L4449
444E            Code    L444E
4548            Code    L4548
454C            Code    L454C
4645            Code    L4645
4749            Code    L4749
474F            Code    L474F
494C            Code    L494C
4D45            Code    L4D45
4D49            Code    L4D49
4DB0            Code    L4DB0
4E41            Code    L4E41
4E45            Code    L4E45
4E4F            Code    L4E4F
4E55            Code    L4E55
4F4C            Code    L4F4C
4F50            Code    L4F50
504F            Code    L504F
5248            Code    L5248
5250            Code    L5250
5345            Code    L5345
5349            Code    L5349
534F            Code    L534F
5441            Code    L5441
5445            Code    L5445
790A            Code    L790A
848D            Code    L848D
92C3            Code    L92C3
B395            Data    XB395
BE10            Code    LBE10
CA19            Code    LCA19
D698            Code    LD698
D717            Code    LD717
E010            Code    XINIT
E1C1            Code    LE1C1
E503            Code    LE503
F703            Code    LF703

Number of symbols:                      695

;--------------------------------------------------------------
